{"head":{"title":"10.0 File và các thao tác cơ bản với file trong C","route":"10/0-file-va-cac-thao-tac-co-ban-voi-file-trong-c","id":35276,"description":"int main() { \tconst char filePath = \"C:/Users/ADMIN/Desktop/my_document.txt\"; \tFILE file; } file = fopen(filePath, \"r\"); if (!file)…"},"body":"<html><head></head><body><h3>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h3>\n\n<p>Trong bài học này, chúng ta sẽ cùng tìm hiểu về các khái niệm về File và cách để thao tác với File trong ngôn ngữ lập trình C/C++.</p>\n\n<h3>File</h3>\n\n<p>Nếu máy tính của các bạn có ổ cứng, hoặc các bạn có USB hoặc bất kỳ thiết bị lưu trữ nào thì chắc chắn các bạn đã từng làm việc với File. Khi các bạn chơi một game offline, thông tin nhân vật, điểm số, ... sẽ được lưu trữ trong File để khi chương trình game bị tắt đi thì các bạn không phải chơi lại từ đầu. Khi các bạn cài đặt cấu hình cho một phần mềm và tắt đi, cấu hình đó được lưu vào File để lần làm việc tiếp theo sẽ sử dụng. Hay khi các bạn biên dịch một chương trình C++ trên Visual Studio 2015, C++ Compiler của Visual studio sẽ đọc mã nguồn các bạn đã viết trong các file <code>*.cpp</code> để kiểm tra lỗi và dịch chúng sang file <code>*.obj</code>. Ngay cả hệ điều hành Windows mà các bạn đang sử dụng cũng là tập hợp của rất nhiều file được lưu trữ bên trong phân vùng ổ đĩa dùng cho Hệ điều hành...</p>\n\n<p>Đó là một vài ví dụ cho thấy sự tồn tại của File trong máy tính. Vậy thì chúng ta đã thao tác với những File đó như thế nào?</p>\n\n<p>Làm việc với File chúng ta chỉ có các thao tác cơ bản như: tạo file mới, đọc dữ liệu trong file, ghi dữ liệu vào file, xóa file... Và chúng ta làm điều đó hằng ngày, khi chúng ta chơi game, khi xem phim trên máy tính, ... và ngay cả khi chúng ta lập trình, mã nguồn của chúng ta được lưu xuống File mã nguồn khi nhấn tổ hợp phím Ctrl + S.</p>\n\n<p><strong>Theo định nghĩa trên Wikipedia về computer file</strong>: Một file trên máy tính là một tài nguyên dùng để lưu trữ thông tin lâu dài, sử dụng cho các chương trình máy tính.</p>\n\n<p>Cũng giống như việc lưu trữ dữ liệu tạm thời trên RAM, file cũng lưu trữ dữ liệu dưới dạng nhị phân (0 hoặc 1), tuy nhiên tùy vào định dạng của file và cách chuyển đổi của mỗi phần mềm đọc file mà chúng ta có những kiểu thông tin khác nhau. Ví dụ file .png thì được chuyển về dạng hình ảnh, phần mềm Microsoft Word chuyển dãy bit nhị phân về dạng text...</p>\n\n<p><strong>Trong ngôn ngữ lập trình C/C++</strong>: File là kiểu đối tượng, nó xác định một stream và chứa các thông tin cần thiết để điều khiển, bao gồm một con trỏ trỏ đến buffer của nó, các chỉ mục và trạng thái của nó.</p>\n\n<p>Các bạn có thể hiểu File (trong ngôn ngữ lập trình C/C++) là một kiểu đối tượng mà thông qua nó chúng ta có thể thao tác với dữ liệu được lưu trữ bên trong File (chứ không phải là một File trên máy tính).</p>\n\n<p>Để các bạn không bị nhầm lẫn, mình đang nói về kiểu dữ liệu FILE được định nghĩa trong thư viện cstdio (hay stdio.h) mà có thể các bạn đã từng học trong ngôn ngữ C. Chúng ta sẽ học cách sử dụng các Stream để thao tác với file thay vì sử dụng kiểu dữ liệu FILE trong các bài học sau, nhưng mình nghĩ kiểu dữ liệu FILE trong thư viện cstdio cũng có những ưu điểm riêng của nó nên mình không bỏ qua bài học này.</p>\n\n<h3>Làm việc với FILE type trong C/C++</h3>\n\n<p>Trong bài học này, mình sẽ hướng dẫn các bạn thực hiện các thao tác như mở file, đọc và ghi dữ liệu trong file... Chúng ta cần làm việc trên một file cụ thể nào đó nên mình sẽ tạo một file với tên file là <code>my_document.txt</code> trong thư mục Desktop có đường dẫn trên máy mình là: <code>C:/Users/ADMIN/Desktop/my_document.txt</code></p>\n\n<p>Để làm việc với file, chúng ta cần biết vị trí của file (thông qua đường dẫn) để con trỏ kiểu FILE có thể tạo được luồng dữ liệu giữa người dùng và file trên thiết bị lưu trữ.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdio></span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\n\tFILE *file;\n\t\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<h4>Open file</h4>\n\n<p>Để mở một file, các bạn có thể sử dụng hàm fopen được định nghĩa trong thư viện cstdio:</p>\n\n<p></p><pre><code class=\"hljs language-stata\"><span class=\"hljs-keyword\">FILE</span>* fopen(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *<span class=\"hljs-keyword\">file</span>, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *mode);</code></pre>\n\n<p>Hàm fopen cho phép tạo một kết nối đến file với đường dẫn được lưu trữ bởi tham số thứ nhất. Nếu file không tồn tại, file mới sẽ được tạo ra với tên file như trong đường dẫn. Tham số thứ hai xác định kiểu truy cập vào file. Bảng dưới đây liệt kê các mode dùng để mở một file trong C:</p>\n\n<p></p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-0-file/0.png?raw=true\" class=\"lightbox\" title=\"0.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-0-file/0.png?raw=true\" width=\"690\" height=\"341\"><div class=\"meta\">\n<span class=\"filename\">0.png?raw=true</span><span class=\"informations\">753x373</span><span class=\"expand\"></span>\n</div></a></div><p></p>\n\n<p>Nếu mở file thành công, một địa chỉ của một đối tượng kiểu FILE sẽ được trả về. Nếu mở file thất bại thì trả về NULL.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\nFILE *file;\n\nfile = fopen(filePath, <span class=\"hljs-string\">\"r\"</span>);\n<span class=\"hljs-keyword\">if</span> (!file)\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-keyword\">else</span>\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<p>Trong đoạn chương trình trên, mình mở file đã tạo sẵn trong thư mục Desktop với mode \"r\" (chỉ dùng để đọc dữ liệu).</p>\n\n<p><strong><em>Các bạn cần lưu ý rằng file trong máy tính tồn tại ở 2 dạng: file văn bản và file bị mã hóa.</em></strong></p>\n\n<p>File văn bản là những file mà các bạn có thể đọc được khi mở bằng các trình soạn thảo văn bản, thông thường những file này được định dạng Unicode (hoặc những định dạng dùng cho văn bản khác). </p>\n\n<p>File bị mã hóa (thường gọi là file nhị phân) không thể đọc được khi mở file bằng các trình soạn thảo văn bản. Sử dụng File bị mã hóa giúp chúng ta bảo mật dữ liệu tốt hơn File văn bản.</p>\n\n<p>Các mode mà mình đã liệt kê ở bảng trên chỉ dùng để thao tác với file văn bản. Khi thao tác với file bị mã hóa (file nhị phân), các bạn cần nối thêm kí tự b (binary) vào ngay sau mode mà các bạn chọn. Ví dụ: \"rb\", \"wb\", \"ab\", \"rb+\", \"r+b\", ...</p>\n\n<h4>Close file</h4>\n\n<p>Sau khi thao tác với file xong, các bạn cần đóng file lại để tránh những lỗi phát sinh ngoài ý muốn. Để đóng file, chúng ta sử dụng hàm fclose:</p>\n\n<p></p><pre><code class=\"hljs language-fortran\"><span class=\"hljs-built_in\">int</span> fclose(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>);</code></pre>\n\n<p>Trong đó, file là con trỏ được dùng để lưu trữ địa chỉ của đối tượng FILE đang mở. Nếu đóng file thành công thì trả về giá trị 0, ngược lại trả về <strong>EOF</strong> (End of file).</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\nFILE *file;\n\nfile = fopen(filePath, <span class=\"hljs-string\">\"r\"</span>);\n<span class=\"hljs-keyword\">if</span> (!file)\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-keyword\">else</span>\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\nfclose(file);</code></pre>\n\n<p>Hàm fclose sẽ giải phóng tất cả dữ liệu chưa được xử lý trên file nếu chúng vẫn còn lưu trong buffer, đóng file lại, và giải phóng tất cả vùng nhớ mà đối tượng FILE sử dụng.</p>\n\n<h4>Write data to file</h4>\n\n<p>Các bạn đã thực hiện được thao tác mở và đóng file, nhưng lúc này, file mới tạo ra vẫn chưa có dữ liệu nên mình sẽ thực hiện thao tác ghi dữ liệu vào file trước. Để mở file cho chế độ ghi file, chúng ta có các mode \"w\", \"r+\", \"w+\", \"a\", \"a+\". Mình chỉ muốn ghi dữ liệu nên mình sẽ chọn mode \"w\".</p>\n\n<p>Nhưng trước hết, chúng ta nên tách thao tác ghi file ra một hàm riêng có dạng:</p>\n\n<p></p><pre><code class=\"hljs language-gradle\"><span class=\"hljs-keyword\">void</span> writeToFile(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>);</code></pre>\n\n<p>Hàm này sẽ được gọi sau khi mở file và trước khi đóng file.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\nFILE *file;\n\nfile = fopen(filePath, <span class=\"hljs-string\">\"w\"</span>);\n<span class=\"hljs-keyword\">if</span> (!file)\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-keyword\">else</span>\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\nwriteToFile(file);\n\nfclose(file);</code></pre>\n\n<p>Bây giờ, chúng ta chỉ quan tâm đến nội dung bên trong hàm writeToFile.</p>\n\n<p>Để ghi dữ liệu vào file, chúng ta có các hàm đã được định nghĩa sẵn trong thư viện cstdio như sau:</p>\n\n<ul>\n<li>\n<p><strong>fputc:</strong></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fputc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> c, FILE *f)</span></span>;</code></pre>\n<p>Hàm fputc sẽ ghi ký tự có mã ASCII là c vào file được trỏ đến bởi con trỏ f. Giá trị trả về là EOF nếu ghi dữ liệu thất bại, trả về mã ASCII của kí tự được ghi vào nếu thực hiện thành công.</p>\n<p>Ví dụ:</p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeToFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">int</span> c = fputc(<span class=\"hljs-string\">'A'</span>, file);\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; c &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n<p>Sau khi chạy chương trình xong, các bạn mở file my_document.txt trên Desktop lên sẽ thấy kí tự 'A' đã được ghi vào, đồng thời trên console cũng in ra mã ASCII của kí tự 'A'.</p>\n</li>\n<li>\n<p><strong>fputs:</strong></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fputs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *str, FILE *f)</span></span>;</code></pre>\n<p>Hàm fputs ghi một C-Style string vào file được trỏ đến bởi con trỏ f cho đến khi gặp kí tự '\\0'.</p>\n<p>Ví dụ:</p>\n<p></p>\n<pre><code class=\"hljs language-gradle\"><span class=\"hljs-keyword\">void</span> writeToFile(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>)\n{\n\t<span class=\"hljs-keyword\">int</span> c = fputs(<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-keyword\">file</span>);\n}</code></pre>\n<p>Sau khi chạy chương trình, các bạn mở file my_document.txt ở thư mục Desktop sẽ thấy kí tự 'A' lúc nãy không còn nữa, thay vào đó là chuỗi kí tự \"hello\".</p>\n</li>\n<li>\n<p><strong>fprintf:</strong></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fprintf</span><span class=\"hljs-params\">(FILE *f, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *format, ...)</span></span>;</code></pre>\n<p>Hàm fprintf tương tự hàm printf trong ngôn ngữ C. Tuy nhiên, hàm printf được mặc định liên kết với đối tượng FILE có tên là stdout nên sử dụng hàm printf sẽ ghi nội dung ra màn hình.</p>\n<p>Hàm printf tương đương với cách sử dụng <code>fprintf(stdout, format, ...)</code>.</p>\n<p>Nhưng lúc này, chúng ta muốn ghi dữ liệu vào file nên chúng ta sẽ truyền vào tham số thứ nhất là một con trỏ kiểu FILE khác với các đối tượng stdout, stdin hay stderr.</p>\n<p>Cách định dạng cho tham số format trong hàm fprintf cũng giống như hàm printf, các bạn có thể tham khảo ở đây: </p>\n<p><a href=\"http://www.cplusplus.com/reference/cstdio/printf/\">http://www.cplusplus.com/reference/cstdio/printf/</a></p>\n<p>Ví dụ:</p>\n<p></p>\n<pre><code class=\"hljs language-gradle\"><span class=\"hljs-keyword\">void</span> writeToFile(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>)\n{\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">5</span>; i++)\n\t\tfprintf(<span class=\"hljs-keyword\">file</span>, <span class=\"hljs-string\">\"This is an example line %d\\n\"</span>, i);\n}</code></pre>\n<p>Sau khi chạy đoạn chương trình trên, các bạn mở lại file my_document.txt trong thư mục Desktop để xem lại kết quả.</p>\n<p>Sử dụng hàm fprintf giúp chúng ta dễ dàng định dạng cho dữ liệu được ghi vào file, từ đó có thể ghi nhiều dòng vào file bằng vòng lặp nếu các dòng đó có cùng định dạng.</p>\n</li>\n</ul>\n\n<h4>Read data from file</h4>\n\n<p>Đầu tiên mình sẽ tạo một hàm khác có tên là readFromFile như sau:</p>\n\n<p></p><pre><code class=\"hljs language-gradle\"><span class=\"hljs-keyword\">void</span> readFromFile(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>)\n{\n\t<span class=\"hljs-comment\">//read data</span>\n}</code></pre>\n\n<p>Để làm các ví dụ trong phần này, mình sẽ gọi hàm này sau khi đã gọi hàm writeToFile.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\nFILE *file;\n\nfile = fopen(filePath, <span class=\"hljs-string\">\"w+\"</span>);\n<span class=\"hljs-keyword\">if</span> (!file)\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-keyword\">else</span>\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\nwriteToFile(file);\nreadFromFile(file);\n\nfclose(file);</code></pre>\n\n<p>Lúc này, file của chúng ta được mở để vừa đọc và ghi file, nên mình sẽ sử dụng mode \"w+\" (hoặc \"r+\").</p>\n\n<p>Và dưới đây là một số hàm được định nghĩa sẵn trong thư viện cstdio hỗ trợ chúng ta đọc dữ liệu văn bản từ file.</p>\n\n<ul>\n<li>\n<p><strong>fgetc:</strong></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fgetc</span><span class=\"hljs-params\">(FILE *f)</span></span>;</code></pre>\n<p>Hàm fgetc đọc ra một kí tự trong file, internal file position indicator sẽ chuyển đến kí tự tiếp theo. Giá trị trả về là mã ASCII của kí tự đã đọc được.</p>\n<p>Ví dụ:</p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; (<span class=\"hljs-keyword\">char</span>)fgetc(file) &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n</li>\n<li>\n<p><strong>fgets:</strong></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">char</span>* <span class=\"hljs-title\">fgets</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *buf, <span class=\"hljs-keyword\">int</span> n, FILE *f)</span></span>;</code></pre>\n<p>Hàm fgets đọc từ file ra (n - 1) kí tự, việc đọc dữ liệu sẽ bị dừng nếu đọc được kí tự new line '\\n' hoặc EOF. Chuỗi kí tự đọc được sẽ lưu vào vùng nhớ được quản lý bởi con trỏ buf, nếu đọc dữ liệu thành công thì trả về địa chỉ của buf, ngược lại trả về NULL.</p>\n<p>Ví dụ:<br></p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">255</span>];\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; fgets(str, <span class=\"hljs-number\">255</span>, file) &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; str &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n<p>Kết quả đọc file được lưu vào mảng kí tự str.</p>\n</li>\n<li>\n<p><strong>fscanf:</strong></p>\n<p>Tương tự như ghi dữ liệu vào file với định dạng cho trước, chúng ta cũng có thể đọc dữ liệu từ file với một định dạng nào đó.</p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fscanf</span><span class=\"hljs-params\">(FILE *f, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *format, ...)</span></span>;</code></pre>\n<p>fscanf cũng hoạt động tương tự hàm scanf trong ngôn ngữ C, tuy nhiên, hàm scanf được thiết lập liên kết mặc định đến file stdin. Như vậy, <code>fscanf(stdin, format, ...)</code> sẽ tương đương với <code>scanf(format, ...)</code>.</p>\n<p>Hàm fscanf cũng hoạt động tương tự scanf nên các bạn có thể tham khảo thêm tại đây:</p>\n<p><a href=\"http://www.cplusplus.com/reference/cstdio/scanf/\">http://www.cplusplus.com/reference/cstdio/scanf/</a></p>\n<p>Ví dụ:</p>\n<p></p>\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">255</span>];\n\t<span class=\"hljs-built_in\">fscanf</span>(file, <span class=\"hljs-string\">\"%[^\\n]\"</span>, str);\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; str &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n<p>Lưu ý, sử dụng hàm fscanf không khiến internal file position indicator di chuyển đến các vị trí tiếp theo nên chúng ta cần thêm một số kĩ thuật khác liên quan đến việc di chuyển con trỏ trong file (internal file position indicator).</p>\n</li>\n</ul>\n\n<h4>Reposition stream position indicator</h4>\n\n<p>Ghép các ví dụ ở trên lại, chúng ta có một chương trình đơn giản minh họa cho việc ghi file và đọc từng dòng dữ liệu (line by line) đã được ghi vào file như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;string></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdio></span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeToFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">5</span>; i++)\n\t\t<span class=\"hljs-built_in\">fprintf</span>(file, <span class=\"hljs-string\">\"This is an example line %d\\n\"</span>, i);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">char</span> str[<span class=\"hljs-number\">255</span>];\n\t<span class=\"hljs-keyword\">while</span> (fgets(str, <span class=\"hljs-number\">255</span>, file) != <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; str;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\n\tFILE *file;\n\n\tfile = fopen(filePath, <span class=\"hljs-string\">\"w+\"</span>);\n\t<span class=\"hljs-keyword\">if</span> (!file)\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n\twriteToFile(file);\n\treadFromFile(file);\n\n\tfclose(file);\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Tuy nhiên, kết quả cho ra màn hình không như mong muốn.</p>\n\n<p>Nguyên nhân là khi chúng ta gọi hàm writeToFile và truyền vào đó con trỏ file, việc ghi file đã khiến internal file position indicator trỏ đến vị trí cuối cùng trong file. Sau khi quay trở lại hàm main, chúng ta tiếp tục gọi hàm readFromFile với cùng một con trỏ file. Như vậy, lúc chúng ta đọc file thì chúng ta lại bắt đầu đọc tại vị trí kết thúc file.</p>\n\n<p>Để khắc phục điều này, chúng ta cần đóng con trỏ file lại và mở tạo một liên kết mới bằng hàm fopen với mode dùng để đọc file. Tuy nhiên, làm như vậy thì code xử lý của chúng ta sẽ dài hơn. Thư viện cstdio đã hỗ trợ cho chúng ta hàm fseek để thay đổi vị trí trỏ đến trong file của internal file position indicator.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fseek</span><span class=\"hljs-params\">(FILE *f, <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> offset, <span class=\"hljs-keyword\">int</span> origin)</span></span>;</code></pre>\n\n<p>Trong đó: </p>\n\n<ul>\n<li><p>f là con trỏ trỏ đến đối tượng FILE đang mở.</p></li>\n<li><p>offset là số bytes được cộng thêm tính từ vị trí origin.</p></li>\n<li>\n<p>origin là địa điểm đặt con trỏ trong file:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-0-file/1.png?raw=true\" width=\"467\" height=\"124\"></p>\n</li>\n</ul>\n\n<p>Như vậy, sau khi gọi hàm writeToFile xong, chúng ta cần di chuyển internal file position indicator về đầu file bằng cách như sau:</p>\n\n<p></p><pre><code class=\"hljs language-lisp\">writeToFile(<span class=\"hljs-name\">file</span>)<span class=\"hljs-comment\">;</span>\nfseek(<span class=\"hljs-name\">file</span>, <span class=\"hljs-number\">0</span>, SEEK_SET)<span class=\"hljs-comment\">;</span>\nreadFromFile(<span class=\"hljs-name\">file</span>)<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>Sau đó chạy chương trình thì thấy dữ liệu in ra màn hình đúng như những gì chúng ta đã ghi vào file.</p>\n\n<h4>Determine size of content of file</h4>\n\n<p>Đôi khi chúng ta cần đọc toàn bộ nội dung của file vào một vùng nhớ trên Heap, chúng ta sẽ cần biết trước kích thước nội dung có trong file để cấp phát đủ vùng nhớ trước khi đọc file. Thư viện cstdio chỉ cung cấp cho chúng ta hàm ftell:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">ftell</span><span class=\"hljs-params\">(FILE *f)</span></span>;</code></pre>\n\n<p>Hàm này sẽ trả về vị trí của file indicator đang trỏ đến trong file (số bytes của nội dung file mà indicator đã duyệt qua).</p>\n\n<p>Như vậy, các bạn có thể đọc kích thước của nội dung trong file bằng cách dịch internal file position indicator về vị trí cuối cùng trong file rồi gọi hàm ftell:</p>\n\n<p></p><pre><code class=\"hljs language-fortran\">__int64 size_of_file(<span class=\"hljs-keyword\">FILE</span> *<span class=\"hljs-keyword\">file</span>)\n{\n\tfseek(<span class=\"hljs-keyword\">file</span>, <span class=\"hljs-number\">0</span>, SEEK_END);\n\t__int64 <span class=\"hljs-built_in\">size</span> = ftell(<span class=\"hljs-keyword\">file</span>);\n\tfseek(<span class=\"hljs-keyword\">file</span>, <span class=\"hljs-number\">0</span>, SEEK_SET);\n\t\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">size</span>;\n}</code></pre>\n\n<h4>Binary I/O functions</h4>\n\n<p>Dưới đây là 2 hàm dùng để đọc và ghi dữ liệu chỉ dùng cho mode nhị phân.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">size_t</span> fwrite(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">void</span> *ptr, <span class=\"hljs-keyword\">size_t</span> size, <span class=\"hljs-keyword\">size_t</span> count, FILE *f);</code></pre>\n\n<p>Hàm fwrite dùng để ghi dãy bit trong vùng nhớ được quản lý bởi con trỏ ptr vào file đang được trỏ bởi f, size là số bytes sẽ copy từ vùng nhớ của ptr và count là số lần ghi vùng nhớ đó xuống file.</p>\n\n<p>Hàm fwrite không quan tâm vùng nhớ của các bạn có định dạng gì, nó quan tâm kích thước vùng nhớ cần đọc và cứ thế copy tất cả các bits và file, mỗi lần sẽ copy 1 block of bit. </p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">size_t</span> fread(<span class=\"hljs-keyword\">void</span> *ptr, <span class=\"hljs-keyword\">size_t</span> size, <span class=\"hljs-keyword\">size_t</span> count, FILE *f);</code></pre>\n\n<p>Hàm fread sẽ copy count lần block of bits có kích thước là size, đưa vào vùng nhớ được trỏ đến bởi ptr, từ file đang được quản lý bởi f.</p>\n\n<p>Sau khi gọi hàm fread, internal file position indicator sẽ di chuyển tới (size * count) bytes từ vị trí bắt đầu đọc file.</p>\n\n<p>Ví dụ:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstring></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdio></span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeToFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">char</span> *s = <span class=\"hljs-string\">\"Hello everyone!\"</span>;\n\tfwrite(s, <span class=\"hljs-built_in\">strlen</span>(s), <span class=\"hljs-number\">1</span>, file);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">void</span> *ptr = <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-keyword\">new</span>(<span class=\"hljs-number\">255</span>); <span class=\"hljs-comment\">//allocate 255 bytes on Heap</span>\n\tfread(ptr, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">1</span>, file);\n\t(<span class=\"hljs-keyword\">static_cast</span>&#x3C;<span class=\"hljs-keyword\">char</span> *>(ptr))[<span class=\"hljs-number\">255</span>] = <span class=\"hljs-string\">'\\0'</span>;\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-keyword\">static_cast</span>&#x3C;<span class=\"hljs-keyword\">char</span> *>(ptr) &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\n\tFILE *file;\n\n\tfile = fopen(filePath, <span class=\"hljs-string\">\"w+b\"</span>); <span class=\"hljs-comment\">//use binary mode</span>\n\t<span class=\"hljs-keyword\">if</span> (!file)\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n\twriteToFile(file);\n\tfseek(file, <span class=\"hljs-number\">0</span>, SEEK_SET);\n\treadFromFile(file);\n\n\tfclose(file);\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Chạy chương trình trên cho ra kết quả là rất nhiều kí tự rác.</p>\n\n<p>Như các bạn thấy, hàm fread đọc đúng 255 bytes trong file để đưa vào vùng nhớ của ptr nên các giá trị thừa xuất hiện. Trong trường hợp này, dùng hàm fread và fwrite không phù hợp. Hàm fread và fwrite thường được dùng để đọc và ghi dữ liệu kiểu struct vào file.</p>\n\n<h4>Write and read structs</h4>\n\n<p>Mình vẫn giữ nguyên cấu trúc chương trinh như trên và chỉ thay đổi code trong hàm writeToFile và readFromFile.</p>\n\n<p>Trước hết, mình tạo một struct đơn giản như sau:</p>\n\n<p></p><pre><code class=\"hljs language-abnf\">struct Employee\n{\n\t__int32 ID<span class=\"hljs-comment\">;</span>\n\tchar name[<span class=\"hljs-number\">50</span>]<span class=\"hljs-comment\">;</span>\n}<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>Kích thước của struct này là 56 bytes (không phải là 54 bytes do cách tổ chức dữ liệu trong struct còn liên quan đến khái niệm struct alignment). Như vậy là mỗi unit có kiểu Employee được tạo ra đều chiếm một vùng nhớ có kích thước 56 bytes.</p>\n\n<p>Các bạn thử tưởng tượng nếu chúng ta sử dụng các hàm ghi file như fputs, fprintf... thì kích thước tên của mỗi người sẽ khác nhau dẫn đến chúng ta không có một định dạng chung để dễ quản lý nhiều Employee trong file. Việc đặt chúng vào trong 1 struct giúp chúng ta đọc và ghi file dễ dàng hơn nhiều.</p>\n\n<p>Dưới đây là một đoạn chương trình mẫu cho việc xử lý file để quản lý 3 Employee:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstring></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdio></span></span>\n\n<span class=\"hljs-keyword\">struct</span> Employee\n{\n\t<span class=\"hljs-number\">__</span>int32 ID;\n\t<span class=\"hljs-keyword\">char</span> name[<span class=\"hljs-number\">50</span>];\n};\n\nEmployee emps[<span class=\"hljs-number\">3</span>] =\n{\n\t{ <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"Le Tran Dat\"</span> },\n\t{ <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"Ngo Doan Tuan\"</span> },\n\t{ <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">\"Le Dinh Huy\"</span> }\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeToFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++)\n\t{\n\t\tfwrite(&#x26;emps[i], <span class=\"hljs-keyword\">sizeof</span>(Employee), <span class=\"hljs-number\">1</span>, file);\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readFromFile</span><span class=\"hljs-params\">(FILE *file)</span>\n</span>{\n\tEmployee emp;\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++)\n\t{\n\t\tfread(&#x26;emp, <span class=\"hljs-keyword\">sizeof</span>(Employee), <span class=\"hljs-number\">1</span>, file);\n\t\t\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; emp.ID &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; emp.name &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"================================\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\n\tFILE *file;\n\n\tfile = fopen(filePath, <span class=\"hljs-string\">\"w+b\"</span>); <span class=\"hljs-comment\">//use binary mode</span>\n\t<span class=\"hljs-keyword\">if</span> (!file)\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Can not open this file\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"File is opened\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n\twriteToFile(file);\n\tfseek(file, <span class=\"hljs-number\">0</span>, SEEK_SET);\n\treadFromFile(file);\n\n\tfclose(file);\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Các bạn chạy thử đoạn chương trình trên để xem kết quả.</p>\n\n<p>Bây giờ chúng ta cùng mở file my_document.txt trong thư mục Desktop để xem thử nội dung trong file như thế nào:</p>\n\n<p></p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-0-file/2.png?raw=true\" class=\"lightbox\" title=\"2.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-0-file/2.png?raw=true\" width=\"563\" height=\"500\"><div class=\"meta\">\n<span class=\"filename\">2.png?raw=true</span><span class=\"informations\">642x570</span><span class=\"expand\"></span>\n</div></a></div><p></p>\n\n<p>Vậy là nội dung file đã bị mã hóa dưới dạng nhị phân nên không thể đọc hoàn toàn nội dung lưu trong file được.</p>\n\n<p>Việc sử dụng hàm fread và fwrite cho các kiểu dữ liệu struct giúp chúng ta thao tác dễ dàng hơn khi kích thước của các biến struct là giống nhau.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n</body></html>","__filename":"generated/35276.md","__url":"/10/0-file-va-cac-thao-tac-co-ban-voi-file-trong-c/","__resourceUrl":"/10/0-file-va-cac-thao-tac-co-ban-voi-file-trong-c/index.html","__dataUrl":"/10/0-file-va-cac-thao-tac-co-ban-voi-file-trong-c/index.html.4861fc6e08120a1008aa6bd046e1f5bf.json"}