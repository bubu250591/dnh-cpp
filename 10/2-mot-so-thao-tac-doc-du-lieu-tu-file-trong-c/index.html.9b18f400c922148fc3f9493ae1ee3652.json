{"head":{"title":"10.2 Một số thao tác đọc dữ liệu từ File trong C++","route":"10/2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-c","id":35567,"description":"if (input.fail()) { \tstd::cout &lt;&lt; \"Failed to open this file!\" &lt;&lt; std::endl; \treturn -1; } //read or write data in here…"},"body":"<html><head></head><body><h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Mình đã trình bày đến các bạn một số thao tác cơ bản với file khi sử dụng thư viện cstdio (trong ngôn ngữ lập trình C), sử dụng thư viện này, chúng ta sẽ sử dụng một con trỏ kiểu FILE làm cầu nối trung gian giữa chương trình của chúng ta và file, mọi thao tác trên file đều phải sử dụng con trỏ kiểu FILE này. Trong bài học này, các bạn sẽ cùng mình tìm hiểu thêm một số cách để thao tác với file bằng cách sử dụng các stream mà ngôn ngữ C++ cung cấp.</p>\n\n<p>Như mình giới thiệu ở bài học trước, để thao tác với file trong ngôn ngữ C++, chúng ta sử dụng các class như ifstream (file input), ofstream (file output), hoặc fstream (file input/output) và dữ liệu sẽ được truyền đi một cách tuần tự qua các đối tượng của các stream này, để đi vào file hoặc đi từ file ra chương trình.</p>\n\n<h3>File input</h3>\n\n<p>Đầu tiên mình muốn giới thiệu đến các bạn một số thao tác đọc dữ liệu từ file sử dụng class fstream mà ngôn ngữ C++ cung cấp. Để sử dụng class này, chúng ta cần include file fstream vào file chương trình:</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;fstream></span></span></code></pre>\n\n<p>Do class ifstream và ofstream đều được định nghĩa bên trong file fstream, nên chúng ta chỉ cần include thư viện fstream là có thể sử dụng cả hai class này.</p>\n\n<p>Bây giờ chúng ta cùng tạo một đối tượng file input thuộc kiểu ifstream:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ifstream <span class=\"hljs-title\">fileInput</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>)</span></span>;</code></pre>\n\n<p>File mà mình muốn đọc có tên là <code>my_document.txt</code> trong thư mục Desktop trên máy tính của mình. Class ifstream có nhiều phương thức khởi tạo khác nhau, nhưng đơn giản nhất là chúng ta truyền vào một string là đường dẫn chính xác của file chúng ta cần đọc dữ liệu. Nếu file đó nằm trong thư mục mà chương trình được build ra thì chúng ta có thể sử dụng đường dẫn tương đối.</p>\n\n<p>Bây giờ mình sẽ kiểm tra xem đối tượng fileInput của mình đã liên kết được đến file cần mở hay chưa bằng cách sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">if</span> (fileInput.fail())\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Failed to open this file!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<p>Phương thức fail sẽ trả về false nếu đối tượng của ifstream không liên kết đến file được. Và chính xác là nó đã không liên kết được với file.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-cpp/0.png?raw=true\" width=\"579\" height=\"384\"></p>\n\n<p>Đó là do trong thư mục Desktop của mình chưa có file <code>my_document.txt</code> nào cả. Bây giờ mình tạo một file <code>my_document.txt</code> chưa có dữ liệu trong thư mục Desktop, chương trình không còn thông báo lỗi gì nữa.</p>\n\n<p>Như các bạn thấy, chúng ta sử dụng các phương thức được định nghĩa trong class ifstream, nên chúng ta chỉ cần sử dụng member selection operator <code>(.)</code> để gọi các phương thức đã định nghĩa sẵn.</p>\n\n<p>Một điều chúng ta cần lưu ý khi thao tác đọc ghi file với ngôn ngữ C là chúng ta luôn phải gọi hàm đóng file <code>fclose</code> ngay khi không còn sử dụng đến file nữa. Đối với các stream xử lý file trong C++ thì đơn giản hơn, khi ra khỏi phạm vi khối lệnh, destructor sẽ tự gọi phương thức close và file stream sẽ tự động đóng lại.</p>\n\n<p>Do đó, các bạn có thể xử lý như sau (hoặc không cần thiết cũng được):</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ifstream <span class=\"hljs-title\">input</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>)</span></span>;\n\n<span class=\"hljs-keyword\">if</span> (input.fail())\n{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Failed to open this file!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">//read or write data in here</span>\n\ninput.close(); <span class=\"hljs-comment\">//we can forget this line</span></code></pre>\n\n<p>Bây giờ đến phần xử lý đọc dữ liệu từ file, dữ liệu từ file sẽ truyền qua stream vào các biến trong chương trình. Nhưng trước hết, mình cần thêm một số dữ liệu vào file <code>my_document.txt</code> trước. Nội dung của file <code>my_document.txt</code> như sau:</p>\n\n<p></p><pre><code class=\"hljs language-basic\"><span class=\"hljs-symbol\">1 </span><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span></code></pre>\n\n<p>Mình sẽ có chương trình đọc dữ liệu từ file thông qua đối tượng fileInput và in ra màn hình như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;fstream></span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ifstream <span class=\"hljs-title\">fileInput</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>)</span></span>;\n\n\t<span class=\"hljs-keyword\">if</span> (fileInput.fail())\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Failed to open this file!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n\t}\n\t<span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n\t{\n\t\t<span class=\"hljs-keyword\">int</span> n;\n\t\tfileInput >> n;\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; n &#x3C;&#x3C; <span class=\"hljs-string\">\" \"</span>;\n\t}\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n\tfileInput.close();\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Mình đã sử dụng extraction operator (>>) để đưa dữ liệu từ file vào lưu trong biến n và sau đó in ra màn hình thông qua đối tượng std::cout. Lúc trước, các bạn nhập dữ liệu từ bàn phím, dữ liệu đó sẽ được lưu tạm thời trong stdin ở đâu đó trong máy tính, và sử dụng đối tượng cin để đưa dữ liệu vào biến. Bây giờ, dữ liệu đã có sẵn trong file, chúng ta chỉ cần tạo một đối tượng thuộc kiểu ifstream và liên kết đến file, sau đó sử dụng toán tử (>>) để đưa dữ liệu vào biến. Cách hoạt động hoàn toàn tương tự nhau phải không các bạn?</p>\n\n<p>Tuy nhiên, chúng ta cần biết rõ cấu trúc tổ chức dữ liệu bên trong file là như thế nào để tránh các trường hợp ngoại lệ xảy ra. Ví dụ mình giữ nguyên cấu trúc chương trình như trên và sửa lại file my_document.txt có nội dung như sau:</p>\n\n<p>1 2 3 4 5 a b c</p>\n\n<p>Thử chạy lại chương trình trên, chương trình sẽ rơi vào tình trạng lặp vô hạn. Đó là do kiểu dữ liệu mà chúng ta chọn để lưu giá trị đọc từ file là số nguyên, nhưng trong file lại xuất hiện các kí tự. Do đó, khi đọc hết số nguyên trong file, các kí tự không thể đưa vào biến n được do lỗi định dạng, vòng lặp while không thể kết thúc do chúng ta đặt điều kiện là đọc cho đến khi kết thúc file.</p>\n\n<p>Để khắc phục tình trạng này, chúng ta cần kiểm tra dữ liệu đọc từ file đưa vào chương trình có đúng định dạng hay không, chúng ta có thể làm như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ifstream <span class=\"hljs-title\">fileInput</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>)</span></span>;\n\n<span class=\"hljs-keyword\">if</span> (fileInput.fail())\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Failed to open this file!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n<span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n{\n\t<span class=\"hljs-keyword\">int</span> n;\n\t<span class=\"hljs-keyword\">if</span> (fileInput >> n)\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; n &#x3C;&#x3C; <span class=\"hljs-string\">\" \"</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-2</span>;\n}\n<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\nfileInput.close();\n\nsystem(<span class=\"hljs-string\">\"pause\"</span>);\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</code></pre>\n\n<p>Nhấn F5 để chạy chương trình dưới chế độ Debug, chúng ta sẽ thấy chương trình dừng lại khi đọc xong giá trị 5 và trả về giá trị -2 cho hệ điều hành. Mình đã sử dụng if statement để kiểm tra xem extraction operator có được thực hiện đúng hay không.</p>\n\n<p>Nếu chúng ta vẫn muốn đọc toàn bộ dữ liệu trong file và in ra màn hình, chúng ta có thể đọc từng kí tự trong file vào biến kiểu char, thay vì kiểu số nguyên:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n{\n\t<span class=\"hljs-keyword\">char</span> c;\n\t<span class=\"hljs-keyword\">if</span>(fileInput >> c)\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; c &#x3C;&#x3C; <span class=\"hljs-string\">\" \"</span>;\n}\n<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<p>Tiếp theo, chúng ta cùng thử đọc từng dòng dữ liệu trong file vào các đối tượng std::string và in chúng ta màn hình. Mình thay đổi nội dung file <code>my_document.txt</code> thành như sau:</p>\n\n<p></p><pre><code class=\"hljs language-vim\">This <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">1</span>\nThis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">2</span>\nThis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">3</span>\nThis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">4</span>\nThis <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">line</span> <span class=\"hljs-number\">5</span></code></pre>\n\n<p>Dưới đây là một cách xử lý để đọc từng dòng dữ liệu và in ra màn hình:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n{\n\t<span class=\"hljs-keyword\">char</span> temp[<span class=\"hljs-number\">255</span>];\n\tfileInput.getline(temp, <span class=\"hljs-number\">255</span>);\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> line = temp;\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; line &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n\n<p>Mình đã sử dụng phương thức getline có sẵn trong class ifstream để đọc dữ liệu từ file và đưa vào một C-style string có kích thước cố định cho trước, sau đó dùng C-style string đó đưa vào đối tượng của std::string để giảm kích thước bộ nhớ dư thừa.</p>\n\n<p>Nếu sử dụng extraction operator (>>) để đọc dữ liệu và std::string trực tiếp, chúng ta sẽ gặp phải trường hợp kí tự khoảng trắng không đọc được như khi sử dụng đối tượng std::cin.</p>\n\n<p>Ngoài một số cách đọc dữ liệu từ file thông qua đối tượng của class ifstream mà mình nói trên, chúng ta còn rất nhiều cách khác, với rất nhiều phương thức khác mà class ifstream đã hổ trợ. Việc chọn cách nào để đọc dữ liệu còn phụ thuộc vào cấu trúc dữ liệu được tổ chức bên trong file như thế nào.</p>\n\n<p>Các bạn có thể tìm hiểu thêm về thư viện ifstream tại đường dẫn sau:</p>\n\n<p><a href=\"http://www.cplusplus.com/reference/fstream/ifstream/\" class=\"onebox\" target=\"_blank\">http://www.cplusplus.com/reference/fstream/ifstream/</a></p>\n\n<h3>File input modes</h3>\n\n<p>Cũng tương tự như thao tác mở liên kết đến file ở trong ngôn ngữ C, file input stream trong C++ cũng cho phép chúng ta chọn kiểu để mở file. Dưới đây là một số mode có thể dùng được cho file input stream:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-cpp/1.png?raw=true\" width=\"527\" height=\"142\"></p>\n\n<p>Nếu chúng ta tạo liên kết đến file thông qua đối tượng của class ifstream, mode <code>std::ios::in</code> được sử dụng mặc định. Tuy nhiên, khi sử dụng file input/output stream với class fstream thì chúng ta cần chọn mode cho đối tượng, ví dụ:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">fstream <span class=\"hljs-title\">fileInput</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>, <span class=\"hljs-built_in\">std</span>::ios::in)</span></span>;\n\n<span class=\"hljs-keyword\">if</span> (fileInput.fail())\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Failed to open this file!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\n<span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n{\n\t<span class=\"hljs-keyword\">char</span> temp[<span class=\"hljs-number\">255</span>];\n\tfileInput.getline(temp, <span class=\"hljs-number\">255</span>);\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> line = temp;\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; line &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}\n<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\nfileInput.close();</code></pre>\n\n<p>Bên cạnh đó, chúng ta cũng có thể mở file dưới dạng nhị phân:</p>\n\n<p></p><pre><code class=\"hljs language-groovy\"><span class=\"hljs-string\">std:</span>:fstream fileInput(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>, <span class=\"hljs-string\">std:</span>:<span class=\"hljs-string\">ios:</span>:<span class=\"hljs-keyword\">in</span> | <span class=\"hljs-string\">std:</span>:<span class=\"hljs-string\">ios:</span>:binary);</code></pre>\n\n<p>Đọc dữ liệu dưới dạng nhị phân có thể được áp dụng cho cả file nhị phân hoặc file văn bản.</p>\n\n<h3>Sử dụng một input stream cho nhiều file</h3>\n\n<p>Cũng như việc chúng ta tạo liên kết tới file với một đường dẫn cụ thể và sử dụng phương thức close để đóng stream, chúng ta cũng có thể sử dụng phương thức open để tạo một stream mới đến một đường dẫn khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"hljs language-less\"><span class=\"hljs-attribute\">std</span>::ifstream fileInput(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>);\n<span class=\"hljs-comment\">//..............</span>\nfileInput<span class=\"hljs-selector-class\">.close</span>();\n\nfileInput<span class=\"hljs-selector-class\">.open</span>(<span class=\"hljs-string\">\"\"</span><span class=\"hljs-attribute\">C</span>:/Users/ADMIN/Desktop/my_document2.txt<span class=\"hljs-string\">\"\"</span>);\n<span class=\"hljs-comment\">//..............</span>\nfileInput<span class=\"hljs-selector-class\">.close</span>();</code></pre>\n\n<p>Phương thức open hoạt động tương tự phương thức khởi tạo của class ifstream, nên chúng ta có thể tạo kết nối nhiều lần. Tuy nhiên, chúng ta chỉ có thể kết nối đến một file duy nhất tại một thời điểm. Và trước khi tạo liên kết đến file khác, chúng ta nên đóng liên kết trước đó.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Thao tác đọc dữ liệu từ file thông qua các file input stream mà C++ cung cấp khá đơn giản so với sử dụng thư viện cstdio trong ngôn ngữ C. Các bạn có thể tham khảo thêm nhiều cách đọc dữ liệu từ file khác qua topic dưới đây:</p>\n\n<aside class=\"quote\" data-post=\"1\" data-topic=\"3391\">\n  <div class=\"title\">\n    <div class=\"quote-controls\"></div>\n    <img alt=\"\" width=\"20\" height=\"20\" src=\"/letter_avatar_proxy/v2/letter/n/96bed5/40.png\" class=\"avatar\">\n    <a href=\"https://daynhauhoc.com/t/tong-hop-doc-file-bang-c-va-c/3391\">Tổng hợp: đọc file bằng C++ và C</a> <a class=\"badge-wrapper bullet\" href=\"/c/share/writes\"><span class=\"badge-category-parent-bg\" style=\"background-color: #AB9364;\"></span><span class=\"badge-category-bg\" style=\"background-color: #0E76BD;\"></span><span style=\"color: #FFFFFF;\" data-drop-close=\"true\" class=\"badge-category clear-badge\" title=\"Dành cho các bài viết hướng dẫn, chia sẻ\">writes</span></a>\n  </div>\n  <blockquote>Mình tìm thấy nhiều cách đọc file bằng C++ vào std::string khác nhau, post tạm 1 cách đã, có thời gian post dần thêm. \n\nCách đầu tiên là đọc file bằng istreambuf_iterator. Ví dụ cụ thể: \n\nFile text.txt lưu với nội dung như sau: \n\nnguyen chiem minh vu 01216558383 (EOF) \n\nVà đọc file như vầy: \n\n #include &#x3C;iostream>\n#include &#x3C;fstream>\n\nusing namespace std;\n\nint main()  {\n\n    ifstream textfile(\"text.txt\");\n    string s1; //store a line of file\n\n    for(istreambuf_iterator&#x3C;char,char_traits&#x3C;char> > i…\n    <div class=\"topic-info\">\n    </div>\n  </blockquote>\n</aside>\n\n\n<p>Đối với các trường hợp cần lưu trữ dữ liệu trong file với nội dung lớn và có cấu trúc, chúng ta thường sử dụng các định dạng file như *.xml hoặc *.json... Ngày nay đã có nhiều thư viện hổ trợ cho việc đọc dữ liệu cho các định dạng file này, các bạn có thể tham khảo thêm tại đây:</p>\n\n<p><a href=\"http://rapidxml.sourceforge.net/index.htm\" class=\"onebox\" target=\"_blank\">http://rapidxml.sourceforge.net/index.htm</a></p>\n\n<p>Một điểm hạn chế mà file input stream trong C++ gặp phải là chúng không hỗ trợ đọc toàn bộ nội dung vào một biến kiểu struct như hàm fread trong ngôn ngữ C. Do đó, để làm được điều này, chúng ta cần định nghĩa lại toán tử (>>) bên trong struct hoặc class có liên quan, phần này sẽ được trình bày trong các bài học sau.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n</body></html>","__filename":"generated/35567.md","__url":"/10/2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-c/","__resourceUrl":"/10/2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-c/index.html","__dataUrl":"/10/2-mot-so-thao-tac-doc-du-lieu-tu-file-trong-c/index.html.9b18f400c922148fc3f9493ae1ee3652.json"}