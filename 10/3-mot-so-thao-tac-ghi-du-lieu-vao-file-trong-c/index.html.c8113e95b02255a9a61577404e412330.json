{"head":{"title":"10.3 Một số thao tác ghi dữ liệu vào File trong C++","route":"10/3-mot-so-thao-tac-ghi-du-lieu-vao-file-trong-c","id":35622,"description":"void writeDataToFile(std::string file) { } void readDataFromFile(std::string file) { } int main() { \tstd::string filePath =…"},"body":"<html><head></head><body><h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Trong bài học này, chúng ta cùng thực hành một số thao tác ghi dữ liệu vào file thông qua file output stream mà ngôn ngữ C++ đã cung cấp.</p>\n\n<h3>File output</h3>\n\n<p>Ngôn ngữ C++ đã cung cấp cho chúng ta class ofstream để tạo lập kết nối đến file và đưa dữ liệu từ chương trình ra file, class ofstream cũng được định nghĩa bên trong thư viện fstream nên chúng ta cần include thư viện fstream vào file chương trình trước khi sử dụng:</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;fstream></span></span></code></pre>\n\n<p>Khác với thao tác đọc dữ liệu từ file, chúng ta có thể tạo ngay một đối tượng từ class ofstream mà không cần phải tạo sẵn một file mẫu, vì file cần mở sẽ được tạo mới khi trong thư mục mà đường dẫn trỏ đến không tồn tại.</p>\n\n<p>Mình tạo một chương trình có cấu trúc như sau để làm ví dụ mẫu trong bài học này:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;string></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;fstream></span></span>\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeDataToFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readDataFromFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> filePath = <span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>;\n\n\twriteDataToFile(filePath);\n\treadDataFromFile(filePath);\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Ở trong hàm readDataFromFile, mình thực hiện đọc toàn bộ nội dung file và in ra màn hình để xem kết quả của quá trình ghi dữ liệu ra file như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">readDataFromFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ifstream <span class=\"hljs-title\">fileInput</span><span class=\"hljs-params\">(file)</span></span>;\n\t\n\t<span class=\"hljs-keyword\">if</span> (fileInput.fail())\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Cannot open file at \"</span> &#x3C;&#x3C; file &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\n\t<span class=\"hljs-keyword\">while</span> (!fileInput.eof())\n\t{\n\t\t<span class=\"hljs-keyword\">char</span> line[<span class=\"hljs-number\">255</span>];\n\t\tfileInput.getline(line, <span class=\"hljs-number\">255</span>);\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; line &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t}\n}</code></pre>\n\n<p>Bây giờ chúng ta chỉ còn quan tâm đến hàm writeDataToFile.</p>\n\n<p>Thực ra thao tác ghi dữ liệu vào file đơn giản hơn việc đọc dữ liệu từ file rất nhiều. Khi đọc dữ liệu từ file vào chương trình, chúng ta cần phải quan tâm dữ liệu trong file được tổ chức như thế nào, với định dạng như thế thì nên chọn kiểu dữ liệu nào để đọc vào cho phù hợp... rất nhiều thứ phải quan tâm. Đối với thao tác ghi dữ liệu vào file, tất cả dữ liệu sau khi ghi vào file đều trở thành kí tự văn bản, và file output stream trong C++ đã overload insertion operator (&#x3C;&#x3C;) cho tất cả các kiểu dữ liệu cơ bản trong C++, do đó chúng ta có thể lưu ngay các giá trị số nguyên, số thực, kí tự hoặc std::string ... xuống file ngay lập tức thông qua insertion operator (&#x3C;&#x3C;).</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeDataToFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">fileOutput</span><span class=\"hljs-params\">(file)</span></span>;\n\n\t<span class=\"hljs-keyword\">if</span> (fileOutput.fail())\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Cannot open file at \"</span> &#x3C;&#x3C; file &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"Hello world!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n\n<p>Đây chính xác là một chương trình Hello world mà các bạn đã từng học. Điều khác biệt là thay vì dữ liệu ghi vào stdout và đưa ra màn hình, dòng \"Hello world!\" đã được ghi vào file <code>my_document.txt</code>, các bạn có thể mở file <code>my_document.txt</code> bằng notepad để xem nội dung được ghi vào file.</p>\n\n<p>Chúng ta có thể ghi bao nhiêu dòng dữ liệu tùy ý, phụ thuộc vào dung lượng của thiết bị lưu trữ mà các bạn đang sử dụng.</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeDataToFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">fileOutput</span><span class=\"hljs-params\">(file)</span></span>;\n\n\t<span class=\"hljs-keyword\">if</span> (fileOutput.fail())\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Cannot open file at \"</span> &#x3C;&#x3C; file &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"Hello world!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"I'm Le Tran Dat\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"I worked at Singapore over 5 years\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">10</span>; i++)\n\t{\n\t\tfileOutput &#x3C;&#x3C; i &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t}\n}</code></pre>\n\n<p>Cách sử dụng hoàn toàn tương tự như khi các bạn sử dụng đối tượng std::cout. Tuy nhiên, đối với một số struct hoặc class tự định nghĩa, để sử dụng insertion operator (&#x3C;&#x3C;) cho việc ghi thông tin các trường dữ liệu vào file, chúng ta cần định nghĩa lại toán tử (&#x3C;&#x3C;) bên trong struct hay class đó, chúng ta sẽ cùng tìm hiểu vấn đề này trong các bài học sau.</p>\n\n<h3>File output modes</h3>\n\n<p>Với thao tác mở file để ghi dữ liệu, chúng ta cũng có một số mode khác nhau sử dụng cho từng trường hợp cụ thể.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/10-files-streams/10-3-mot-so-thao-tac-ghi-du-lieu-vao-file-trong-cpp/0.png?raw=true\" width=\"526\" height=\"238\"></p>\n\n<p>Mode std::ios::out được sử dụng mặc định nếu các bạn khởi tạo cho đối tượng có kiểu std::ofstream, nếu các bạn sử dụng kiểu fstream (input/output stream) thì cần cung cấp thêm thông tin để compiler biết là các bạn mở file với mục đích gì:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">fstream <span class=\"hljs-title\">file</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>, <span class=\"hljs-built_in\">std</span>::ios::out)</span></span>;</code></pre>\n\n<p>Nếu các bạn muốn ghi dữ liệu vào file dưới dạng mã hóa nhị phân, các bạn có thể thêm vào mode std::ios::binary như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">fstream <span class=\"hljs-title\">file</span><span class=\"hljs-params\">(<span class=\"hljs-string\">\"C:/Users/ADMIN/Desktop/my_document.txt\"</span>, <span class=\"hljs-built_in\">std</span>::ios::out | <span class=\"hljs-built_in\">std</span>::ios::binary)</span></span>;</code></pre>\n\n<p>Nếu các bạn mở file dưới mode std::ios::app, dữ liệu trong file sẽ được giữ nguyên và internal file position indicator sẽ chuyển về cuối file để ghi nối dữ liệu vào file. Các bạn có thể tự thử nghiệm với các mode trong bảng trên để thấy sự khác biệt.</p>\n\n<h3>Sử dụng một output stream cho nhiều file</h3>\n\n<p>Sau khi sử dụng phương thức close để đóng stream lại, chúng ta có thể mở một liên kết mới đến một đường dẫn khác để tiếp tục ghi dữ liệu bằng phương thức open. Ví dụ:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">writeDataToFile</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> file)</span>\n</span>{\n\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-function\">ofstream <span class=\"hljs-title\">fileOutput</span><span class=\"hljs-params\">(file)</span></span>;\n\n\t<span class=\"hljs-keyword\">if</span> (fileOutput.fail())\n\t{\n\t\t<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Cannot open file at \"</span> &#x3C;&#x3C; file &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"Hello world!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"I'm Le Tran Dat\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"I worked at Singapore over 5 years\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n\t\n\tfileOutput.close();\n\n\tfileOutput.open(file, <span class=\"hljs-built_in\">std</span>::ios::app);\n\n\tfileOutput &#x3C;&#x3C; <span class=\"hljs-string\">\"Goodbye everyone!\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n}</code></pre>\n\n<p>Phương thức open hoạt động tương tự constructor của class ofstream, nên chúng ta có thể tạo nhiều kết nối đến nhiều file khác nhau. Tuy nhiên, chúng ta chỉ có thể kết nối đến một file duy nhất tại một thời điểm.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n</body></html>","__filename":"generated/35622.md","__url":"/10/3-mot-so-thao-tac-ghi-du-lieu-vao-file-trong-c/","__resourceUrl":"/10/3-mot-so-thao-tac-ghi-du-lieu-vao-file-trong-c/index.html","__dataUrl":"/10/3-mot-so-thao-tac-ghi-du-lieu-vao-file-trong-c/index.html.c8113e95b02255a9a61577404e412330.json"}