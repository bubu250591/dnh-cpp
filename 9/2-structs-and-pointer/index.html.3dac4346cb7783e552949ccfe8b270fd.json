{"head":{"title":"9.2 Structs and pointer","route":"9/2-structs-and-pointer","id":33521,"description":"int main() { \tBankAccount myAccount = { 123456789, 50 }; // $50 \tBankAccount \\*pAccount = &myAccount;  } int main() { \tBankAccount…"},"body":"<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n<p>Chúng ta cùng tiếp tục tìm hiểu về kiểu dữ liệu tự định nghĩa thông qua từ khóa struct mà ngôn ngữ C++ hỗ trợ. Trong bài học này, mình sẽ trình bày về kiểu struct khi sử dụng kết hợp với con trỏ.</p>\n<p>Như các bạn đã học trong bài trước, sau khi chúng ta tự định nghĩa một struct, compiler sẽ coi tên gọi của struct đó như là một kiểu dữ liệu. Điều này có nghĩa khi chúng ta sử dụng các kiểu dữ liệu built-in để tạo ra các biến, tham chiếu hoặc con trỏ thì chúng ta cũng có thể sử dụng kiểu struct để tạo ra biến struct, tham chiếu struct và con trỏ kiểu struct (<strong>Pointer to struct</strong>).</p>\n<h3>Pointer to struct</h3>\n<p>Đầu tiên, chúng ta cùng định nghĩa một kiểu dữ liệu theo ý muốn. Dưới đây, mình định nghĩa một kiểu dữ liệu có tên là Letter:</p>\n<p></p><pre><code class=\"lang-auto\">struct Letter\n{\n\t\n};</code></pre>\n<p>Trong struct Letter mình chưa định nghĩa các trường dữ liệu, lúc này Letter là một kiểu dữ liệu rỗng. Nhưng ngôn ngữ C++ vẫn đặt kích thước của kiểu Letter này là 1 bytes.</p>\n<p><img></p>\n<p>Mục đích là để đảm bảo địa chỉ của 2 biến được tạo ra sẽ có địa chỉ khác nhau. Tuy nhiên, định nghĩa ra một struct rỗng không có tác dụng gì trong chương trình, chúng ta cùng thêm vào một số trường dữ liệu cho Letter:</p>\n<p></p><pre><code class=\"lang-auto\">struct Letter\n{\n\tchar from[50];\n\tchar to[50];\n};</code></pre>\n<p>Một lá thư sẽ có thông tin về người gửi và người nhận, nên mình thêm vào 2 trường dữ liệu kiểu C-style string dùng để lưu thông tin mà người dùng điền vào một lá thư.</p>\n<p>Mình vừa định nghĩa xong một kiểu dữ liệu mới để phục vụ cho chương trình của mình. Bây giờ chúng ta cùng tạo ra một đơn vị từ kiểu dữ liệu trên (mình thao tác luôn trong hàm main):</p>\n<p></p><pre><code class=\"lang-auto\">int main()\n{\n\tLetter myLetter;\n\t\n\treturn 0;\n}</code></pre>\n<p>Với mỗi biến kiểu Letter được tạo ra, chương trình sẽ yêu cầu cấp phát 100 bytes (50 bytes cho trường dữ liệu <code>from</code> và 50 bytes cho trường dữ liệu <code>to</code>), và chắc chắn rồi, biến đó sẽ có một địa chỉ xác định được thông qua toán tử <code>address-of</code>.</p>\n<p></p><pre><code class=\"lang-auto\">int main()\n{\n\tLetter myLetter;\n\tstd::cout &lt;&lt; \"Address of myLetter: \" &lt;&lt; &amp;myLetter &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; \"Address of from field: \" &lt;&lt; &amp;myLetter.from &lt;&lt; std::endl;\n\t\n\treturn 0;\n}</code></pre>\n<p>Ở đoạn chương trình trên, mình in ra địa chỉ của biến myLetter, đồng thời in ra luôn địa chỉ của trường dữ liệu from của biến myLetter. Kết quả cho thấy 2 địa chỉ được in ra có giá trị hoàn toàn giống nhau. Điều này có nghĩa địa chỉ của trường dữ liệu đầu tiên trong một biến struct cũng là địa chỉ của biến struct đó. Các bạn có thể liên hệ struct với mảng một chiều trong C/C++, khi mảng một chiều mà tập hợp các phần tử có cùng kiểu dữ liệu được bao bọc bởi tên mảng một chiều và địa chỉ của mảng một chiều cũng là địa chỉ của phần tử đầu tiên trong mảng, một biến struct sẽ bao gồm tập hợp các trường dữ liệu mà địa chỉ của biến struct sẽ là địa chỉ của trường dữ liệu được khai báo đầu tiên trong struct.</p>\n<p>Và như các bạn cũng đã học về con trỏ (Pointer), kiểu dữ liệu của con trỏ dùng để xác định kiểu dữ liệu của vùng nhớ mà con trỏ có thể trỏ đến. Vậy thì để cho con trỏ trỏ đến một địa chỉ của biến kiểu struct, chúng ta cần có một con trỏ cùng kiểu struct với biến được trỏ đến.</p>\n<p></p><pre><code class=\"lang-auto\">Letter myLetter;\nLetter *pLetter = &amp;myLetter;</code></pre>\n<p>Dù kích thước của kiểu dữ liệu struct có lớn bao nhiêu, biến con trỏ cũng chỉ có kích thước 4 bytes trên hệ điều hành 32 bits và kích thước 8 bytes trên hệ điều hành 64 bits (đủ để trỏ đến toàn bộ địa chỉ trên bộ nhớ ảo).</p>\n<h5>Access struct members</h5>\n<p>Trong bài học trước, các bạn đã biết cách truy cập đến các trường dữ liệu của các biến struct thông qua <strong>member selection operator</strong> (dấu chấm). Nhưng khi sử dụng Pointer to struct, <strong>member selection operator</strong> được sử dụng dưới cách viết khác. Để phân biệt sự khác nhau khi sử dụng <strong>member selection operator</strong> cho biến struct thông thường và một Pointer to struct, các bạn cùng xem ví dụ bên dưới:</p>\n<p></p><pre><code class=\"lang-auto\">struct BankAccount\n{\n\t__int64 accountNumber;\n\t__int64 balance;\n};\n<p>int main()\n{\nBankAccount myAccount = { 123456789, 50 }; // $50\nBankAccount *pAccount = &#x26;myAccount; </p>\n<pre><code>std::cout &#x26;lt;&#x26;lt; \"My bank account number: \" &#x26;lt;&#x26;lt; myAccount.accountNumber &#x26;lt;&#x26;lt; std::endl;\nstd::cout &#x26;lt;&#x26;lt; \"My bank account number: \" &#x26;lt;&#x26;lt; pAccount-&#x26;gt;accountNumber &#x26;lt;&#x26;lt; std::endl;\n\nstd::cout &#x26;lt;&#x26;lt; \"My balance: \" &#x26;lt;&#x26;lt; myAccount.balance &#x26;lt;&#x26;lt; std::endl;\nstd::cout &#x26;lt;&#x26;lt; \"My balance: \" &#x26;lt;&#x26;lt; pAccount-&#x26;gt;balance &#x26;lt;&#x26;lt; std::endl;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Như các bạn thấy, kết quả của việc truy xuất giá trị thông qua tên biến struct và con trỏ kiểu struct là hoàn toàn giống nhau, và chúng đều dùng toán tử member selection. Tuy nhiên, để phân biệt biến con trỏ và biến thông thường, biến con trỏ kiểu struct sẽ truy cập đến các trường dữ liệu trong vùng nhớ bằng toán tử (-&gt;). Hai toán tử này cùng tên, chỉ khác nhau về cách biểu diễn.</p>\n<h5>Một số nhầm lần khi sử dụng struct và Pointer to struct</h5>\n<p>Khi mới tìm hiểu về Pointer to struct, các bạn có thể bị nhầm lẫn giữa cách khởi tạo hoặc gán giá trị cho biến struct thông thường và biến con trỏ struct. </p>\n<p></p><pre><code class=\"lang-auto\">struct BankAccount\n{\n\t__int64 accountNumber;\n\t__int64 balance;\n};\n<p>int main()\n{\nBankAccount myAccount = { 12345, 50 };</p>\n<pre><code>BankAccount *pAccount = { 12345, 50 }; //error\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Đoạn chương trình trên báo lỗi vì biến con trỏ chỉ nhận giá trị là địa chỉ. Tuy nhiên, lỗi này có thể thấy dễ dàng vì Visual studio đưa ra thông báo lỗi ngay. Dưới đây là cách gán giá trị đúng khi mình sử dụng toán tử dereference cho biến con trỏ struct để thay đổi giá trị bên trong vùng nhớ:</p>\n<p></p><pre><code class=\"lang-auto\">struct BankAccount\n{\n\t__int64 accountNumber;\n\t__int64 balance;\n};\n<p>int main()\n{\nBankAccount myAccount = { 0, 0 };</p>\n<pre><code>BankAccount *pAccount = &#x26;amp;myAccount;\n\n*pAccount = { 12345, 50 };\n\nstd::cout &#x26;lt;&#x26;lt; pAccount-&#x26;gt;accountNumber &#x26;lt;&#x26;lt; \" \" &#x26;lt;&#x26;lt; pAccount-&#x26;gt;balance &#x26;lt;&#x26;lt; std::endl;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Hoặc một cách khác là chúng ta cấp phát vùng nhớ cho biến con trỏ struct, và dereference đến đó để gán giá trị cho nó:</p>\n<p></p><pre><code class=\"lang-auto\">BankAccount *pAccount = new BankAccount;\n*pAccount = { 12345, 50 };</code></pre>\n<p>Và các bạn lưu ý khi sử dụng biến kiểu con trỏ struct thì chúng ta sử dụng toán tử member selection này (-&gt;). Có một số bạn nhầm lẫn giữa biến con trỏ struct và trường dữ liệu kiểu con trỏ. Ví dụ:</p>\n<p></p><pre><code class=\"lang-auto\">struct BankAccount\n{\n\tchar *name;\n\t__int64 accountNumber;\n\t__int64 balance;\n};</code></pre>\n<p>Mình thêm vào struct một trường dữ liệu kiểu con trỏ char nhưng việc truy xuất đến trường dữ liệu này không có gì thay đổi khi mình sử dụng biến struct thông thường.</p>\n<p></p><pre><code class=\"lang-auto\">BankAccount myAccount = { \"Le Tran Dat\", 12345, 50 };\n<p>std::cout &#x3C;&#x3C; myAccount.name &#x3C;&#x3C; std::endl;\nstd::cout &#x3C;&#x3C; myAccount.accountNumber &#x3C;&#x3C; std::endl;\nstd::cout &#x3C;&#x3C; myAccount.balance &#x3C;&#x3C; std::endl;</code></pre></p>\n<p>Sẽ phức tạp hơn một chút khi các bạn sử dụng các nested struct. Ví dụ:</p>\n<p></p><pre><code class=\"lang-auto\">struct BankAccount\n{\n\tDate registrationDate;\n\t__int64 accountNumber;\n\t__int64 balance;\n};\n<p>int main()\n{\nBankAccount <em>pAccount = new BankAccount;\n</em>pAccount = { {2, 5, 2016}, 12345, 50 };</p>\n<pre><code>std::cout &#x26;lt;&#x26;lt; pAccount-&#x26;gt;registrationDate.year &#x26;lt;&#x26;lt; std::endl;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Như các bạn thấy, từ biến con trỏ pAccount truy xuất vào các trường dữ liệu bên trong thì mình dùng toán tử (-&gt;), nhưng trường dữ liệu Date trong struct BankAccount là biến thông thường, nên mình dùng dấu chấm để truy xuất dữ liệu ngày đăng kí.</p>\n<p>Trên đây là một số vấn đề thường gặp khi sử dụng con trỏ và kiểu struct. Tuy nhiên, những lỗi này không phải là lỗi nghiêm trọng do compiler sẽ thông báo chính xác vị trí lỗi cho lập trình viên xử lý.</p>\n<hr>\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n","__filename":"generated/33521.md","__url":"/9/2-structs-and-pointer/","__resourceUrl":"/9/2-structs-and-pointer/index.html","__dataUrl":"/9/2-structs-and-pointer/index.html.3dac4346cb7783e552949ccfe8b270fd.json"}