{"head":{"title":"9.0 Kiểu liệt kê (enum)","route":"9/0-kieu-liet-ke-enum","description":"enum Color { \tRED, \tGREEN, \tBLUE, \tWHITE }; enum Animal { \tCAT, \tDOG, \tHORSE, \tMONKEY, \tCHICKEN }; } int iValue = LETTER_A; cout &lt;&lt…"},"body":"\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Trong bài học ngày hôm nay, chúng ta sẽ cùng tìm hiểu về từ khóa <strong>enum</strong>, cách sử dụng, và quan trọng nhất là tại sao chúng ta sử dụng <strong>enum</strong> trong ngôn ngữ C++.</p>\n\n<h3>Enumarated types</h3>\n\n<p>Kiểu liệt kê là một trong số các kiểu dữ liệu do người lập trình tự định nghĩa. <strong>Tại sao chúng ta cần định nghĩa kiểu dữ liệu mới?</strong> Trong quá trình lập trình, những kiểu dữ liệu được định nghĩa sẵn trong ngôn ngữ lập trình có thể không mang lại ý nghĩa phù hợp. Ví dụ mình muốn sử dụng các giá trị từ 1 đến 7 để đại diện cho 7 ngày trong tuần (1 đại diện cho ngày chủ nhật, 7 đại diện cho thứ 7), như vậy mình cần ít nhất là 7 biến để lưu trữ các giá trị này:</p>\n\n<p></p><pre><code class=\"lang-auto\">const int SUNDAY = 1;\nconst int MONDAY = 2;\nconst int TUESDAY = 3;\nconst int WEDNESDAY = 4;\nconst int THURSDAY = 5;\nconst int FRIDAY = 6;\nconst int SATURDAY = 7;</code></pre>\n\n<p>Mình không sử dụng mảng một chiều trong trường hợp này vì:</p>\n\n<p></p><pre><code class=\"lang-auto\">int DAYS_OF_WEEK[7] = { 1, 2, 3, 4, 5, 6, 7 };</code></pre>\n\n<p>Những con số cụ thể không mang lại ý nghĩa cho người đọc mã nguồn chương trình. Việc sử dụng tên của các biến hằng số sẽ giúp chương trình chúng ta rõ ràng hơn.</p>\n\n<p>Nhưng việc khai báo các hằng số như trên vẫn có một số nhược điểm:</p>\n\n<ul>\n<li><p>Có thể khai báo thiếu sót một vài giá trị khi danh sách các hằng số là quá nhiều.</p></li>\n<li><p>Có thể khai báo không theo một quy luật (hay thứ tự) nhất định khiến chúng ta khó tìm trong chương trình. Ví dụ:</p></li>\n</ul>\n\n<p></p><pre><code class=\"lang-auto\">const int WEDNESDAY = 4;\nconst int SUNDAY = 1;\nconst int TUESDAY = 3;\nconst int FRIDAY = 6;\nconst int MONDAY = 2;\nconst int SATURDAY = 7;\nconst int THURSDAY = 5;</code></pre>\n\n<ul><li>Có một số hằng số không liên quan đến nhau nhưng được khai báo gần nhau khiến chúng ta dễ rối. Ví dụ:</li></ul>\n\n<p></p><pre><code class=\"lang-auto\">const float PI = 3.14;\nconst float ACCELERATION_OF_GRAVITY = 9.8;\nconst int MAX_SIZE_OF_ARRAY = 255;\n//..............</code></pre>\n\n<p>Như vậy, muốn khắc phục một số nhược điểm trên, chúng ta cần tìm cách để tập hợp các hằng số có ý nghĩa tương đương nhau thành những nhóm hằng số riêng biệt. Kiểu liệt kê sẽ giúp chúng ta thực hiện điều này.</p>\n\n<h5>Công dụng của kiểu liệt kê</h5>\n\n<p>Như mình đã trình bày ở trên, kiểu liệt kê có tác dụng giúp thay thế các con số (giá trị cụ thể) bằng những cái tên có ý nghĩa, và nó còn giúp chúng ta tập hợp các giá trị có ý nghĩa liên quan với nhau thành từng nhóm. Mỗi nhóm hằng số này khi đưa vào kiểu liệt kê sẽ trở thành một kiểu dữ liệu (người ta thường gọi enumeration là một kiểu dữ liệu trong C++ vì nó có cách khai báo tương tự như khai báo biến, chứ mình thấy nó giống một group của các giá trị hơn).</p>\n\n<h5>Cú pháp khai báo kiểu liệt kê</h5>\n\n<p>Để định nghĩa một kiểu liệt kê mới, chúng ta sử dụng từ khóa <strong>enum</strong> theo cấu trúc sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum &lt;name_of_enumeration&gt;\n{\n\t//list all of values inside this block\n\t//each enumerator is separated by a comma, not a semicolon\n};</code></pre>\n\n<p>Việc khai báo kiểu dữ liệu mới (như kiểu <strong>enum</strong>) không yêu cầu chương trình cấp phát bộ nhớ, lúc nào chúng ta sử dụng kiểu <strong>enum</strong> vừa đã được định nghĩa để tạo ra biến kiểu <strong>enum</strong> thì chương trình mới cấp phát bộ nhớ.</p>\n\n<p>Mỗi giá trị trong block của kiểu enum cách nhau bởi một dấu phẩy (đối với giá trị cuối cùng thì không cần sử dụng dấu phẩy).</p>\n\n<h5>Khai báo kiểu liệt kê</h5>\n\n<p>Mình đã nói về lý thuyết của kiểu <strong>enum</strong> (kiểu liệt kê) xong, chắc bây giờ các bạn cũng đang tò mò muốn biết cuối cùng thì khai báo và sử dụng nó như thế nào. Dưới đây là một ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};</code></pre>\n\n<p>Như các bạn thấy, sau khi định nghĩa một kiểu enum xong thì kết thúc nó là một dấu chấm phẩy, vì đây cũng là một câu lệnh. Về mặt cơ bản, chúng ta phải đặt toàn bộ câu lệnh trên cùng một dòng:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek { SUNDAY,\tMONDAY,\tTUESDAY, WEDNESDAY,\tTHURSDAY, FRIDAY, SATURDAY };</code></pre>\n\n<p>Nhưng <strong>compiler</strong> vẫn hiểu được một câu lệnh nằm trên nhiều dòng nên mình chọn cách viết ở trên (tách thành nhiều dòng) để phần định nghĩa của mình rõ ràng hơn.</p>\n\n<p>Như vậy là chúng ta đã có một kiểu dữ liệu mới cho chương trình. Các bạn có thể gọi <strong>DaysOfWeek</strong> là một kiểu dữ liệu (kiểu enum hay kiểu liệt kê) hoặc có thể gọi là tên của một nhóm các giá trị cũng như chúng ta hay đi chơi với bạn bè theo nhóm nhỏ rồi đặt tên cho nhóm vậy.</p>\n\n<p>Trong một chương trình, chúng ta có thể có nhiều khai báo kiểu <strong>enum</strong> khác nhau. Ví dụ mình khai báo thêm vài kiểu <strong>enum</strong> khác:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};\n\nenum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE,\n\tWHITE\n};\n\nenum Animal\n{\n\tCAT,\n\tDOG,\n\tHORSE,\n\tMONKEY,\n\tCHICKEN\n};</code></pre>\n\n<p>Như vậy là chương trình của chúng ta có 3 kiểu dữ liệu mới (3 nhóm giá trị mới), mỗi kiểu enum này hoàn toàn không liên quan gì đến nhau, chỉ có các giá trị bên trong mỗi kiểu enum mới có liên quan đến nhau về mặt ý nghĩa.</p>\n\n<p><strong>Nhưng có thấy giá trị nào đâu?</strong></p>\n\n<p>Khi nhìn vào bên trong khối lệnh định nghĩa của kiểu enum có tên <strong>Color</strong>, chúng ta chỉ thấy những những danh từ như RED, GREEN, BLUE... mà không hề thấy những con số. Thực chất, những danh từ này đã được gắn cho một giá trị cụ thể, và những cái danh từ mà chúng ta nhìn thấy sẽ đại diện cho những giá trị đó. Sử dụng những danh từ để thay thế cho những con số sẽ giúp người đọc chương trình dễ hiểu hơn (chứ không giúp chương trình chạy nhanh hơn).</p>\n\n<h5>Enumerator values</h5>\n\n<p>Bây giờ mình sẽ làm một chương trình mẫu để show cho các bạn xem những giá trị được đặt trong block của một kiểu enum mình tự định nghĩa:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n\n\tenum Alphabet\n\t{\n\t\tLETTER_A,\n\t\tLETTER_B,\n\t\tLETTER_C,\n\t\tLETTER_D,\n\t\tLETTER_E\n\t};\n\n\tcout &lt;&lt; LETTER_A &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_B &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_C &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_D &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_E &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Khi mình chạy chương trình, kết quả xuất hiện trên console là:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/0.png?raw=true\" width=\"579\" height=\"384\"></p>\n\n<p>Như vậy, không cần chúng ta trực tiếp gán giá trị cho các tên hằng số, <strong>compiler</strong> đã tự động khởi tạo giá trị cho chúng, bắt đầu với giá trị 0 và tăng dần. Các bạn cũng đã thấy rằng, sau khi định nghĩa xong 1 kiểu enum thì chúng ta có thể sử dụng các tên gọi bên trong enum như những hằng số. Vì những giá trị hằng số này là giá trị kiểu integer (<strong>int</strong>), nên chúng ta cũng có thể gán chúng cho những biến kiểu <strong>int</strong> khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Alphabet\n{\n\tLETTER_A,\n\tLETTER_B,\n\tLETTER_C,\n\tLETTER_D,\n\tLETTER_E\n};\n\nint iValue = LETTER_A;</code></pre>\n\n<p>Bên cạnh việc tự động gán giá trị cho từng phần tử được liệt kê, chúng ta cũng có thể chủ động thay đổi giá trị cho chúng (<strong>nhưng chỉ có thể thay đổi giá trị trong phần khai báo</strong>), một enum sau khi đã định nghĩa xong thì không thể thay đổi những giá trị của danh sách các phần tử nữa.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Direction\n{\n\tUP = 1,   //assigned 1 by programmer\n\tDOWN = 3, //assigned 3 by programmer\n\tLEFT,     //assigned 4 by compiler\n\tRIGHT     //assigned 5 by compiler\n};\n\ncout &lt;&lt; UP &lt;&lt; \" \" &lt;&lt; DOWN &lt;&lt; \" \" &lt;&lt; LEFT &lt;&lt; \" \" &lt;&lt; RIGHT &lt;&lt; endl;</code></pre>\n\n<p>Đoạn chương trình này sẽ in ra:</p>\n\n<p></p><pre><code class=\"lang-auto\">1 3 4 5</code></pre>\n\n<p>Như vậy, <strong>compiler</strong> sẽ tự động gán giá trị cho các phần tử không được khởi tạo giá trị. Ngoại trừ phần tử đầu tiên trong <strong>enum</strong>, những hằng số khác sẽ được gán giá trị bằng phần tử trước nó cộng thêm 1.</p>\n\n<p><strong>Lưu ý: những hằng số trong cùng một enum có thể có cùng giá trị với nhau.</strong></p>\n\n<blockquote>\n<p>Best practice: Don’t assign specific values to your enumerators.</p>\n<p>Rule: Don’t assign the same value to two enumerators in the same enumeration unless there’s a very good reason.</p>\n</blockquote>\n\n<h5>Sử dụng kiểu enum đã định nghĩa như một kiểu dữ liệu thông thường</h5>\n\n<p>Như mình trình bày ở trên, từ khóa enum trong C++ giúp chúng ta định nghĩa một kiểu dữ liệu mới cho chương trình. Tuy nó chỉ là tập hợp danh sách các hằng số có ý nghĩa tương quan với nhau, nhưng bản chất nó vẫn là một kiểu dữ liệu (kiểu liệt kê) nên chúng ta có thể sử dụng chúng để tạo ra các biến. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor;</code></pre>\n\n<p>Bây giờ, chúng ta đã có một biến kiểu <strong>Color</strong>. Biến <strong>backgroundColor</strong> chỉ có tác dụng lưu trữ giá trị của một trong số tất cả các hằng số đã được liệt kê bên trong kiểu <strong>Color</strong>. Việc thực hiện gán các giá trị khác kiểu <strong>Color</strong> sẽ gây ra lỗi về mặt cú pháp.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = 5; //error</code></pre>\n\n<p>Bây giờ mình sẽ chọn ra bất kì một hằng số thuộc kiểu Color để gán cho biến backgroundColor.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = COLOR_GREEN;</code></pre>\n\n<p>Các bạn cần lưu ý rằng, biến kiểu enum chỉ có thể được gán giá trị là một trong số các hằng đã khai báo bên trong kiểu dữ liệu của chính nó, không thể sử dụng hằng của kiểu enum khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Test\n{\n\tTEST1,\n\tTEST2,\n\tTEST3\n};\n\nenum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor = TEST1; //this line makes an error</code></pre>\n\n<p>Compiler sẽ thông báo lỗi: \"a value of type Test cannot be used to initialize an entity of type Color\".</p>\n\n<h5>Những ví dụ về việc sử dụng enum</h5>\n\n<p>Sau khi đã gán giá trị cho biến kiểu enum, biến này sẽ mang giá trị là một số nguyên, và chúng ta có thể sử dụng biến này để in ra, tính toán, so sánh, truyền vào hàm theo kiểu giá trị, ... và còn nhiều mục đích khác.</p>\n\n<p>Trên thực tế, chúng ta thường sử dụng kiểu enum để đưa ra lựa chọn hàm hoặc phương thức để thực thi. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid showAllLaptop() {\n\n}\n\nvoid showAllDesktop() {\n\n}\n\nvoid showAllMobile() {\n\n}\n\nvoid showAllNetworkItem() {\n\n}\n\nvoid showProducts(ItemTypes type)\t{\n\n\tswitch (type)\n\t{\n\tcase LAPTOP:\n\t\tshowAllLaptop();\n\t\tbreak;\n\n\tcase DESKTOP:\n\t\tshowAllDesktop();\n\t\tbreak;\n\n\tcase MOBILE:\n\t\tshowAllMobile();\n\t\tbreak;\n\n\tcase NETWORK:\n\t\tshowAllNetworkItem();\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main()\t{\n\n\tItemTypes type = LAPTOP;\n\tshowProducts(type);\n\n\treturn 0;\n}</code></pre>\n\n<p>Vì biến kiểu <strong>enum</strong> lưu trữ giá trị số nguyên, nên mình có thể đưa vào làm biểu thức mệnh đề cho câu lệnh <strong>switch-case</strong>. Dựa trên loại Item mà người dùng chọn, ứng dụng của chúng ta sẽ trả về thông tin của toàn bộ sản phẩm hiện có trong kho hàng.</p>\n\n<p>Thông thường, sau mỗi nhãn case chúng ta sẽ đặt một giá trị số nguyên ứng với mỗi trường hợp, nhưng bây giờ chúng ta có thể thay thế những con số bằng các định danh của enum. Trước đây khi làm việc với câu lệnh switch-case, chúng ta có thể bỏ sót một số trường hợp cần xem xét nếu số lượng các trường hợp là quá nhiều. Nhưng khi sử dụng Visual studio 2015 và kiểu enum, chúng ta sẽ tránh được sự thiếu sót này. Dưới đây là cách mà Visual studio 2015 hổ trợ cho kiểu enum:</p>\n\n<p>Trong hàm <strong>showProducts</strong>, mình gõ câu lệnh <strong>switch</strong> nhưng sử dụng gợi ý của <strong>Visual studio</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" class=\"lightbox\" title=\"3.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" width=\"690\" height=\"342\"><div class=\"meta\">\n<span class=\"filename\">3.png?raw=true</span><span class=\"informations\">753x374</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Sau khi chọn vào gợi ý của lệnh <strong>switch</strong>, IDE phát sinh code cho chúng ta như sau:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" class=\"lightbox\" title=\"4.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" width=\"690\" height=\"380\"><div class=\"meta\">\n<span class=\"filename\">4.png?raw=true</span><span class=\"informations\">696x384</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, các bạn chỉ cần gõ thay thế từ <code>switch_on</code> bằng tên của biến <strong>enum</strong> rồi nhấn <strong>phím mũi tên sang phải</strong>, IDE sẽ liệt kê tất cả các <strong>case</strong> ứng với tất cả giá trị được định nghĩa bên trong kiểu của biến enum đó.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/5.png?raw=true\" width=\"643\" height=\"390\"></p>\n\n<p>Đây cũng là một ưu điểm của Visual studio 2015. Bây giờ chúng ta trở lại với bài học.</p>\n\n<p>Thêm một ví dụ khác cũng có thể có ích. Xét đoạn chương trình dưới đây:</p>\n\n<p></p><pre><code class=\"lang-auto\">bool initialize() {\n\n\t//init all component\n\t//if something wrong, return false\n\treturn false;\n}\n\nbool loadResource() {\n\n\t//load data from file\n\t//if something wrong, return false\n\treturn false;\n}\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn -1;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn -2;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn -3;\n\t}\n\n\treturn 0;\n}</code></pre>\n\n<p>Đoạn chương trình này sử dụng những giá trị âm để biểu diễn các lỗi có thể xảy ra. Mỗi chức năng trong chương trình gây ra lỗi thì chương trình sẽ trả về một giá trị khác nhau. Tuy nhiên, những con số cụ thể thường không mang nhiều ý nghĩa, do đó chúng ta thay thế chúng bằng kiểu enum để code của chúng ta rõ ràng hơn.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ReturnValue\n{\n\tSUCCESS = 0,\n\tINITIALIZE_ERROR = -1,\n\tLOAD_RESOURCE_ERROR = -2,\n\tRUN_TIME_ERROR = -3\n};\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn INITIALIZE_ERROR;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn LOAD_RESOURCE_ERROR;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn RUN_TIME_ERROR;\n\t}\n\n\treturn SUCCESS;\n}</code></pre>\n\n<p>Khi chúng ta viết một game với nhân vật có nhiều trạng thái khác nhau, mỗi trạng thái sẽ khiến nhân vật phản ứng bằng một hành động tương ứng, chúng ta có thể làm như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum BossState\n{\n\tIDLING,\n\tRUNNING,\n\tJUMPING,\n\tDYING\n};\n\nBossState state;\n\nvoid initBoss()\n{\n\t//init something\n\tstate = IDLING;\n}\n\nvoid attack()\n{\n\t//............\n}\n\nvoid activated()\t\n{\n\t//............\n}\n\nvoid updateAnimation(BossState state)\t\n{\n\tswitch(state)\n\t{\n\tcase IDLING:\n\t\tstandStill();\n\t\tbreak;\n\t\t\n\tcase RUNNING:\n\t\tsetRunningAnimation();\n\t\tbreak;\n\t\t\n\tcase JUMPING:\n\t\tsetJumpingAnimation();\n\t\tbreak;\n\t\t\n\tcase DYING:\n\t\tsetDyingAnimation();\n\t\tbreak;\n\t\t\n\tdefault;\n\t\tbreak;\n\t}\n}</code></pre>\n\n<p>Như các bạn thấy, kiểu enum được áp dụng khá thường xuyên trong thực tế. Trên đây chỉ là một vài ví dụ minh họa cho việc sử dụng kiểu enum thường gặp.</p>\n\n<h5>Phạm vi sử dụng kiểu enum</h5>\n\n<p>Trong một file chương trình, phạm vi sử dụng của một khai báo enum cũng tương tự như phạm vi sử dụng khi khai báo biến. Nếu chúng ta muốn sử dụng kiểu enum tại tất cả các khối lệnh trong chương trình, chúng ta nên khai báo kiểu enum phía trên cùng của các khối lệnh (giống như khai báo biến toàn cục). Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid foo()\n{\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; LAPTOP &lt;&lt; endl;\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" width=\"690\" height=\"276\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">889x356</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Vì kiểu <strong>ItemTypes</strong> khai báo bên ngoài các khối lệnh, nên chúng ta có thể sử dụng tại các khối lệnh của các hàm bên dưới. Một trường hợp khác, khi mà enum chỉ được định nghĩa trong một khối lệnh của hàm nào đó:</p>\n\n<p></p><pre><code class=\"lang-auto\">void foo()\n{\n\tenum ItemTypes\n\t{\n\t\tLAPTOP,\n\t\tDESKTOP,\n\t\tMOBILE,\n\t\tNETWORK\n\t};\n\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl; //error\n\n\treturn 0;\n}</code></pre>\n\n<p><strong>Compiler</strong> sẽ thông báo lỗi DESKTOP trong hàm main chưa được định nghĩa, vì chúng ta không thể truy xuất các giá trị của kiểu <strong>ItemTypes</strong> trong hàm foo từ hàm main được.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/2.png?raw=true\" width=\"676\" height=\"381\"></p>\n\n<p>Thông thường, chúng ta nên định nghĩa kiểu dữ liệu enum bên ngoài các khối lệnh, vì việc khai báo kiểu enum mới không yêu cầu cấp phát bộ nhớ nên không hề ảnh hưởng đến tài nguyên của hệ thống.</p>\n\n<p>Việc định nghĩa kiểu enum bên ngoài các khối lệnh không những có thể sử dụng bất cứ đâu trong chương trình mà còn có thể sử dụng tại file chương trình khác của dự án. Chúng ta sẽ tìm hiểu về cách quản lý dự án với nhiều file C++ trong các bài học sau.</p>\n\n<h3>Enum class</h3>\n\n<p>Việc sử dụng kiểu enum tự định nghĩa đã giúp chúng ta tổ chức chương trình rõ ràng, dễ đọc hơn. Nhưng khi một chương trình có nhiều enum được định nghĩa, sẽ có nhiều giá trị trùng nhau giữa các enum khác nhau, và nó có thể làm cho chương trình không có ý nghĩa gì mặc dù đã sử dụng kiểu enum.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE\n};\n\nenum Fruit\n{\n\tAPPLE,\n\tBANANA\n};\n\nint main() {\n\n\tColor color = GREEN;\n\tFruit fruit = BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Trong hàm main, <strong>compiler</strong> sẽ so sánh <strong>color và fruit</strong> như 2 giá trị số nguyên, khi Color::GREEN và Fruit::BANANA đều được gán giá trị là 2 thì color và fruit được compiler cho là bằng nhau. Đây là một trường hợp ngoài ý muốn khi sử dụng kiểu enum. Điều này xảy ra vì enum Color và enum Fruit có thể truy cập đồng thời trong cùng một khối lệnh.</p>\n\n<p>Điều chúng ta mong muốn lúc này là biến của kiểu Color chỉ được so sánh với giá trị trong enum Color, và biến kiểu Fruit chỉ có thể so sánh với giá trị trong enum Fruit. Chuẩn C++11 đã hổ trợ cho chúng ta một khái niệm enum mới, đó là enum class (có thể gọi là scoped enumeration). Mình sử dụng lại ví dụ trên nhưng thay thế enum bằng enum class:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" class=\"lightbox\" title=\"6.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" width=\"690\" height=\"314\"><div class=\"meta\">\n<span class=\"filename\">6.png?raw=true</span><span class=\"informations\">868x396</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Như các bạn thấy, compiler đã thông báo lỗi ở câu lệnh if, đồng thời cũng thông báo lỗi ở 2 câu lệnh gán giá trị cho 2 biến color và fruit. Vì việc sử dụng enum class cần phải cung cấp thêm cho compiler biết là giá trị của enum đó được định nghĩa bên trong enum nào, phải cung cấp cho compiler một cái tên của kiểu enum đứng trước giá trị chúng ta muốn sử dụng (ví dụ Color::RED).</p>\n\n<p>Các bạn đã được biết toán tử \"::\" là toán tử chỉ phạm vi truy cập. Khi mình sử dụng Color::RED có nghĩa là RED được định nghĩa bên trong khối lệnh của Color (không cần biết Color là gì, chúng ta chỉ biết RED nằm trong Color). Việc sử dụng enum class đòi hỏi lập trình viên phải chỉ ra đích danh của kiểu enum chứa giá trị cần sử dụng. Mình sửa lại đoạn chương trình trên như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main() {\n\tColor color = Color::GREEN;\n\tFruit fruit = Fruit::BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Đến đây, 2 phép gán đã có thể thực thi được nhưng câu lệnh if thì còn lỗi. Đó là do compiler đã phát hiện ra 2 biến này có 2 kiểu dữ liệu khác nhau, 1 cái là của kiểu Color trong khi cái kia là kiểu Fruit. Compiler không chấp nhận điều này nên đưa ra thông báo lỗi.</p>\n\n<p>Thậm chí khi các bạn sử dụng biến kiểu enum class để so sánh với một số nguyên cũng không được cho phép.</p>\n\n<p></p><pre><code class=\"lang-auto\">if (color == 2) // error\n{\n\t\n}</code></pre>\n\n<p>Chỉ có một cách duy nhất để sử dụng enum class là sử dụng giá trị trong chính enum của nó.</p>\n\n<p></p><pre><code class=\"lang-auto\">if(color == Color::GREEN)\n{\n\t//OK\n}</code></pre>\n\n<p>Nếu các bạn sử dụng compiler C++11 trở lên, không có lý do nào mà các bạn sử dụng kiểu enum thông thường thay vì sử dụng enum class.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã tìm hiểu một số khái niệm về kiểu dữ liệu tự định nghĩa bằng từ khóa enum:</p>\n\n<ul>\n<li>Cú pháp khai báo, giá trị khởi tạo cho các thành phần của kiểu enum.</li>\n<li>Một số cách sử dụng enum thường gặp.</li>\n<li>Phân biệt enum và enum class trong chuẩn C++11.</li>\n<li>Visual studio hổ trợ cho chúng ta liệt kê tất cả các giá trị cần so sánh trong mệnh đề switch-case. Điều này có nghĩa chúng ta nên sử dụng switch-case thay vì if-else khi cần phân loại biến kiểu enum.</li>\n</ul>\n\n<p>Sử dụng kiểu enum không làm cho chương trình của các bạn chạy nhanh hơn, cũng không làm cho chương trình của các bạn ngắn gọn hơn, nó chỉ có tác dụng duy nhất là làm cho chương trình của các bạn rõ ràng hơn.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n","rawBody":"\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Trong bài học ngày hôm nay, chúng ta sẽ cùng tìm hiểu về từ khóa <strong>enum</strong>, cách sử dụng, và quan trọng nhất là tại sao chúng ta sử dụng <strong>enum</strong> trong ngôn ngữ C++.</p>\n\n<h3>Enumarated types</h3>\n\n<p>Kiểu liệt kê là một trong số các kiểu dữ liệu do người lập trình tự định nghĩa. <strong>Tại sao chúng ta cần định nghĩa kiểu dữ liệu mới?</strong> Trong quá trình lập trình, những kiểu dữ liệu được định nghĩa sẵn trong ngôn ngữ lập trình có thể không mang lại ý nghĩa phù hợp. Ví dụ mình muốn sử dụng các giá trị từ 1 đến 7 để đại diện cho 7 ngày trong tuần (1 đại diện cho ngày chủ nhật, 7 đại diện cho thứ 7), như vậy mình cần ít nhất là 7 biến để lưu trữ các giá trị này:</p>\n\n<p></p><pre><code class=\"lang-auto\">const int SUNDAY = 1;\nconst int MONDAY = 2;\nconst int TUESDAY = 3;\nconst int WEDNESDAY = 4;\nconst int THURSDAY = 5;\nconst int FRIDAY = 6;\nconst int SATURDAY = 7;</code></pre>\n\n<p>Mình không sử dụng mảng một chiều trong trường hợp này vì:</p>\n\n<p></p><pre><code class=\"lang-auto\">int DAYS_OF_WEEK[7] = { 1, 2, 3, 4, 5, 6, 7 };</code></pre>\n\n<p>Những con số cụ thể không mang lại ý nghĩa cho người đọc mã nguồn chương trình. Việc sử dụng tên của các biến hằng số sẽ giúp chương trình chúng ta rõ ràng hơn.</p>\n\n<p>Nhưng việc khai báo các hằng số như trên vẫn có một số nhược điểm:</p>\n\n<ul>\n<li><p>Có thể khai báo thiếu sót một vài giá trị khi danh sách các hằng số là quá nhiều.</p></li>\n<li><p>Có thể khai báo không theo một quy luật (hay thứ tự) nhất định khiến chúng ta khó tìm trong chương trình. Ví dụ:</p></li>\n</ul>\n\n<p></p><pre><code class=\"lang-auto\">const int WEDNESDAY = 4;\nconst int SUNDAY = 1;\nconst int TUESDAY = 3;\nconst int FRIDAY = 6;\nconst int MONDAY = 2;\nconst int SATURDAY = 7;\nconst int THURSDAY = 5;</code></pre>\n\n<ul><li>Có một số hằng số không liên quan đến nhau nhưng được khai báo gần nhau khiến chúng ta dễ rối. Ví dụ:</li></ul>\n\n<p></p><pre><code class=\"lang-auto\">const float PI = 3.14;\nconst float ACCELERATION_OF_GRAVITY = 9.8;\nconst int MAX_SIZE_OF_ARRAY = 255;\n//..............</code></pre>\n\n<p>Như vậy, muốn khắc phục một số nhược điểm trên, chúng ta cần tìm cách để tập hợp các hằng số có ý nghĩa tương đương nhau thành những nhóm hằng số riêng biệt. Kiểu liệt kê sẽ giúp chúng ta thực hiện điều này.</p>\n\n<h5>Công dụng của kiểu liệt kê</h5>\n\n<p>Như mình đã trình bày ở trên, kiểu liệt kê có tác dụng giúp thay thế các con số (giá trị cụ thể) bằng những cái tên có ý nghĩa, và nó còn giúp chúng ta tập hợp các giá trị có ý nghĩa liên quan với nhau thành từng nhóm. Mỗi nhóm hằng số này khi đưa vào kiểu liệt kê sẽ trở thành một kiểu dữ liệu (người ta thường gọi enumeration là một kiểu dữ liệu trong C++ vì nó có cách khai báo tương tự như khai báo biến, chứ mình thấy nó giống một group của các giá trị hơn).</p>\n\n<h5>Cú pháp khai báo kiểu liệt kê</h5>\n\n<p>Để định nghĩa một kiểu liệt kê mới, chúng ta sử dụng từ khóa <strong>enum</strong> theo cấu trúc sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum &lt;name_of_enumeration&gt;\n{\n\t//list all of values inside this block\n\t//each enumerator is separated by a comma, not a semicolon\n};</code></pre>\n\n<p>Việc khai báo kiểu dữ liệu mới (như kiểu <strong>enum</strong>) không yêu cầu chương trình cấp phát bộ nhớ, lúc nào chúng ta sử dụng kiểu <strong>enum</strong> vừa đã được định nghĩa để tạo ra biến kiểu <strong>enum</strong> thì chương trình mới cấp phát bộ nhớ.</p>\n\n<p>Mỗi giá trị trong block của kiểu enum cách nhau bởi một dấu phẩy (đối với giá trị cuối cùng thì không cần sử dụng dấu phẩy).</p>\n\n<h5>Khai báo kiểu liệt kê</h5>\n\n<p>Mình đã nói về lý thuyết của kiểu <strong>enum</strong> (kiểu liệt kê) xong, chắc bây giờ các bạn cũng đang tò mò muốn biết cuối cùng thì khai báo và sử dụng nó như thế nào. Dưới đây là một ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};</code></pre>\n\n<p>Như các bạn thấy, sau khi định nghĩa một kiểu enum xong thì kết thúc nó là một dấu chấm phẩy, vì đây cũng là một câu lệnh. Về mặt cơ bản, chúng ta phải đặt toàn bộ câu lệnh trên cùng một dòng:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek { SUNDAY,\tMONDAY,\tTUESDAY, WEDNESDAY,\tTHURSDAY, FRIDAY, SATURDAY };</code></pre>\n\n<p>Nhưng <strong>compiler</strong> vẫn hiểu được một câu lệnh nằm trên nhiều dòng nên mình chọn cách viết ở trên (tách thành nhiều dòng) để phần định nghĩa của mình rõ ràng hơn.</p>\n\n<p>Như vậy là chúng ta đã có một kiểu dữ liệu mới cho chương trình. Các bạn có thể gọi <strong>DaysOfWeek</strong> là một kiểu dữ liệu (kiểu enum hay kiểu liệt kê) hoặc có thể gọi là tên của một nhóm các giá trị cũng như chúng ta hay đi chơi với bạn bè theo nhóm nhỏ rồi đặt tên cho nhóm vậy.</p>\n\n<p>Trong một chương trình, chúng ta có thể có nhiều khai báo kiểu <strong>enum</strong> khác nhau. Ví dụ mình khai báo thêm vài kiểu <strong>enum</strong> khác:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};\n\nenum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE,\n\tWHITE\n};\n\nenum Animal\n{\n\tCAT,\n\tDOG,\n\tHORSE,\n\tMONKEY,\n\tCHICKEN\n};</code></pre>\n\n<p>Như vậy là chương trình của chúng ta có 3 kiểu dữ liệu mới (3 nhóm giá trị mới), mỗi kiểu enum này hoàn toàn không liên quan gì đến nhau, chỉ có các giá trị bên trong mỗi kiểu enum mới có liên quan đến nhau về mặt ý nghĩa.</p>\n\n<p><strong>Nhưng có thấy giá trị nào đâu?</strong></p>\n\n<p>Khi nhìn vào bên trong khối lệnh định nghĩa của kiểu enum có tên <strong>Color</strong>, chúng ta chỉ thấy những những danh từ như RED, GREEN, BLUE... mà không hề thấy những con số. Thực chất, những danh từ này đã được gắn cho một giá trị cụ thể, và những cái danh từ mà chúng ta nhìn thấy sẽ đại diện cho những giá trị đó. Sử dụng những danh từ để thay thế cho những con số sẽ giúp người đọc chương trình dễ hiểu hơn (chứ không giúp chương trình chạy nhanh hơn).</p>\n\n<h5>Enumerator values</h5>\n\n<p>Bây giờ mình sẽ làm một chương trình mẫu để show cho các bạn xem những giá trị được đặt trong block của một kiểu enum mình tự định nghĩa:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n\n\tenum Alphabet\n\t{\n\t\tLETTER_A,\n\t\tLETTER_B,\n\t\tLETTER_C,\n\t\tLETTER_D,\n\t\tLETTER_E\n\t};\n\n\tcout &lt;&lt; LETTER_A &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_B &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_C &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_D &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_E &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Khi mình chạy chương trình, kết quả xuất hiện trên console là:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/0.png?raw=true\" width=\"579\" height=\"384\"></p>\n\n<p>Như vậy, không cần chúng ta trực tiếp gán giá trị cho các tên hằng số, <strong>compiler</strong> đã tự động khởi tạo giá trị cho chúng, bắt đầu với giá trị 0 và tăng dần. Các bạn cũng đã thấy rằng, sau khi định nghĩa xong 1 kiểu enum thì chúng ta có thể sử dụng các tên gọi bên trong enum như những hằng số. Vì những giá trị hằng số này là giá trị kiểu integer (<strong>int</strong>), nên chúng ta cũng có thể gán chúng cho những biến kiểu <strong>int</strong> khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Alphabet\n{\n\tLETTER_A,\n\tLETTER_B,\n\tLETTER_C,\n\tLETTER_D,\n\tLETTER_E\n};\n\nint iValue = LETTER_A;</code></pre>\n\n<p>Bên cạnh việc tự động gán giá trị cho từng phần tử được liệt kê, chúng ta cũng có thể chủ động thay đổi giá trị cho chúng (<strong>nhưng chỉ có thể thay đổi giá trị trong phần khai báo</strong>), một enum sau khi đã định nghĩa xong thì không thể thay đổi những giá trị của danh sách các phần tử nữa.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Direction\n{\n\tUP = 1,   //assigned 1 by programmer\n\tDOWN = 3, //assigned 3 by programmer\n\tLEFT,     //assigned 4 by compiler\n\tRIGHT     //assigned 5 by compiler\n};\n\ncout &lt;&lt; UP &lt;&lt; \" \" &lt;&lt; DOWN &lt;&lt; \" \" &lt;&lt; LEFT &lt;&lt; \" \" &lt;&lt; RIGHT &lt;&lt; endl;</code></pre>\n\n<p>Đoạn chương trình này sẽ in ra:</p>\n\n<p></p><pre><code class=\"lang-auto\">1 3 4 5</code></pre>\n\n<p>Như vậy, <strong>compiler</strong> sẽ tự động gán giá trị cho các phần tử không được khởi tạo giá trị. Ngoại trừ phần tử đầu tiên trong <strong>enum</strong>, những hằng số khác sẽ được gán giá trị bằng phần tử trước nó cộng thêm 1.</p>\n\n<p><strong>Lưu ý: những hằng số trong cùng một enum có thể có cùng giá trị với nhau.</strong></p>\n\n<blockquote>\n<p>Best practice: Don’t assign specific values to your enumerators.</p>\n<p>Rule: Don’t assign the same value to two enumerators in the same enumeration unless there’s a very good reason.</p>\n</blockquote>\n\n<h5>Sử dụng kiểu enum đã định nghĩa như một kiểu dữ liệu thông thường</h5>\n\n<p>Như mình trình bày ở trên, từ khóa enum trong C++ giúp chúng ta định nghĩa một kiểu dữ liệu mới cho chương trình. Tuy nó chỉ là tập hợp danh sách các hằng số có ý nghĩa tương quan với nhau, nhưng bản chất nó vẫn là một kiểu dữ liệu (kiểu liệt kê) nên chúng ta có thể sử dụng chúng để tạo ra các biến. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor;</code></pre>\n\n<p>Bây giờ, chúng ta đã có một biến kiểu <strong>Color</strong>. Biến <strong>backgroundColor</strong> chỉ có tác dụng lưu trữ giá trị của một trong số tất cả các hằng số đã được liệt kê bên trong kiểu <strong>Color</strong>. Việc thực hiện gán các giá trị khác kiểu <strong>Color</strong> sẽ gây ra lỗi về mặt cú pháp.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = 5; //error</code></pre>\n\n<p>Bây giờ mình sẽ chọn ra bất kì một hằng số thuộc kiểu Color để gán cho biến backgroundColor.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = COLOR_GREEN;</code></pre>\n\n<p>Các bạn cần lưu ý rằng, biến kiểu enum chỉ có thể được gán giá trị là một trong số các hằng đã khai báo bên trong kiểu dữ liệu của chính nó, không thể sử dụng hằng của kiểu enum khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Test\n{\n\tTEST1,\n\tTEST2,\n\tTEST3\n};\n\nenum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor = TEST1; //this line makes an error</code></pre>\n\n<p>Compiler sẽ thông báo lỗi: \"a value of type Test cannot be used to initialize an entity of type Color\".</p>\n\n<h5>Những ví dụ về việc sử dụng enum</h5>\n\n<p>Sau khi đã gán giá trị cho biến kiểu enum, biến này sẽ mang giá trị là một số nguyên, và chúng ta có thể sử dụng biến này để in ra, tính toán, so sánh, truyền vào hàm theo kiểu giá trị, ... và còn nhiều mục đích khác.</p>\n\n<p>Trên thực tế, chúng ta thường sử dụng kiểu enum để đưa ra lựa chọn hàm hoặc phương thức để thực thi. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid showAllLaptop() {\n\n}\n\nvoid showAllDesktop() {\n\n}\n\nvoid showAllMobile() {\n\n}\n\nvoid showAllNetworkItem() {\n\n}\n\nvoid showProducts(ItemTypes type)\t{\n\n\tswitch (type)\n\t{\n\tcase LAPTOP:\n\t\tshowAllLaptop();\n\t\tbreak;\n\n\tcase DESKTOP:\n\t\tshowAllDesktop();\n\t\tbreak;\n\n\tcase MOBILE:\n\t\tshowAllMobile();\n\t\tbreak;\n\n\tcase NETWORK:\n\t\tshowAllNetworkItem();\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main()\t{\n\n\tItemTypes type = LAPTOP;\n\tshowProducts(type);\n\n\treturn 0;\n}</code></pre>\n\n<p>Vì biến kiểu <strong>enum</strong> lưu trữ giá trị số nguyên, nên mình có thể đưa vào làm biểu thức mệnh đề cho câu lệnh <strong>switch-case</strong>. Dựa trên loại Item mà người dùng chọn, ứng dụng của chúng ta sẽ trả về thông tin của toàn bộ sản phẩm hiện có trong kho hàng.</p>\n\n<p>Thông thường, sau mỗi nhãn case chúng ta sẽ đặt một giá trị số nguyên ứng với mỗi trường hợp, nhưng bây giờ chúng ta có thể thay thế những con số bằng các định danh của enum. Trước đây khi làm việc với câu lệnh switch-case, chúng ta có thể bỏ sót một số trường hợp cần xem xét nếu số lượng các trường hợp là quá nhiều. Nhưng khi sử dụng Visual studio 2015 và kiểu enum, chúng ta sẽ tránh được sự thiếu sót này. Dưới đây là cách mà Visual studio 2015 hổ trợ cho kiểu enum:</p>\n\n<p>Trong hàm <strong>showProducts</strong>, mình gõ câu lệnh <strong>switch</strong> nhưng sử dụng gợi ý của <strong>Visual studio</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" class=\"lightbox\" title=\"3.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" width=\"690\" height=\"342\"><div class=\"meta\">\n<span class=\"filename\">3.png?raw=true</span><span class=\"informations\">753x374</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Sau khi chọn vào gợi ý của lệnh <strong>switch</strong>, IDE phát sinh code cho chúng ta như sau:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" class=\"lightbox\" title=\"4.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" width=\"690\" height=\"380\"><div class=\"meta\">\n<span class=\"filename\">4.png?raw=true</span><span class=\"informations\">696x384</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, các bạn chỉ cần gõ thay thế từ <code>switch_on</code> bằng tên của biến <strong>enum</strong> rồi nhấn <strong>phím mũi tên sang phải</strong>, IDE sẽ liệt kê tất cả các <strong>case</strong> ứng với tất cả giá trị được định nghĩa bên trong kiểu của biến enum đó.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/5.png?raw=true\" width=\"643\" height=\"390\"></p>\n\n<p>Đây cũng là một ưu điểm của Visual studio 2015. Bây giờ chúng ta trở lại với bài học.</p>\n\n<p>Thêm một ví dụ khác cũng có thể có ích. Xét đoạn chương trình dưới đây:</p>\n\n<p></p><pre><code class=\"lang-auto\">bool initialize() {\n\n\t//init all component\n\t//if something wrong, return false\n\treturn false;\n}\n\nbool loadResource() {\n\n\t//load data from file\n\t//if something wrong, return false\n\treturn false;\n}\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn -1;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn -2;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn -3;\n\t}\n\n\treturn 0;\n}</code></pre>\n\n<p>Đoạn chương trình này sử dụng những giá trị âm để biểu diễn các lỗi có thể xảy ra. Mỗi chức năng trong chương trình gây ra lỗi thì chương trình sẽ trả về một giá trị khác nhau. Tuy nhiên, những con số cụ thể thường không mang nhiều ý nghĩa, do đó chúng ta thay thế chúng bằng kiểu enum để code của chúng ta rõ ràng hơn.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ReturnValue\n{\n\tSUCCESS = 0,\n\tINITIALIZE_ERROR = -1,\n\tLOAD_RESOURCE_ERROR = -2,\n\tRUN_TIME_ERROR = -3\n};\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn INITIALIZE_ERROR;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn LOAD_RESOURCE_ERROR;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn RUN_TIME_ERROR;\n\t}\n\n\treturn SUCCESS;\n}</code></pre>\n\n<p>Khi chúng ta viết một game với nhân vật có nhiều trạng thái khác nhau, mỗi trạng thái sẽ khiến nhân vật phản ứng bằng một hành động tương ứng, chúng ta có thể làm như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum BossState\n{\n\tIDLING,\n\tRUNNING,\n\tJUMPING,\n\tDYING\n};\n\nBossState state;\n\nvoid initBoss()\n{\n\t//init something\n\tstate = IDLING;\n}\n\nvoid attack()\n{\n\t//............\n}\n\nvoid activated()\t\n{\n\t//............\n}\n\nvoid updateAnimation(BossState state)\t\n{\n\tswitch(state)\n\t{\n\tcase IDLING:\n\t\tstandStill();\n\t\tbreak;\n\t\t\n\tcase RUNNING:\n\t\tsetRunningAnimation();\n\t\tbreak;\n\t\t\n\tcase JUMPING:\n\t\tsetJumpingAnimation();\n\t\tbreak;\n\t\t\n\tcase DYING:\n\t\tsetDyingAnimation();\n\t\tbreak;\n\t\t\n\tdefault;\n\t\tbreak;\n\t}\n}</code></pre>\n\n<p>Như các bạn thấy, kiểu enum được áp dụng khá thường xuyên trong thực tế. Trên đây chỉ là một vài ví dụ minh họa cho việc sử dụng kiểu enum thường gặp.</p>\n\n<h5>Phạm vi sử dụng kiểu enum</h5>\n\n<p>Trong một file chương trình, phạm vi sử dụng của một khai báo enum cũng tương tự như phạm vi sử dụng khi khai báo biến. Nếu chúng ta muốn sử dụng kiểu enum tại tất cả các khối lệnh trong chương trình, chúng ta nên khai báo kiểu enum phía trên cùng của các khối lệnh (giống như khai báo biến toàn cục). Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid foo()\n{\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; LAPTOP &lt;&lt; endl;\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" width=\"690\" height=\"276\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">889x356</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Vì kiểu <strong>ItemTypes</strong> khai báo bên ngoài các khối lệnh, nên chúng ta có thể sử dụng tại các khối lệnh của các hàm bên dưới. Một trường hợp khác, khi mà enum chỉ được định nghĩa trong một khối lệnh của hàm nào đó:</p>\n\n<p></p><pre><code class=\"lang-auto\">void foo()\n{\n\tenum ItemTypes\n\t{\n\t\tLAPTOP,\n\t\tDESKTOP,\n\t\tMOBILE,\n\t\tNETWORK\n\t};\n\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl; //error\n\n\treturn 0;\n}</code></pre>\n\n<p><strong>Compiler</strong> sẽ thông báo lỗi DESKTOP trong hàm main chưa được định nghĩa, vì chúng ta không thể truy xuất các giá trị của kiểu <strong>ItemTypes</strong> trong hàm foo từ hàm main được.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/2.png?raw=true\" width=\"676\" height=\"381\"></p>\n\n<p>Thông thường, chúng ta nên định nghĩa kiểu dữ liệu enum bên ngoài các khối lệnh, vì việc khai báo kiểu enum mới không yêu cầu cấp phát bộ nhớ nên không hề ảnh hưởng đến tài nguyên của hệ thống.</p>\n\n<p>Việc định nghĩa kiểu enum bên ngoài các khối lệnh không những có thể sử dụng bất cứ đâu trong chương trình mà còn có thể sử dụng tại file chương trình khác của dự án. Chúng ta sẽ tìm hiểu về cách quản lý dự án với nhiều file C++ trong các bài học sau.</p>\n\n<h3>Enum class</h3>\n\n<p>Việc sử dụng kiểu enum tự định nghĩa đã giúp chúng ta tổ chức chương trình rõ ràng, dễ đọc hơn. Nhưng khi một chương trình có nhiều enum được định nghĩa, sẽ có nhiều giá trị trùng nhau giữa các enum khác nhau, và nó có thể làm cho chương trình không có ý nghĩa gì mặc dù đã sử dụng kiểu enum.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE\n};\n\nenum Fruit\n{\n\tAPPLE,\n\tBANANA\n};\n\nint main() {\n\n\tColor color = GREEN;\n\tFruit fruit = BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Trong hàm main, <strong>compiler</strong> sẽ so sánh <strong>color và fruit</strong> như 2 giá trị số nguyên, khi Color::GREEN và Fruit::BANANA đều được gán giá trị là 2 thì color và fruit được compiler cho là bằng nhau. Đây là một trường hợp ngoài ý muốn khi sử dụng kiểu enum. Điều này xảy ra vì enum Color và enum Fruit có thể truy cập đồng thời trong cùng một khối lệnh.</p>\n\n<p>Điều chúng ta mong muốn lúc này là biến của kiểu Color chỉ được so sánh với giá trị trong enum Color, và biến kiểu Fruit chỉ có thể so sánh với giá trị trong enum Fruit. Chuẩn C++11 đã hổ trợ cho chúng ta một khái niệm enum mới, đó là enum class (có thể gọi là scoped enumeration). Mình sử dụng lại ví dụ trên nhưng thay thế enum bằng enum class:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" class=\"lightbox\" title=\"6.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" width=\"690\" height=\"314\"><div class=\"meta\">\n<span class=\"filename\">6.png?raw=true</span><span class=\"informations\">868x396</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Như các bạn thấy, compiler đã thông báo lỗi ở câu lệnh if, đồng thời cũng thông báo lỗi ở 2 câu lệnh gán giá trị cho 2 biến color và fruit. Vì việc sử dụng enum class cần phải cung cấp thêm cho compiler biết là giá trị của enum đó được định nghĩa bên trong enum nào, phải cung cấp cho compiler một cái tên của kiểu enum đứng trước giá trị chúng ta muốn sử dụng (ví dụ Color::RED).</p>\n\n<p>Các bạn đã được biết toán tử \"::\" là toán tử chỉ phạm vi truy cập. Khi mình sử dụng Color::RED có nghĩa là RED được định nghĩa bên trong khối lệnh của Color (không cần biết Color là gì, chúng ta chỉ biết RED nằm trong Color). Việc sử dụng enum class đòi hỏi lập trình viên phải chỉ ra đích danh của kiểu enum chứa giá trị cần sử dụng. Mình sửa lại đoạn chương trình trên như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main() {\n\tColor color = Color::GREEN;\n\tFruit fruit = Fruit::BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Đến đây, 2 phép gán đã có thể thực thi được nhưng câu lệnh if thì còn lỗi. Đó là do compiler đã phát hiện ra 2 biến này có 2 kiểu dữ liệu khác nhau, 1 cái là của kiểu Color trong khi cái kia là kiểu Fruit. Compiler không chấp nhận điều này nên đưa ra thông báo lỗi.</p>\n\n<p>Thậm chí khi các bạn sử dụng biến kiểu enum class để so sánh với một số nguyên cũng không được cho phép.</p>\n\n<p></p><pre><code class=\"lang-auto\">if (color == 2) // error\n{\n\t\n}</code></pre>\n\n<p>Chỉ có một cách duy nhất để sử dụng enum class là sử dụng giá trị trong chính enum của nó.</p>\n\n<p></p><pre><code class=\"lang-auto\">if(color == Color::GREEN)\n{\n\t//OK\n}</code></pre>\n\n<p>Nếu các bạn sử dụng compiler C++11 trở lên, không có lý do nào mà các bạn sử dụng kiểu enum thông thường thay vì sử dụng enum class.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã tìm hiểu một số khái niệm về kiểu dữ liệu tự định nghĩa bằng từ khóa enum:</p>\n\n<ul>\n<li>Cú pháp khai báo, giá trị khởi tạo cho các thành phần của kiểu enum.</li>\n<li>Một số cách sử dụng enum thường gặp.</li>\n<li>Phân biệt enum và enum class trong chuẩn C++11.</li>\n<li>Visual studio hổ trợ cho chúng ta liệt kê tất cả các giá trị cần so sánh trong mệnh đề switch-case. Điều này có nghĩa chúng ta nên sử dụng switch-case thay vì if-else khi cần phân loại biến kiểu enum.</li>\n</ul>\n\n<p>Sử dụng kiểu enum không làm cho chương trình của các bạn chạy nhanh hơn, cũng không làm cho chương trình của các bạn ngắn gọn hơn, nó chỉ có tác dụng duy nhất là làm cho chương trình của các bạn rõ ràng hơn.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n","raw":"---json\n{\"title\":\"9.0 Kiểu liệt kê (enum)\",\"route\":\"9/0-kieu-liet-ke-enum\"}\n---\n\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Trong bài học ngày hôm nay, chúng ta sẽ cùng tìm hiểu về từ khóa <strong>enum</strong>, cách sử dụng, và quan trọng nhất là tại sao chúng ta sử dụng <strong>enum</strong> trong ngôn ngữ C++.</p>\n\n<h3>Enumarated types</h3>\n\n<p>Kiểu liệt kê là một trong số các kiểu dữ liệu do người lập trình tự định nghĩa. <strong>Tại sao chúng ta cần định nghĩa kiểu dữ liệu mới?</strong> Trong quá trình lập trình, những kiểu dữ liệu được định nghĩa sẵn trong ngôn ngữ lập trình có thể không mang lại ý nghĩa phù hợp. Ví dụ mình muốn sử dụng các giá trị từ 1 đến 7 để đại diện cho 7 ngày trong tuần (1 đại diện cho ngày chủ nhật, 7 đại diện cho thứ 7), như vậy mình cần ít nhất là 7 biến để lưu trữ các giá trị này:</p>\n\n<p></p><pre><code class=\"lang-auto\">const int SUNDAY = 1;\nconst int MONDAY = 2;\nconst int TUESDAY = 3;\nconst int WEDNESDAY = 4;\nconst int THURSDAY = 5;\nconst int FRIDAY = 6;\nconst int SATURDAY = 7;</code></pre>\n\n<p>Mình không sử dụng mảng một chiều trong trường hợp này vì:</p>\n\n<p></p><pre><code class=\"lang-auto\">int DAYS_OF_WEEK[7] = { 1, 2, 3, 4, 5, 6, 7 };</code></pre>\n\n<p>Những con số cụ thể không mang lại ý nghĩa cho người đọc mã nguồn chương trình. Việc sử dụng tên của các biến hằng số sẽ giúp chương trình chúng ta rõ ràng hơn.</p>\n\n<p>Nhưng việc khai báo các hằng số như trên vẫn có một số nhược điểm:</p>\n\n<ul>\n<li><p>Có thể khai báo thiếu sót một vài giá trị khi danh sách các hằng số là quá nhiều.</p></li>\n<li><p>Có thể khai báo không theo một quy luật (hay thứ tự) nhất định khiến chúng ta khó tìm trong chương trình. Ví dụ:</p></li>\n</ul>\n\n<p></p><pre><code class=\"lang-auto\">const int WEDNESDAY = 4;\nconst int SUNDAY = 1;\nconst int TUESDAY = 3;\nconst int FRIDAY = 6;\nconst int MONDAY = 2;\nconst int SATURDAY = 7;\nconst int THURSDAY = 5;</code></pre>\n\n<ul><li>Có một số hằng số không liên quan đến nhau nhưng được khai báo gần nhau khiến chúng ta dễ rối. Ví dụ:</li></ul>\n\n<p></p><pre><code class=\"lang-auto\">const float PI = 3.14;\nconst float ACCELERATION_OF_GRAVITY = 9.8;\nconst int MAX_SIZE_OF_ARRAY = 255;\n//..............</code></pre>\n\n<p>Như vậy, muốn khắc phục một số nhược điểm trên, chúng ta cần tìm cách để tập hợp các hằng số có ý nghĩa tương đương nhau thành những nhóm hằng số riêng biệt. Kiểu liệt kê sẽ giúp chúng ta thực hiện điều này.</p>\n\n<h5>Công dụng của kiểu liệt kê</h5>\n\n<p>Như mình đã trình bày ở trên, kiểu liệt kê có tác dụng giúp thay thế các con số (giá trị cụ thể) bằng những cái tên có ý nghĩa, và nó còn giúp chúng ta tập hợp các giá trị có ý nghĩa liên quan với nhau thành từng nhóm. Mỗi nhóm hằng số này khi đưa vào kiểu liệt kê sẽ trở thành một kiểu dữ liệu (người ta thường gọi enumeration là một kiểu dữ liệu trong C++ vì nó có cách khai báo tương tự như khai báo biến, chứ mình thấy nó giống một group của các giá trị hơn).</p>\n\n<h5>Cú pháp khai báo kiểu liệt kê</h5>\n\n<p>Để định nghĩa một kiểu liệt kê mới, chúng ta sử dụng từ khóa <strong>enum</strong> theo cấu trúc sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum &lt;name_of_enumeration&gt;\n{\n\t//list all of values inside this block\n\t//each enumerator is separated by a comma, not a semicolon\n};</code></pre>\n\n<p>Việc khai báo kiểu dữ liệu mới (như kiểu <strong>enum</strong>) không yêu cầu chương trình cấp phát bộ nhớ, lúc nào chúng ta sử dụng kiểu <strong>enum</strong> vừa đã được định nghĩa để tạo ra biến kiểu <strong>enum</strong> thì chương trình mới cấp phát bộ nhớ.</p>\n\n<p>Mỗi giá trị trong block của kiểu enum cách nhau bởi một dấu phẩy (đối với giá trị cuối cùng thì không cần sử dụng dấu phẩy).</p>\n\n<h5>Khai báo kiểu liệt kê</h5>\n\n<p>Mình đã nói về lý thuyết của kiểu <strong>enum</strong> (kiểu liệt kê) xong, chắc bây giờ các bạn cũng đang tò mò muốn biết cuối cùng thì khai báo và sử dụng nó như thế nào. Dưới đây là một ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};</code></pre>\n\n<p>Như các bạn thấy, sau khi định nghĩa một kiểu enum xong thì kết thúc nó là một dấu chấm phẩy, vì đây cũng là một câu lệnh. Về mặt cơ bản, chúng ta phải đặt toàn bộ câu lệnh trên cùng một dòng:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek { SUNDAY,\tMONDAY,\tTUESDAY, WEDNESDAY,\tTHURSDAY, FRIDAY, SATURDAY };</code></pre>\n\n<p>Nhưng <strong>compiler</strong> vẫn hiểu được một câu lệnh nằm trên nhiều dòng nên mình chọn cách viết ở trên (tách thành nhiều dòng) để phần định nghĩa của mình rõ ràng hơn.</p>\n\n<p>Như vậy là chúng ta đã có một kiểu dữ liệu mới cho chương trình. Các bạn có thể gọi <strong>DaysOfWeek</strong> là một kiểu dữ liệu (kiểu enum hay kiểu liệt kê) hoặc có thể gọi là tên của một nhóm các giá trị cũng như chúng ta hay đi chơi với bạn bè theo nhóm nhỏ rồi đặt tên cho nhóm vậy.</p>\n\n<p>Trong một chương trình, chúng ta có thể có nhiều khai báo kiểu <strong>enum</strong> khác nhau. Ví dụ mình khai báo thêm vài kiểu <strong>enum</strong> khác:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum DaysOfWeek\n{\n\tSUNDAY,\n\tMONDAY,\n\tTUESDAY,\n\tWEDNESDAY,\n\tTHURSDAY,\n\tFRIDAY,\n\tSATURDAY\n};\n\nenum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE,\n\tWHITE\n};\n\nenum Animal\n{\n\tCAT,\n\tDOG,\n\tHORSE,\n\tMONKEY,\n\tCHICKEN\n};</code></pre>\n\n<p>Như vậy là chương trình của chúng ta có 3 kiểu dữ liệu mới (3 nhóm giá trị mới), mỗi kiểu enum này hoàn toàn không liên quan gì đến nhau, chỉ có các giá trị bên trong mỗi kiểu enum mới có liên quan đến nhau về mặt ý nghĩa.</p>\n\n<p><strong>Nhưng có thấy giá trị nào đâu?</strong></p>\n\n<p>Khi nhìn vào bên trong khối lệnh định nghĩa của kiểu enum có tên <strong>Color</strong>, chúng ta chỉ thấy những những danh từ như RED, GREEN, BLUE... mà không hề thấy những con số. Thực chất, những danh từ này đã được gắn cho một giá trị cụ thể, và những cái danh từ mà chúng ta nhìn thấy sẽ đại diện cho những giá trị đó. Sử dụng những danh từ để thay thế cho những con số sẽ giúp người đọc chương trình dễ hiểu hơn (chứ không giúp chương trình chạy nhanh hơn).</p>\n\n<h5>Enumerator values</h5>\n\n<p>Bây giờ mình sẽ làm một chương trình mẫu để show cho các bạn xem những giá trị được đặt trong block của một kiểu enum mình tự định nghĩa:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n\n\tenum Alphabet\n\t{\n\t\tLETTER_A,\n\t\tLETTER_B,\n\t\tLETTER_C,\n\t\tLETTER_D,\n\t\tLETTER_E\n\t};\n\n\tcout &lt;&lt; LETTER_A &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_B &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_C &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_D &lt;&lt; endl;\n\tcout &lt;&lt; LETTER_E &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Khi mình chạy chương trình, kết quả xuất hiện trên console là:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/0.png?raw=true\" width=\"579\" height=\"384\"></p>\n\n<p>Như vậy, không cần chúng ta trực tiếp gán giá trị cho các tên hằng số, <strong>compiler</strong> đã tự động khởi tạo giá trị cho chúng, bắt đầu với giá trị 0 và tăng dần. Các bạn cũng đã thấy rằng, sau khi định nghĩa xong 1 kiểu enum thì chúng ta có thể sử dụng các tên gọi bên trong enum như những hằng số. Vì những giá trị hằng số này là giá trị kiểu integer (<strong>int</strong>), nên chúng ta cũng có thể gán chúng cho những biến kiểu <strong>int</strong> khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Alphabet\n{\n\tLETTER_A,\n\tLETTER_B,\n\tLETTER_C,\n\tLETTER_D,\n\tLETTER_E\n};\n\nint iValue = LETTER_A;</code></pre>\n\n<p>Bên cạnh việc tự động gán giá trị cho từng phần tử được liệt kê, chúng ta cũng có thể chủ động thay đổi giá trị cho chúng (<strong>nhưng chỉ có thể thay đổi giá trị trong phần khai báo</strong>), một enum sau khi đã định nghĩa xong thì không thể thay đổi những giá trị của danh sách các phần tử nữa.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Direction\n{\n\tUP = 1,   //assigned 1 by programmer\n\tDOWN = 3, //assigned 3 by programmer\n\tLEFT,     //assigned 4 by compiler\n\tRIGHT     //assigned 5 by compiler\n};\n\ncout &lt;&lt; UP &lt;&lt; \" \" &lt;&lt; DOWN &lt;&lt; \" \" &lt;&lt; LEFT &lt;&lt; \" \" &lt;&lt; RIGHT &lt;&lt; endl;</code></pre>\n\n<p>Đoạn chương trình này sẽ in ra:</p>\n\n<p></p><pre><code class=\"lang-auto\">1 3 4 5</code></pre>\n\n<p>Như vậy, <strong>compiler</strong> sẽ tự động gán giá trị cho các phần tử không được khởi tạo giá trị. Ngoại trừ phần tử đầu tiên trong <strong>enum</strong>, những hằng số khác sẽ được gán giá trị bằng phần tử trước nó cộng thêm 1.</p>\n\n<p><strong>Lưu ý: những hằng số trong cùng một enum có thể có cùng giá trị với nhau.</strong></p>\n\n<blockquote>\n<p>Best practice: Don’t assign specific values to your enumerators.</p>\n<p>Rule: Don’t assign the same value to two enumerators in the same enumeration unless there’s a very good reason.</p>\n</blockquote>\n\n<h5>Sử dụng kiểu enum đã định nghĩa như một kiểu dữ liệu thông thường</h5>\n\n<p>Như mình trình bày ở trên, từ khóa enum trong C++ giúp chúng ta định nghĩa một kiểu dữ liệu mới cho chương trình. Tuy nó chỉ là tập hợp danh sách các hằng số có ý nghĩa tương quan với nhau, nhưng bản chất nó vẫn là một kiểu dữ liệu (kiểu liệt kê) nên chúng ta có thể sử dụng chúng để tạo ra các biến. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor;</code></pre>\n\n<p>Bây giờ, chúng ta đã có một biến kiểu <strong>Color</strong>. Biến <strong>backgroundColor</strong> chỉ có tác dụng lưu trữ giá trị của một trong số tất cả các hằng số đã được liệt kê bên trong kiểu <strong>Color</strong>. Việc thực hiện gán các giá trị khác kiểu <strong>Color</strong> sẽ gây ra lỗi về mặt cú pháp.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = 5; //error</code></pre>\n\n<p>Bây giờ mình sẽ chọn ra bất kì một hằng số thuộc kiểu Color để gán cho biến backgroundColor.</p>\n\n<p></p><pre><code class=\"lang-auto\">Color backgroundColor = COLOR_GREEN;</code></pre>\n\n<p>Các bạn cần lưu ý rằng, biến kiểu enum chỉ có thể được gán giá trị là một trong số các hằng đã khai báo bên trong kiểu dữ liệu của chính nó, không thể sử dụng hằng của kiểu enum khác. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Test\n{\n\tTEST1,\n\tTEST2,\n\tTEST3\n};\n\nenum Color\n{\n    COLOR_BLACK,\n    COLOR_RED, \n    COLOR_BLUE, \n    COLOR_GREEN, \n    COLOR_WHITE,\n    COLOR_CYAN,\n    COLOR_YELLOW\n};\n\nColor backgroundColor = TEST1; //this line makes an error</code></pre>\n\n<p>Compiler sẽ thông báo lỗi: \"a value of type Test cannot be used to initialize an entity of type Color\".</p>\n\n<h5>Những ví dụ về việc sử dụng enum</h5>\n\n<p>Sau khi đã gán giá trị cho biến kiểu enum, biến này sẽ mang giá trị là một số nguyên, và chúng ta có thể sử dụng biến này để in ra, tính toán, so sánh, truyền vào hàm theo kiểu giá trị, ... và còn nhiều mục đích khác.</p>\n\n<p>Trên thực tế, chúng ta thường sử dụng kiểu enum để đưa ra lựa chọn hàm hoặc phương thức để thực thi. Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid showAllLaptop() {\n\n}\n\nvoid showAllDesktop() {\n\n}\n\nvoid showAllMobile() {\n\n}\n\nvoid showAllNetworkItem() {\n\n}\n\nvoid showProducts(ItemTypes type)\t{\n\n\tswitch (type)\n\t{\n\tcase LAPTOP:\n\t\tshowAllLaptop();\n\t\tbreak;\n\n\tcase DESKTOP:\n\t\tshowAllDesktop();\n\t\tbreak;\n\n\tcase MOBILE:\n\t\tshowAllMobile();\n\t\tbreak;\n\n\tcase NETWORK:\n\t\tshowAllNetworkItem();\n\t\tbreak;\n\n\tdefault:\n\t\tbreak;\n\t}\n}\n\nint main()\t{\n\n\tItemTypes type = LAPTOP;\n\tshowProducts(type);\n\n\treturn 0;\n}</code></pre>\n\n<p>Vì biến kiểu <strong>enum</strong> lưu trữ giá trị số nguyên, nên mình có thể đưa vào làm biểu thức mệnh đề cho câu lệnh <strong>switch-case</strong>. Dựa trên loại Item mà người dùng chọn, ứng dụng của chúng ta sẽ trả về thông tin của toàn bộ sản phẩm hiện có trong kho hàng.</p>\n\n<p>Thông thường, sau mỗi nhãn case chúng ta sẽ đặt một giá trị số nguyên ứng với mỗi trường hợp, nhưng bây giờ chúng ta có thể thay thế những con số bằng các định danh của enum. Trước đây khi làm việc với câu lệnh switch-case, chúng ta có thể bỏ sót một số trường hợp cần xem xét nếu số lượng các trường hợp là quá nhiều. Nhưng khi sử dụng Visual studio 2015 và kiểu enum, chúng ta sẽ tránh được sự thiếu sót này. Dưới đây là cách mà Visual studio 2015 hổ trợ cho kiểu enum:</p>\n\n<p>Trong hàm <strong>showProducts</strong>, mình gõ câu lệnh <strong>switch</strong> nhưng sử dụng gợi ý của <strong>Visual studio</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" class=\"lightbox\" title=\"3.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/3.png?raw=true\" width=\"690\" height=\"342\"><div class=\"meta\">\n<span class=\"filename\">3.png?raw=true</span><span class=\"informations\">753x374</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Sau khi chọn vào gợi ý của lệnh <strong>switch</strong>, IDE phát sinh code cho chúng ta như sau:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" class=\"lightbox\" title=\"4.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/4.png?raw=true\" width=\"690\" height=\"380\"><div class=\"meta\">\n<span class=\"filename\">4.png?raw=true</span><span class=\"informations\">696x384</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, các bạn chỉ cần gõ thay thế từ <code>switch_on</code> bằng tên của biến <strong>enum</strong> rồi nhấn <strong>phím mũi tên sang phải</strong>, IDE sẽ liệt kê tất cả các <strong>case</strong> ứng với tất cả giá trị được định nghĩa bên trong kiểu của biến enum đó.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/5.png?raw=true\" width=\"643\" height=\"390\"></p>\n\n<p>Đây cũng là một ưu điểm của Visual studio 2015. Bây giờ chúng ta trở lại với bài học.</p>\n\n<p>Thêm một ví dụ khác cũng có thể có ích. Xét đoạn chương trình dưới đây:</p>\n\n<p></p><pre><code class=\"lang-auto\">bool initialize() {\n\n\t//init all component\n\t//if something wrong, return false\n\treturn false;\n}\n\nbool loadResource() {\n\n\t//load data from file\n\t//if something wrong, return false\n\treturn false;\n}\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn -1;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn -2;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn -3;\n\t}\n\n\treturn 0;\n}</code></pre>\n\n<p>Đoạn chương trình này sử dụng những giá trị âm để biểu diễn các lỗi có thể xảy ra. Mỗi chức năng trong chương trình gây ra lỗi thì chương trình sẽ trả về một giá trị khác nhau. Tuy nhiên, những con số cụ thể thường không mang nhiều ý nghĩa, do đó chúng ta thay thế chúng bằng kiểu enum để code của chúng ta rõ ràng hơn.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ReturnValue\n{\n\tSUCCESS = 0,\n\tINITIALIZE_ERROR = -1,\n\tLOAD_RESOURCE_ERROR = -2,\n\tRUN_TIME_ERROR = -3\n};\n\nint main()\t{\n\n\tif (initialize() == false) {\n\t\treturn INITIALIZE_ERROR;\n\t}\n\t\n\tif (loadResource() == false) {\n\t\treturn LOAD_RESOURCE_ERROR;\n\t}\n\n\tbool isRunning = true;\n\twhile (isRunning) {\n\n\t\t//Application event loop\n\t\treturn RUN_TIME_ERROR;\n\t}\n\n\treturn SUCCESS;\n}</code></pre>\n\n<p>Khi chúng ta viết một game với nhân vật có nhiều trạng thái khác nhau, mỗi trạng thái sẽ khiến nhân vật phản ứng bằng một hành động tương ứng, chúng ta có thể làm như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum BossState\n{\n\tIDLING,\n\tRUNNING,\n\tJUMPING,\n\tDYING\n};\n\nBossState state;\n\nvoid initBoss()\n{\n\t//init something\n\tstate = IDLING;\n}\n\nvoid attack()\n{\n\t//............\n}\n\nvoid activated()\t\n{\n\t//............\n}\n\nvoid updateAnimation(BossState state)\t\n{\n\tswitch(state)\n\t{\n\tcase IDLING:\n\t\tstandStill();\n\t\tbreak;\n\t\t\n\tcase RUNNING:\n\t\tsetRunningAnimation();\n\t\tbreak;\n\t\t\n\tcase JUMPING:\n\t\tsetJumpingAnimation();\n\t\tbreak;\n\t\t\n\tcase DYING:\n\t\tsetDyingAnimation();\n\t\tbreak;\n\t\t\n\tdefault;\n\t\tbreak;\n\t}\n}</code></pre>\n\n<p>Như các bạn thấy, kiểu enum được áp dụng khá thường xuyên trong thực tế. Trên đây chỉ là một vài ví dụ minh họa cho việc sử dụng kiểu enum thường gặp.</p>\n\n<h5>Phạm vi sử dụng kiểu enum</h5>\n\n<p>Trong một file chương trình, phạm vi sử dụng của một khai báo enum cũng tương tự như phạm vi sử dụng khi khai báo biến. Nếu chúng ta muốn sử dụng kiểu enum tại tất cả các khối lệnh trong chương trình, chúng ta nên khai báo kiểu enum phía trên cùng của các khối lệnh (giống như khai báo biến toàn cục). Ví dụ:</p>\n\n<p></p><pre><code class=\"lang-auto\">enum ItemTypes\n{\n\tLAPTOP,\n\tDESKTOP,\n\tMOBILE,\n\tNETWORK\n};\n\nvoid foo()\n{\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; LAPTOP &lt;&lt; endl;\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/1.png?raw=true\" width=\"690\" height=\"276\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">889x356</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Vì kiểu <strong>ItemTypes</strong> khai báo bên ngoài các khối lệnh, nên chúng ta có thể sử dụng tại các khối lệnh của các hàm bên dưới. Một trường hợp khác, khi mà enum chỉ được định nghĩa trong một khối lệnh của hàm nào đó:</p>\n\n<p></p><pre><code class=\"lang-auto\">void foo()\n{\n\tenum ItemTypes\n\t{\n\t\tLAPTOP,\n\t\tDESKTOP,\n\t\tMOBILE,\n\t\tNETWORK\n\t};\n\n\tcout &lt;&lt; MOBILE &lt;&lt; endl;\t\n}\n\nint main()\t{\n\t\n\tcout &lt;&lt; DESKTOP &lt;&lt; endl; //error\n\n\treturn 0;\n}</code></pre>\n\n<p><strong>Compiler</strong> sẽ thông báo lỗi DESKTOP trong hàm main chưa được định nghĩa, vì chúng ta không thể truy xuất các giá trị của kiểu <strong>ItemTypes</strong> trong hàm foo từ hàm main được.</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/2.png?raw=true\" width=\"676\" height=\"381\"></p>\n\n<p>Thông thường, chúng ta nên định nghĩa kiểu dữ liệu enum bên ngoài các khối lệnh, vì việc khai báo kiểu enum mới không yêu cầu cấp phát bộ nhớ nên không hề ảnh hưởng đến tài nguyên của hệ thống.</p>\n\n<p>Việc định nghĩa kiểu enum bên ngoài các khối lệnh không những có thể sử dụng bất cứ đâu trong chương trình mà còn có thể sử dụng tại file chương trình khác của dự án. Chúng ta sẽ tìm hiểu về cách quản lý dự án với nhiều file C++ trong các bài học sau.</p>\n\n<h3>Enum class</h3>\n\n<p>Việc sử dụng kiểu enum tự định nghĩa đã giúp chúng ta tổ chức chương trình rõ ràng, dễ đọc hơn. Nhưng khi một chương trình có nhiều enum được định nghĩa, sẽ có nhiều giá trị trùng nhau giữa các enum khác nhau, và nó có thể làm cho chương trình không có ý nghĩa gì mặc dù đã sử dụng kiểu enum.</p>\n\n<p></p><pre><code class=\"lang-auto\">enum Color\n{\n\tRED,\n\tGREEN,\n\tBLUE\n};\n\nenum Fruit\n{\n\tAPPLE,\n\tBANANA\n};\n\nint main() {\n\n\tColor color = GREEN;\n\tFruit fruit = BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Trong hàm main, <strong>compiler</strong> sẽ so sánh <strong>color và fruit</strong> như 2 giá trị số nguyên, khi Color::GREEN và Fruit::BANANA đều được gán giá trị là 2 thì color và fruit được compiler cho là bằng nhau. Đây là một trường hợp ngoài ý muốn khi sử dụng kiểu enum. Điều này xảy ra vì enum Color và enum Fruit có thể truy cập đồng thời trong cùng một khối lệnh.</p>\n\n<p>Điều chúng ta mong muốn lúc này là biến của kiểu Color chỉ được so sánh với giá trị trong enum Color, và biến kiểu Fruit chỉ có thể so sánh với giá trị trong enum Fruit. Chuẩn C++11 đã hổ trợ cho chúng ta một khái niệm enum mới, đó là enum class (có thể gọi là scoped enumeration). Mình sử dụng lại ví dụ trên nhưng thay thế enum bằng enum class:</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" class=\"lightbox\" title=\"6.png?raw=true\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/9-kieu-du-lieu-tu-dinh-nghia/9-0-kieu-liet-ke/6.png?raw=true\" width=\"690\" height=\"314\"><div class=\"meta\">\n<span class=\"filename\">6.png?raw=true</span><span class=\"informations\">868x396</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Như các bạn thấy, compiler đã thông báo lỗi ở câu lệnh if, đồng thời cũng thông báo lỗi ở 2 câu lệnh gán giá trị cho 2 biến color và fruit. Vì việc sử dụng enum class cần phải cung cấp thêm cho compiler biết là giá trị của enum đó được định nghĩa bên trong enum nào, phải cung cấp cho compiler một cái tên của kiểu enum đứng trước giá trị chúng ta muốn sử dụng (ví dụ Color::RED).</p>\n\n<p>Các bạn đã được biết toán tử \"::\" là toán tử chỉ phạm vi truy cập. Khi mình sử dụng Color::RED có nghĩa là RED được định nghĩa bên trong khối lệnh của Color (không cần biết Color là gì, chúng ta chỉ biết RED nằm trong Color). Việc sử dụng enum class đòi hỏi lập trình viên phải chỉ ra đích danh của kiểu enum chứa giá trị cần sử dụng. Mình sửa lại đoạn chương trình trên như sau:</p>\n\n<p></p><pre><code class=\"lang-auto\">int main() {\n\tColor color = Color::GREEN;\n\tFruit fruit = Fruit::BANANA;\n\n\tif (color == fruit)\n\t\tcout &lt;&lt; \"It's the same\" &lt;&lt; endl;\n\telse\n\t\tcout &lt;&lt; \"It's not the same\" &lt;&lt; endl;\n\n\treturn 0;\n}</code></pre>\n\n<p>Đến đây, 2 phép gán đã có thể thực thi được nhưng câu lệnh if thì còn lỗi. Đó là do compiler đã phát hiện ra 2 biến này có 2 kiểu dữ liệu khác nhau, 1 cái là của kiểu Color trong khi cái kia là kiểu Fruit. Compiler không chấp nhận điều này nên đưa ra thông báo lỗi.</p>\n\n<p>Thậm chí khi các bạn sử dụng biến kiểu enum class để so sánh với một số nguyên cũng không được cho phép.</p>\n\n<p></p><pre><code class=\"lang-auto\">if (color == 2) // error\n{\n\t\n}</code></pre>\n\n<p>Chỉ có một cách duy nhất để sử dụng enum class là sử dụng giá trị trong chính enum của nó.</p>\n\n<p></p><pre><code class=\"lang-auto\">if(color == Color::GREEN)\n{\n\t//OK\n}</code></pre>\n\n<p>Nếu các bạn sử dụng compiler C++11 trở lên, không có lý do nào mà các bạn sử dụng kiểu enum thông thường thay vì sử dụng enum class.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã tìm hiểu một số khái niệm về kiểu dữ liệu tự định nghĩa bằng từ khóa enum:</p>\n\n<ul>\n<li>Cú pháp khai báo, giá trị khởi tạo cho các thành phần của kiểu enum.</li>\n<li>Một số cách sử dụng enum thường gặp.</li>\n<li>Phân biệt enum và enum class trong chuẩn C++11.</li>\n<li>Visual studio hổ trợ cho chúng ta liệt kê tất cả các giá trị cần so sánh trong mệnh đề switch-case. Điều này có nghĩa chúng ta nên sử dụng switch-case thay vì if-else khi cần phân loại biến kiểu enum.</li>\n</ul>\n\n<p>Sử dụng kiểu enum không làm cho chương trình của các bạn chạy nhanh hơn, cũng không làm cho chương trình của các bạn ngắn gọn hơn, nó chỉ có tác dụng duy nhất là làm cho chương trình của các bạn rõ ràng hơn.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n","__filename":"generated/32760.md","__url":"/9/0-kieu-liet-ke-enum/","__resourceUrl":"/9/0-kieu-liet-ke-enum/index.html","__dataUrl":"/9/0-kieu-liet-ke-enum/index.html.860576a918a655f1f53e822bc51c8bf5.json"}