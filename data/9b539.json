{"head":{"title":"8.11 Các vấn đề thường gặp khi sử dụng con trỏ","route":"8/11-cac-van-de-thuong-gap-khi-su-dung-con-tr","id":32133,"description":"} } } char  getName(char fullname) { } int main()\t{ } } } } int main()\t{ } int main() { \tint \\*p = newIntValue(0); } int \\*pTemp = ptr; ptr…"},"body":"<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n<p>Trong bài học này, chúng ta sẽ cùng tìm hiểu về những lỗi thường gặp ở những bạn mới học lập trình khi sử dụng con trỏ trong chương trình. Những lỗi này thường xuất hiện do các bạn mới học chưa hiểu rõ cách quản lý vùng nhớ trong chương trình, do cách tổ chức chương trình chưa hợp lý, hoặc do sơ ý... Trong đó, một số lỗi không nghiêm trọng sẽ không gây ảnh hưởng nhiều đến hoạt động của chương trình, một số lỗi nghiêm trọng có thể làm chương trình phải kết thúc ngay lập tức. Dù lỗi gây có có nghiêm trọng hay không, chúng ta chủ động ngăn chặn thì vẫn tốt hơn.</p>\n<h5>Con trỏ trỏ đến vùng nhớ nằm ngoài phạm vi chương trình đang quản lý</h5>\n<p>Mình có đoạn chương trình như sau:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\n{\n\t//allocate memory on Heap\n\tint *p = new int;\n<pre><code>//p point to somewhere\np -= 10000;\n\n//dereference to the area of other program\n*p = 1;\n\nsystem(\"pause\");\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Đầu tiên, chương trình cấp phát một vùng nhớ có kích thước <strong>4 bytes</strong> trên phân vùng <strong>Heap</strong> và cho con trỏ nắm giữ địa chỉ trả về của toán tử <strong>new</strong>. Sau đó, mình lại cho con trỏ p trỏ lung tung trên bộ nhớ ảo và cố tình thay đổi nội dung bên trong vùng nhớ mới trỏ đến. Khi để ở chế độ <strong>Debug</strong>, Visual Studio sẽ chặn chương trình của chúng ta lại và đưa ra cảnh báo. Nhưng nếu chúng ta chuyển sang chế độ <strong>Release</strong> và <strong>build</strong> ra sản phẩm thành một phần mềm, chạy phần mềm này sẽ gây <strong>crash</strong> và phần mềm phải kết thúc ngay lập tức.</p>\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/0.png?raw=true\" class=\"lightbox\" title=\"0.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/0.png?raw=true\" width=\"690\" height=\"302\"><div class=\"meta\">\n<span class=\"filename\">0.png?raw=true</span><span class=\"informations\">1233x540</span><span class=\"expand\"></span>\n</div></a></div></p>\n<p>Thật ra cũng không có ai rãnh rỗi đến mức gán địa chỉ sai cho con trỏ, điều mà mình muốn nói ở đây là khi chương trình chúng ta viết bị <strong>crash</strong> khi chạy, có thể lỗi này đến từ việc gán địa chỉ không hợp lý.</p>\n<p>Trong thực tế, lỗi này sẽ xuất hiện dưới một hình thức khác. Ví dụ:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\n{\n\tint *p = new int[10];\n\tcout &lt;&lt; p &lt;&lt; endl;\n<pre><code>delete[] p;\n\ncout &#x26;lt;&#x26;lt; p &#x26;lt;&#x26;lt; endl;\n\n_sleep(10000);\n\nfor (int i = 0; i &#x26;lt; 10; i++)\n    cin &#x26;gt;&#x26;gt; p[i];\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Chương trình này yêu cầu cấp phát 1 dãy địa chỉ có kích thước <strong>40 bytes trên Heap</strong>. Sau đó in ra địa chỉ của vùng nhớ vừa được cấp phát thành công. Tiếp theo, mình không muốn sử dụng vùng nhớ này nữa nên mình trả lại cho hệ điều hành thông qua toán tử <strong>delete</strong>. Trên thực tế, có thể mình sẽ không giải phóng vùng nhớ ngay lập tức mà sử dụng xong rồi mới giải phóng nó đi. Sau khi giải phóng vùng nhớ đó, mình in ra lại địa chỉ mà con trỏ p đang nắm giữ thì thấy p vẫn đang trỏ đến địa chỉ mà mình đã giải phóng. Vậy là chúng ta đã gặp phải lỗi mà mình đưa ra ở ví dụ đầu tiên trong bài học này, đó là con trỏ trỏ đến một vùng nhớ không chịu sử quản lý của chương trình. Lúc này, mình chưa <strong>dereference</strong> đến vùng nhớ đó ngay lập tức mà vẫn cho chương trình tiếp tục thực thi. Cuối cùng, mình không nhớ rằng vùng nhớ ban đầu đã được giải phóng ở đâu đó nên vẫn tiếp tục sử dụng bằng cách nhập dữ liệu vào đó thông qua con trỏ p.</p>\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/1.png?raw=true\" width=\"690\" height=\"290\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">1281x539</span><span class=\"expand\"></span>\n</div></a></div></p>\n<p>Kết quả là phần mềm đang chạy thì bị <strong>crash</strong> vì có thể hệ điều hành đã cấp phát vùng nhớ đã được giải phóng cho phần mềm khác sử dụng. Khi chạy chương trình dưới chế độ Debug trong Visual Studio, lỗi này có thể không phát hiện được do nó vẫn chạy bình thường mà không có thông báo mà cũng không bị crash. Điều này làm chúng ta tưởng rằng chương trình hoạt động tốt, và <strong>build</strong> nó ra thành phần mềm lỗi.</p>\n<p>Để khắc phục trường hợp này, chúng ta nên cho con trỏ quản lý vùng nhớ được cấp phát trỏ về <strong>NULL</strong> ngay sau khi giải phóng vùng nhớ đó.</p>\n<p></p><pre><code class=\"lang-auto\">int main()\n{\n\tint *p = NULL;\n\tp = new int[10];\n\tcout &lt;&lt; p &lt;&lt; endl;\n<pre><code>delete[] p;\np = NULL;\n\ncout &#x26;lt;&#x26;lt; p &#x26;lt;&#x26;lt; endl;\n\n_sleep(10000);\n\nif (p != NULL) {\n\n    for (int i = 0; i &#x26;lt; 10; i++)\n        cin &#x26;gt;&#x26;gt; p[i];\n}\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Bất cứ khi nào sử dụng vùng nhớ thông qua con trỏ, chúng ta cũng nên kiểm tra xem con trỏ có khác NULL hay không. Nếu con trỏ khác NULL thì chúng ta hiểu rằng vùng nhớ đó vẫn chưa được giải phóng. Đây chỉ là một cách quy ước mình tự đặt ra giúp cách viết chương trình của mình an toàn hơn, cách của mình có thể khác với một số lập trình viên khác.</p>\n<p>Nhưng lỗi này còn có thể xuất hiện dưới một hình thức khác nữa. Đó là sử dụng 2 con trỏ cùng trỏ đến một vùng nhớ trong chương trình.</p>\n<p></p><pre><code class=\"lang-auto\">#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n<p>char <em> getName(char </em>fullname) {\n\nif (fullName == NULL)\nreturn NULL;\n\nchar *pTemp = strrchr(fullname, ' ');</p>\n<pre><code>if (pTemp == NULL)\n    return fullname;\nelse\n    return pTemp + 1;\n</code></pre>\n<p>}</p>\n<p>int main()\t{</p>\n<pre><code>char *fullName = new char[50];\n\ncout &#x26;lt;&#x26;lt; \"Enter your full name: \";\ncin.getline(fullName, 50);\n\ncout &#x26;lt;&#x26;lt; \"Your last name is: \";\nchar *name = getName(fullName);\n\ndelete[] fullName;\n\ncout &#x26;lt;&#x26;lt; name &#x26;lt;&#x26;lt; endl;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Đoạn chương trình này thực hiện công việc yêu cầu người dùng nhập vào đầy đủ họ và tên, sau đó in ra tên mà người dùng vừa nhập vào (bỏ qua họ và tên đệm). Nhưng trước đó, mình cần yêu cầu cấp phát một vùng nhớ trên <strong>Heap</strong> đủ để người dùng nhập vào họ tên.</p>\n<p>Cách hoạt động của hàm getName như sau:</p>\n<p>(1) Nhận vào đối số là địa chỉ của một địa chỉ của một chuỗi kí tự, trong trường hợp này là full name của người dùng.<br>(2) Sử dụng hàm <strong>strrchr</strong> trong thư viện <strong>cstring</strong> để trả về địa chỉ xuất hiện kí tự khoảng trắng cuối cùng trong chuỗi kí tự.<br>(3) Nếu không có kí tự khoảng trắng thì trả về địa chỉ đầu tiên của chuỗi kí tự (cho rằng người dùng chỉ nhập tên chứ không nhập họ và tên đệm), nếu có xuất hiện khoảng trắng thì trả về địa chỉ của phần tử đứng sau khoảng trắng.</p>\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/2.png?raw=true\" class=\"lightbox\" title=\"2.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/2.png?raw=true\" width=\"690\" height=\"259\"><div class=\"meta\">\n<span class=\"filename\">2.png?raw=true</span><span class=\"informations\">958x360</span><span class=\"expand\"></span>\n</div></a></div></p>\n<p>Như chúng ta thấy, địa chỉ của tên người dùng được trả về từ hàm <strong>getName</strong> cũng thuộc phạm vi vùng nhớ được cấp phát và đang được quản lý thông qua con trỏ <strong>fullName</strong>. Tuy nhiên, trong đoạn chương trình trên, lập trình viên này đã nghĩ rằng sau khi sử dụng xong hàm getName thì không cần sử dụng đến con trỏ <strong>fullName</strong> nữa, vậy là <strong>delete</strong> luôn vùng nhớ mà con trỏ <strong>fullName</strong> đang nắm giữ, dẫn đến việc con trỏ <strong>name</strong> đã trỏ tới một vùng nhớ không còn thuộc quyền quản lý của chương trình nữa. Và kết quả cho ra không đúng với mong đợi:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/3.png?raw=true\" width=\"579\" height=\"384\"></p>\n<p>Tuy nhiên, khi mình chạy chương trình trên, kết quả vẫn đúng. Đó là do mình sử dụng vùng nhớ đó ngay sau khi trả lại cho hệ điều hành. Hệ điều hành lúc này vẫn chưa tác động gì đến vùng nhớ đã được giải phóng, hoặc nếu đã có cấp phát cho chương trình khác thì chương trình đó vẫn chưa thay đổi nội dung trong phạm vi này. Bây giờ mình giả sử chúng ta thực thi công việc khác, sau một vài giây sau mới cần in ra kết quả thì sẽ dễ phát hiện lỗi hơn:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n<pre><code>char *fullName = new char[50];\n\ncout &#x26;lt;&#x26;lt; \"Enter your full name: \";\ncin.getline(fullName, 50);\n\ncout &#x26;lt;&#x26;lt; \"Your last name is: \";\nchar *name = getName(fullName);\n\ndelete[] fullName;\n\n_sleep(5000);\ncout &#x26;lt;&#x26;lt; name &#x26;lt;&#x26;lt; endl;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-11-cac-van-de-thuong-gap-khi-su-dung-con-tro/4.png?raw=true\" width=\"579\" height=\"384\"></p>\n<p>Để khắc phục trường hợp này, chúng ta cần xác định rằng khi nào thực sự không còn sử dụng đến vùng nhớ nào đó thì mới giải phóng. Sửa lại đoạn chương trình trên như sau:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n<pre><code>char *fullName = new char[50];\n\ncout &#x26;lt;&#x26;lt; \"Enter your full name: \";\ncin.getline(fullName, 50);\n\ncout &#x26;lt;&#x26;lt; \"Your last name is: \";\nchar *name = getName(fullName);\ncout &#x26;lt;&#x26;lt; name &#x26;lt;&#x26;lt; endl;\n\ndelete[] fullName;\nfullName = NULL;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Hoặc chúng ta vẫn muốn sử dụng tiếp vùng nhớ quản lý bởi con trỏ <strong>fullName</strong> mà không muốn sử dụng đến con trỏ <strong>name</strong> nữa, chúng ta nên sửa lại như sau:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n<pre><code>char *fullName = new char[50];\n\ncout &#x26;lt;&#x26;lt; \"Enter your full name: \";\ncin.getline(fullName, 50);\n\ncout &#x26;lt;&#x26;lt; \"Your last name is: \";\nchar *name = getName(fullName);\ncout &#x26;lt;&#x26;lt; name &#x26;lt;&#x26;lt; endl;\n\nname = NULL;\n\n//keep using fullName\n//and then deallocate it\n\ndelete[] fullName;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Con trỏ <strong>name</strong> chỉ trỏ đến địa chỉ bên trong vùng nhớ được cấp phát cho con trỏ <strong>fullName</strong>, nên chúng ta không nên sử dụng toán tử <strong>delete</strong> cho con trỏ <strong>name</strong>.</p>\n<p>Trường hợp con trỏ trỏ đến vùng nhớ không chịu sự quản lý của chương trình cũng thường xuất hiện khi trả về địa chỉ của biến cục bộ trong hàm.</p>\n<p></p><pre><code class=\"lang-auto\">int * newIntValue(int value = 0)\n{\n\tint n = value;\n\treturn &amp;n;\n}\n<p>int main()\t{</p>\n<pre><code>int *pInt = newIntValue(0);\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Như các bạn đã biết, biến cục bộ sẽ bị đưa ra khỏi <strong>Stack</strong> khi ra khỏi phạm vi khối lệnh. Dó đó, địa chỉ của biến n trong hàm <strong>newIntValue</strong> vẫn được trả về trước khi bị hủy. Chúng ta nên thay bằng <strong>Dynamic memory allocation:</strong></p>\n<p></p><pre><code class=\"lang-auto\">int * newIntValue(int value = 0)\n{\n\treturn new int(value);\n}\n<p>int main()\n{\nint *p = newIntValue(0);\n\ndelete p;\n\nreturn 0;\n}</code></pre></p>\n<h5>memory leak</h5>\n<p><strong>Memory leak</strong> là trường hợp cấp phát vùng nhớ cho chương trình (thường là cấp phát trên <strong>Heap</strong>) nhưng vùng nhớ không được sử dụng hoặc không được giải phóng. Điều này làm giảm dung lượng bộ nhớ có thể sử dụng được cho những chương trình khác, khiến các chương trình hoạt động chậm hơn hoặc có thể làm crash chương trình. </p>\n<p>Đây là một ví dụ thường gặp ở những lập trình viên mới học về kỹ thuật <strong>Dynamic memory allocation:</strong></p>\n<p></p><pre><code class=\"lang-auto\">int *ptr = new int[10];\n//................\nptr = NULL;</code></pre>\n<p>Trong đoạn chương trình này, lập trình viên tự ý cho con trỏ ptr trỏ đi nơi khác. Điều này dẫn đến việc vùng nhớ được cấp phát trước đó không thể quản lý được nữa. Muốn quản lý một vùng nhớ được cấp phát trên Heap, chúng ta cần sử dụng ít nhất một con trỏ. Nhưng trong trường hợp này, không còn con trỏ nào được dùng để quản lý vùng nhớ đã được cấp phát. Do đó, vùng nhớ được cấp phát chỉ có thể được giải phóng khi toàn bộ chương trình kết thúc.</p>\n<p>Để khắc phục trường hợp này, chúng ta cần có một con trỏ khác thay thế vị trí của con trỏ <strong>ptr</strong> trước khi cho con trỏ <strong>ptr</strong> trỏ đi nơi khác:</p>\n<p></p><pre><code class=\"lang-auto\">int *ptr = new int[10];\n//.................\n<p>int *pTemp = ptr;\nptr = NULL;</code></pre></p>\n<p>Việc <strong>resize</strong> kích thước của vùng nhớ cũng có thể gây ra lỗi <strong>memory leak</strong> nếu sơ ý:</p>\n<p></p><pre><code class=\"lang-auto\">void resizeArray(int *&amp;p, int oldLength, int newLength)\n{\n\tint *pTemp = p;\n\tp = allocateArray(newLength);\n\t\n\t//copy data\n\tif(oldLength &lt; newLength)\n\t{\n\t\tfor(int i = 0; i &lt; oldLength; i++)\n\t\t{\n\t\t\tp[i] = pTemp[i];\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i &lt; newLength; i++)\n\t\t{\n\t\t\tp[i] = pTemp[i];\n\t\t}\n\t}\n}\n<p>int main()\t{</p>\n<pre><code>int length = 10;\nint *p = new int[length];\n\nint newLength = 20;\nresizeArray(p, length, newLength);\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Khi cấp phát lại vùng nhớ, con trỏ p được gán vào địa chỉ mới, vùng nhớ ban đầu được con trỏ <strong>pTemp</strong> quản lý, nhưng khi ra khỏi hàm thì con trỏ pTemp bị hủy (vì <strong>pTemp</strong> cũng là biến cục bộ, được cấp phát trên <strong>Stack</strong>). Như vậy, vùng nhớ cũ không còn được quản lý nữa.</p>\n<p>Chúng ta nên sửa lại đoạn chương trình trên như sau:</p>\n<p></p><pre><code class=\"lang-auto\">void resizeArray(int *&amp;p, int oldLength, int newLength)\n{\n\tint *pTemp = p;\n\tp = allocateArray(newLength);\n\t\n\t//copy data\n\tif(oldLength &lt; newLength)\n\t{\n\t\tfor(int i = 0; i &lt; oldLength; i++)\n\t\t{\n\t\t\tp[i] = pTemp[i];\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor(int i = 0; i &lt; newLength; i++)\n\t\t{\n\t\t\tp[i] = pTemp[i];\n\t\t}\n\t}\n\t\n\tdelete[] pTemp;\n}\n<p>int main()\t{</p>\n<pre><code>int length = 10;\nint *p = new int[length];\n\nint newLength = 20;\nresizeArray(p, length, newLength);\n\ndelete[] p;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Còn một trường hợp thường thấy nữa, đó là việc sử dụng sai toán tử delete cho con trỏ:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n<pre><code>int *p = new int[10];\n\ndelete p;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<p>Như các bạn thấy, chúng ta yêu cầu cấp phát một dãy vùng nhớ cho 10 phần tử kiểu <strong>int</strong>, nhưng khi giải phóng thì sử dụng toán tử <strong>delete</strong> để giải phóng một biến đơn. Visual Studio không báo lỗi cho trường hợp này, do đó lỗi này thường cũng khó nhận ra. Chúng ta nên sửa lại như sau:</p>\n<p></p><pre><code class=\"lang-auto\">int main()\t{\n<pre><code>int *p = new int[10];\n\ndelete[] p;\n\nreturn 0;\n</code></pre>\n<p>}</code></pre></p>\n<hr>\n<h3>Tổng kết</h3>\n<p>Trong bài học này, chúng ta đã cùng tìm hiểu một số nguyên nhân gây ra lỗi khi sử dụng con trỏ trong ngôn ngữ C++. Đây là một số lỗi thường gặp ở những người mới học lập trình C++. Như các bạn thấy, việc quản lý vùng nhớ một cách thủ công khá là phức tạp. Trong chuẩn C++ mới đã có hổ trợ cho chúng ta <strong>Smart Pointer</strong> giúp chúng ta tránh được những lỗi thường gặp này. Chúng ta sẽ tìm hiểu về <strong>Smart Pointer</strong> trong những bài học sau.</p>\n<hr>\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn </p>\n<p><strong><a href=\"http://www.daynhauhoc.com\">www.daynhauhoc.com</a></strong></p>\n","__filename":"generated/32133.md","__url":"/8/11-cac-van-de-thuong-gap-khi-su-dung-con-tr/","__resourceUrl":"/8/11-cac-van-de-thuong-gap-khi-su-dung-con-tr/index.html","__dataUrl":"/data/9b539.json"}