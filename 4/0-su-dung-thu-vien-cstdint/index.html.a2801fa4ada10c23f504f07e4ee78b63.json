{"head":{"title":"4.0 Sử dụng thư viện cstdint","route":"4/0-su-dung-thu-vien-cstdint","id":30016,"description":"int main()\t{ } //in ra kết quả là giá trị lớn nhất của 5 số vừa nhập //in ra kết quả là giá trị nhỏ nhất của 5 số vừa nhập int main()\t {…"},"body":"<html><head></head><body><p>Chào các bạn! Trong chương này, mình muốn giới thiệu đến các bạn một số kiểu dữ liệu khác với những gì các bạn đã được học và sử dụng trong các bài học trước, ngoài ra còn có thêm một số từ khóa về kiểu dữ liệu thường dùng trong chuẩn <strong>C++11</strong>.</p>\n\n<p>Trong bài học này, chúng ta sẽ tìm hiểu cách sử dụng thư viện <strong>cstdint</strong>, một thư viện được chuẩn <strong>C++99</strong> định nghĩa và chúng có thể được sử dụng trên nhiều nền tảng. Nhưng trước hết, chúng ta cùng nhìn lại những kiểu dữ liệu số nguyên mà chúng ta từng biết.</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">short</span>\t\t<span class=\"hljs-number\">_</span><span class=\"hljs-keyword\">short</span>; \t\t<span class=\"hljs-comment\">//2 bytes: -32768 to 32767</span>\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span>\t\t<span class=\"hljs-number\">_u</span>_short; \t\t<span class=\"hljs-comment\">//2 bytes: 0 to 65535</span>\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">int</span>\t\t<span class=\"hljs-number\">_</span><span class=\"hljs-keyword\">int</span>; \t\t\t<span class=\"hljs-comment\">//4 bytes: -2147483648 to 2147483647</span>\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span>\t\t<span class=\"hljs-number\">_u</span>_int; \t\t<span class=\"hljs-comment\">//4 bytes: 0 to 4294967295</span>\n<span class=\"hljs-keyword\">signed</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span>\t        <span class=\"hljs-number\">_l</span>ong_long; \t<span class=\"hljs-comment\">//8 bytes: -9223372036854775808 to 9223372036854775807</span>\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span>\t<span class=\"hljs-number\">_u</span>_long_long; \t<span class=\"hljs-comment\">//8 bytes: 0 to 18446744073709551615</span></code></pre>\n\n<p><em>Lưu ý: Khi khai báo biến không có từ khóa <strong>unsigned</strong> đứng trước, compiler sẽ mặc định đặt từ khóa <strong>signed</strong> trước kiểu dữ liệu. (kiểu <strong>signed</strong> có nhận giá trị âm, kiểu <strong>unsigned</strong> chỉ nhận giá trị từ 0 trở lên)</em> </p>\n\n<p>Khi làm việc với một số hệ thống cũ, kiểu dữ liệu <strong>int</strong> và <strong>unsigned int</strong> chỉ có kích thước 2 bytes chứ không phải 4 bytes như Visual studio 2015 đã định nghĩa.</p>\n\n<p><strong><em>Các bạn đã nhận ra những rắc rối mà chúng ta sẽ gặp phải khi làm việc với kiểu số nguyên rồi phải không?</em></strong> Trong khi chúng ta cần phải nhớ rất nhiều thứ trong ngôn ngữ lập trình C++, chúng ta bây giờ còn phải nhớ cả kích thước của từng kiểu dữ liệu số nguyên khi chúng được định nghĩa với những cái tên hoàn toàn khác nhau (<strong>short</strong>, <strong>int</strong>, <strong>long</strong>, ...).</p>\n\n<p>Đó chính là lý do thư viện <strong>cstdint</strong> xuất hiện, nó đảm bảo rằng biến (variable) kiểu số nguyên mà bạn chọn chiếm cùng kích thước vùng nhớ trên mọi kiến trúc hệ thống.</p>\n\n<h3>Fixed-width integers</h3>\n\n<p>Trong thư viện này, chúng ta hiện tại chỉ quan tâm đến một số kiểu dữ liệu số nguyên thông dụng sau:</p>\n\n<pre><code class=\"hljs language-lsl\"><span class=\"hljs-comment\">//Name\t\t//Type\t\t\t\t//Range</span>\nint8_t \t\t<span class=\"hljs-number\">1</span> byte signed\t\t<span class=\"hljs-number\">-128</span> to <span class=\"hljs-number\">127</span>\nuint8_t\t\t<span class=\"hljs-number\">1</span> byte unsigned\t\t<span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">255</span>\nint16_t\t\t<span class=\"hljs-number\">2</span> bytes signed\t\t<span class=\"hljs-number\">-32768</span> to <span class=\"hljs-number\">32767</span>\nuint16_t\t<span class=\"hljs-number\">2</span> bytes unsigned\t<span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">65535</span>\nint32_t\t\t<span class=\"hljs-number\">4</span> bytes signed\t\t<span class=\"hljs-number\">-2147483648</span> to <span class=\"hljs-number\">2147483647</span>\nuint32_t\t<span class=\"hljs-number\">4</span> bytes unsigned\t<span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">4294967295</span>\nint64_t\t\t<span class=\"hljs-number\">8</span> bytes signed\t\t<span class=\"hljs-number\">-9223372036854775808</span> to <span class=\"hljs-number\">9223372036854775807</span>\nuint64_t\t<span class=\"hljs-number\">8</span> bytes unsigned\t<span class=\"hljs-number\">0</span> to <span class=\"hljs-number\">18446744073709551615</span></code></pre>\n\n<p><strong>int8_t</strong> là kiểu dữ liệu số nguyên có dấu với độ lớn 8 bits (bit là đơn vị lưu trữ nhỏ nhất trong máy tính), và 1 byte độ lớn vùng nhớ máy tính tương đương với 8 bits. Tương tự cho các kiểu dữ liệu khác như <strong>int64_t</strong> là kiểu số nguyên 8 bytes (64 bits bằng 8 bytes).</p>\n\n<p>Khi sử dụng cách khai báo kiểu dữ liệu này, chúng ta biết chính xác kích thước vùng nhớ mà chúng ta sử dụng là bao nhiêu, từ đó dễ dàng suy luận ra phạm vi giá trị mà biến có thể chứa hơn.</p>\n\n<p>Để sử dụng những cách khai báo kiểu dữ liệu này, các bạn chỉ cần đơn giản include thư viện <strong>cstdint</strong> tại phần khai báo thư viện sử dụng. Ví dụ:</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdint></span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\t</span>{\n\t\n\t<span class=\"hljs-keyword\">int32_t</span> var(<span class=\"hljs-number\">5</span>);\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">another_integer</span><span class=\"hljs-params\">(var)</span></span>;\n\n\t<span class=\"hljs-keyword\">if</span>(var == another_integer)\t{\n\t\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"(var == another_variable) is true\"</span> &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n\t}\n\n\tsystem(<span class=\"hljs-string\">\"pause\"</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Như các bạn thấy ở ví dụ trên, hai biến <strong>var</strong> và <strong>another_integer</strong> tuy khác cách khai báo nhưng chúng có cùng kích thước bộ nhớ và cùng lưu trữ giá trị số nguyên, nên mình hoàn toàn có thể sử dụng hai biến này với mục đích giống nhau. Điều khác biệt duy nhất là khi nhìn vào biến <strong>var</strong>, ta dễ dàng nhận biết kích thước vùng nhớ mà biến đó đang chiếm giữ hơn.</p>\n\n<h3>Macros</h3>\n\n<p>Thư viện <strong>cstdint</strong> định nghĩa cho chúng ta một số <strong>macro</strong> để chúng ta dễ dàng lấy giá trị cực đại (max value) hoặc cực tiểu (min value) của mỗi kiểu dữ liệu số nguyên chúng ta vừa học ở trên.</p>\n\n<p><strong>Macro</strong> là gì? Nó là một cái tên mà lập trình viên đề ra. Bất cứ khi nào cái tên đó được sử dụng trong chương trình, nó thay thế bằng nội dung mà <strong>macro</strong> đó định nghĩa. Để định nghĩa một macro, các bạn sử dụng chỉ thị <code>#define</code> như sau:</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MY_VALUE 100</span></code></pre>\n\n<p>Sau đó, khi compiler bắt gặp các bạn sử dụng cái tên MY_VALUE, nó sẽ được thay thế bằng giá trị 100.</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">uint16_t</span> value = MY_VALUE; <span class=\"hljs-comment\">// value = 100</span>\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; MY_VALUE + <span class=\"hljs-built_in\">pow</span>(MY_VALUE, <span class=\"hljs-number\">2</span>) &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>; <span class=\"hljs-comment\">// 100 + pow(100, 2)</span></code></pre>\n\n<p>Chúng ta còn nhiều điều để nói về <strong>Macro</strong> trong C++, nhưng trong bài này mình chỉ nói cách định nghĩa <strong>Macro</strong> tương tự việc khai báo một hằng số (<strong>const</strong>) như trên để phục vụ cho bài học này.</p>\n\n<p>Trong thư viện <strong>cstdint</strong> chúng ta có thể sử dụng các <strong>Macro</strong> sau:</p>\n\n<h4>Signed integers: minimum value</h4>\n\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-type\">INT8_MIN</span> - <span class=\"hljs-type\">Gi</span>á trị <span class=\"hljs-built_in\">c</span>ự<span class=\"hljs-built_in\">c</span> tiểu (minimum value) <span class=\"hljs-built_in\">c</span>ủa kiểu int8_t\n<span class=\"hljs-type\">INT16_MIN</span> - <span class=\"hljs-type\">Gi</span>á trị <span class=\"hljs-built_in\">c</span>ự<span class=\"hljs-built_in\">c</span> tiểu (minimum value) <span class=\"hljs-built_in\">c</span>ủa kiểu int16_t\n<span class=\"hljs-type\">INT32_MIN</span> - <span class=\"hljs-type\">Gi</span>á trị <span class=\"hljs-built_in\">c</span>ự<span class=\"hljs-built_in\">c</span> tiểu (minimum value) <span class=\"hljs-built_in\">c</span>ủa kiểu int32_t\n<span class=\"hljs-type\">INT64_MIN</span> - <span class=\"hljs-type\">Gi</span>á trị <span class=\"hljs-built_in\">c</span>ự<span class=\"hljs-built_in\">c</span> tiểu (minimum value) <span class=\"hljs-built_in\">c</span>ủa kiểu int64_t</code></pre>\n\n<p>Các bạn hãy thử chạy những dòng lệnh này trên Visual studio 2015 và xem lại những giá trị <strong>MIN</strong> trong bảng ở phần trên. </p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Minimum value of uint8_t = \"</span> &#x3C;&#x3C;  INT8_MIN &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Minimum value of uint16_t = \"</span> &#x3C;&#x3C;  INT16_MIN &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Minimum value of uint32_t = \"</span> &#x3C;&#x3C;  INT32_MIN &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Minimum value of uint64_t = \"</span> &#x3C;&#x3C;  INT64_MIN &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<h4>Signed integers: maximum value</h4>\n\n<pre><code class=\"hljs language-stylus\">INT8_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu int8_t\nINT16_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu int16_t\nINT32_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu int32_t\nINT64_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu int64_t</code></pre>\n\n<p>Cùng thử in ra giá trị của những Macro này xem thế nào.</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Maximum value of uint8_t = \"</span> &#x3C;&#x3C;  INT8_MAX &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Maximum value of uint16_t = \"</span> &#x3C;&#x3C;  INT16_MAX &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Maximum value of uint32_t = \"</span> &#x3C;&#x3C;  INT32_MAX &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Maximum value of uint64_t = \"</span> &#x3C;&#x3C;  INT64_MAX &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<h4>Unsigned integers: maximum value</h4>\n\n<p>Vì kiểu <strong>unsigned integer</strong> có giá trị nhỏ nhất là 0 nên người ta không cần phải định nghĩa những <strong>Macro</strong> cho minimum value mà chỉ cần quan tâm đến maximum value.</p>\n\n<pre><code class=\"hljs language-stylus\">UINT8_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu uint8_t\nUINT16_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu uint16_t\nUINT32_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu uint32_t\nUINT64_MAX - Giá trị cực đạ<span class=\"hljs-selector-tag\">i</span> (maximum value) củ<span class=\"hljs-selector-tag\">a</span> kiểu uint64_t</code></pre>\n\n<p>Tương tự như trên, các bạn thử in ra giá trị của những <strong>Macro</strong> này.</p>\n\n<h4>Sử dụng thư viện cstdint</h4>\n\n<p>Bây giờ mình sẽ sử dụng thư viện <strong>cstdint</strong> để giải một bài toán đơn giản.</p>\n\n<p><strong><em>Yêu cầu: Nhập 5 giá trị số nguyên từ bàn phím, in ra màn hình kết quả lớn nhất và nhỏ nhất của 5 giá trị đó.</em></strong></p>\n\n<p>Sau khi đọc yêu cầu bài toán, chúng ta cần đưa ra giải pháp trước khi bắt tay vào viết mã.</p>\n\n<p>Trước hết, chúng ta cần 2 biến kiểu số nguyên, một biến để lưu giá trị lớn nhất trong 5 số vừa nhập, một biến để lưu giá trị nhỏ nhất của 5 số đó.</p>\n\n<pre><code class=\"hljs language-abnf\">int32_t min_value<span class=\"hljs-comment\">;</span>\nint32_t max_value<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>Bây giờ, chúng ta tạm thời bỏ qua việc tìm giá trị lớn nhất và nhỏ nhất của 5 số khác nhau, mà cùng giải quyết một bài toán đơn giản hơn, đó là tìm giá trị lớn nhất và nhỏ nhất của 2 số nguyên <strong>a</strong> và <strong>b</strong>. </p>\n\n<ul><li>Tìm giá trị lớn nhất trong hai số <strong>a</strong> và <strong>b</strong>:</li></ul>\n\n<p>Chúng ta chỉ cần thực hiện 1 phép so sánh kiểm tra xem giá trị của a có lớn hơn b hay không? Nếu <strong>(a lớn hơn b)</strong> là <strong>đúng</strong>, giá trị lớn nhất là <strong>a</strong>, ngược lại, giá trị lớn nhất là <strong>b</strong>.</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-keyword\">if</span>(a > b)\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; a &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-keyword\">else</span>\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; b &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;</code></pre>\n\n<ul><li>Tìm giá trị nhỏ nhất trong hai số <strong>a</strong> và <strong>b</strong>:</li></ul>\n\n<p>Chúng ta làm tương tự như trên, nhưng cần thay đổi một chút ở phần biểu thức so sánh. Nếu <strong>(a bé hơn b)</strong> là <strong>đúng</strong>, giá trị nhỏ nhất là <strong>a</strong>, ngược lại, giá trị nhỏ nhất là <strong>b</strong>.</p>\n\n<p>Khá đơn giản phải không các bạn! Áp dụng lại cho bài toán tìm giá trị lớn nhất và nhỏ nhất từ 5 giá trị số nguyên mà người dùng nhập vào từ bàn phím:</p>\n\n<ul><li>Tìm giá trị lớn nhất của 5 số khác nhau:</li></ul>\n\n<p>Như mình đã khai báo biến <code>max_value</code> ở trên, biến này sẽ lưu giá trị lớn nhất tại thời điểm ban đầu. Cứ mỗi lần so sánh với một giá trị trong 5 giá trị người dùng vừa nhập, nếu phát hiện giá trị nào lớn hơn giá trị max hiện tại, chúng ta gán lại giá trị <code>max_value</code> bằng giá trị của người dùng vừa nhập.</p>\n\n<pre><code class=\"hljs language-excel\">for(int8_t i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">5</span>; i++)\t{\n\tint32_t <span class=\"hljs-built_in\">value</span>;\n\t//nhập giá trị vào biế<span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">value</span> <span class=\"hljs-built_in\">t</span>ại đây\n\t\n\t//thực hiệ<span class=\"hljs-built_in\">n</span> so sánh giá trị <span class=\"hljs-built_in\">max</span> hiệ<span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">t</span>ại với giá trị vừa nhập\n\t<span class=\"hljs-built_in\">if</span>(<span class=\"hljs-built_in\">value</span> > max_value) //<span class=\"hljs-built_in\">n</span>ếu đúng thì thực hiệ<span class=\"hljs-built_in\">n</span> gá<span class=\"hljs-built_in\">n</span> lại giá trị <span class=\"hljs-built_in\">max</span> mới\n\t\tmax_value = <span class=\"hljs-built_in\">value</span>;\n}\n\n//in ra kế<span class=\"hljs-built_in\">t</span> quả là giá trị lớ<span class=\"hljs-built_in\">n</span> nhấ<span class=\"hljs-built_in\">t</span> của <span class=\"hljs-number\">5</span> số vừa nhập</code></pre>\n\n<ul><li>Tìm giá trị nhỏ nhất của 5 số khác nhau:</li></ul>\n\n<p>Đối với trường hợp này, chúng ta sử dụng biến <code>min_value</code> tương tự trường hợp tìm <code>max_value</code> nhưng đối lại điều kiện so sánh một chút. Cứ mỗi lần so sánh với một giá trị trong 5 giá trị người dùng vừa nhập, nếu phát hiện giá trị nào nhỏ hơn giá trị <code>min_value</code> hiện tại, chúng ta gán lại giá trị <code>min_value</code> bằng giá trị người dùng vừa nhập</p>\n\n<pre><code class=\"hljs language-excel\">for(int8_t i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">5</span>; i++)\t{\n\tint32_t <span class=\"hljs-built_in\">value</span>;\n\t//nhập giá trị vào biế<span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">value</span> <span class=\"hljs-built_in\">t</span>ại đây\n\t\n\t//thực hiệ<span class=\"hljs-built_in\">n</span> so sánh giá trị <span class=\"hljs-built_in\">max</span> hiệ<span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">t</span>ại với giá trị vừa nhập\n\t<span class=\"hljs-built_in\">if</span>(<span class=\"hljs-built_in\">value</span> &#x3C; min_value) //<span class=\"hljs-built_in\">n</span>ếu đúng thì thực hiệ<span class=\"hljs-built_in\">n</span> gá<span class=\"hljs-built_in\">n</span> lại giá trị <span class=\"hljs-built_in\">min</span> mới\n\t\tmin_value = <span class=\"hljs-built_in\">value</span>;\n}\n\n//in ra kế<span class=\"hljs-built_in\">t</span> quả là giá trị nhỏ nhấ<span class=\"hljs-built_in\">t</span> của <span class=\"hljs-number\">5</span> số vừa nhập</code></pre>\n\n<p>Chúng ta còn bỏ sót một chi tiết vô cùng quan trọng! Giá trị ban đầu của <code>max_value</code> và <code>min_value</code> nên là bao nhiêu?</p>\n\n<p>Đối với biến <code>max_value</code>, chúng ta cần một giá trị đảm bảo rằng người dùng sẽ không nhập vào số nguyên nào nhỏ hơn giá trị max ban đầu, và không thể vượt quá phạm vi lưu trữ giá trị của kiểu dữ liệu bạn chọn. Chúng ta không còn giá trị nào phù hợp hơn ngoài <strong>INT32_MIN</strong>.</p>\n\n<p>Tương tự, giá trị ban đầu phù hợp nhất cho biến <code>min_value</code> là <strong>INT32_MAX</strong>.</p>\n\n<p><strong>(Vì mình chọn sử dụng biến kiểu <em>int32_t</em> để lưu trữ)</strong></p>\n\n<p>Cuối cùng, chúng ta có thể viết ra một chương trình tương đối hoàn thiện cho bài toán trên:</p>\n\n<pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstdint></span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\t\n</span>{\n\t<span class=\"hljs-keyword\">int32_t</span> min_value = INT32_MAX;\n\t<span class=\"hljs-keyword\">int32_t</span> max_value = INT32_MIN;\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int8_t</span> number_of_value = <span class=\"hljs-number\">5</span>;\n\n\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int8_t</span> i = <span class=\"hljs-number\">1</span>; i &#x3C;= <span class=\"hljs-number\">5</span>; i++)\t{\n\t\t<span class=\"hljs-keyword\">int32_t</span> current_value;\n\t\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Please enter an integer value: \"</span>;\n\t\t<span class=\"hljs-built_in\">cin</span> >> current_value;\n\n\t\t<span class=\"hljs-keyword\">if</span> (current_value &#x3C; min_value)\n\t\t\tmin_value = current_value;\n\n\t\t<span class=\"hljs-keyword\">if</span> (current_value > max_value)\n\t\t\tmax_value = current_value;\n\t}\n\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Minimum value: \"</span> &#x3C;&#x3C; min_value &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; <span class=\"hljs-string\">\"Maximum value: \"</span> &#x3C;&#x3C; max_value &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n\n\tsystem(<span class=\"hljs-string\">\"pause\"</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<h2></h2>\n\n<h3>Tổng kết</h3>\n\n<ul>\n<li><p>Sử dụng thư viện <strong>cstdint</strong> giúp các bạn kiểm soát tốt hơn kích thước vùng nhớ của kiểu dữ liệu số nguyên mà bạn khai báo cho biến, đồng thời cũng dễ dàng ước lượng phạm vi giá trị của biến cho phù hợp.</p></li>\n<li><p>Thư viện <strong>cstdint</strong> cũng được định nghĩa bên trong <strong>namespace std</strong>, vì thế khi sử dụng thư viện này, các bạn nên có thêm dòng khai báo <code>using namespace std;</code> để đảm bảo mọi thứ hoạt động bình thường.</p></li>\n<li><p>Visual studio 2015 hổ trợ cho chúng ta một số cách biểu diễn kích thước kiểu integer mà không cần thêm vào thư viện <strong>cstdint</strong>:</p></li>\n</ul>\n\n<p></p><pre><code class=\"hljs language-abnf\">__int8<span class=\"hljs-comment\">;</span>\n__int16<span class=\"hljs-comment\">;</span>\n__int32<span class=\"hljs-comment\">;</span>\n__int64<span class=\"hljs-comment\">;</span></code></pre>\n\n<p>Nếu các bạn sử dụng Visual studio thì nên sử dụng các cách khai báo kiểu <strong>int</strong> như trên.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn </p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n\n<hr>\n\n<h3>Link Videos khóa học</h3>\n\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n</body></html>","__filename":"generated/30016.md","__url":"/4/0-su-dung-thu-vien-cstdint/","__resourceUrl":"/4/0-su-dung-thu-vien-cstdint/index.html","__dataUrl":"/4/0-su-dung-thu-vien-cstdint/index.html.a2801fa4ada10c23f504f07e4ee78b63.json"}