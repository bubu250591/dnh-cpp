{"head":{"title":"Hướng dẫn cách viết bài","description":"Markdown\n\nTất cả các bài viết đều phải dùng markdown\n\nNếu bạn chưa biết cách sử dụng Markdown có thể tham khảo ở đây\n\nQuy tắc viết Markdown…"},"body":"<h2 id=\"markdown\"><a href=\"#markdown\" class=\"phenomic-HeadingAnchor\">#</a>Markdown</h2>\n<h3 id=\"tt-c-cc-bi-vit-u-phi-dng-markdown\"><a href=\"#tt-c-cc-bi-vit-u-phi-dng-markdown\" class=\"phenomic-HeadingAnchor\">#</a>Tất cả các bài viết đều phải dùng markdown</h3>\n<p><a href=\"https://guides.github.com/features/mastering-markdown/#examples\">Nếu bạn chưa biết cách sử dụng Markdown có thể tham khảo ở đây</a></p>\n<h3 id=\"quy-tc-vit-markdown\"><a href=\"#quy-tc-vit-markdown\" class=\"phenomic-HeadingAnchor\">#</a>Quy tắc viết Markdown</h3>\n<p>Các bạn có thể sử dụng quy tắc của <a href=\"https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\">GitHub Flavored Markdown (GFM)</a>\nhoặc là <a href=\"http://commonmark.org/help/\">Common Mark (CM)</a>.</p>\n<p>Thực chất thì GFM chỉ là chuẩn mở rộng của CM nên 2 chuẩn này\ntương thích với nhau.</p>\n<h3 id=\"kim-tra-cht-lng-markdown\"><a href=\"#kim-tra-cht-lng-markdown\" class=\"phenomic-HeadingAnchor\">#</a>Kiểm tra chất lượng Markdown</h3>\n<p>Tiêu chuẩn đề ra cho các file Markdown là:</p>\n<ul>\n<li>Xem tốt trên website (tất nhiên)</li>\n<li>Xem tốt trên Github</li>\n<li>Coi mã nguồn mà vẫn đọc được nội dung</li>\n</ul>\n<p>DNH dùng <a href=\"https://github.com/wooorm/remark-lint\">remark-lint</a> để tự động hóa\nviệc kiểm tra lỗi cho mỗi commit cũng như mỗi khi bạn gửi\nPull Request (PR) về cho DNH.</p>\n<p>Nếu bạn gửi PR mà có lỗi, dưới đây là 2 cách bạn có thể kiểm tra lỗi:</p>\n<h4 id=\"trn-giao-din-github-vi-travis\"><a href=\"#trn-giao-din-github-vi-travis\" class=\"phenomic-HeadingAnchor\">#</a>Trên giao diện Github với Travis</h4>\n<p>Mỗi khi bạn gửi PR thì Travis sẽ tự động kiểm lỗi Markdown.\nNếu các file Markdown bạn chỉnh sửa bị lỗi thì bên dưới PR của bạn sẽ\ncó dạng thế này:</p>\n<p><img src=\"./pr-failed.png\" alt=\"Github PR failed\"></p>\n<p>Bạn bấm vào <kbd>Details</kbd> để chuyển sang Travis và xem theo báo cáo cụ thể</p>\n<p><img src=\"./travis.png\" alt=\"Travis Errors\"></p>\n<p>Hãy sửa theo hướng dẫn rồi tiếp tục gửi các commit đã sửa lỗi về cho DNH.</p>\n<p>Khi giao diện của Github báo thế này là bài viết của bạn đã đạt yêu cầu\nmà DNH đặt ra</p>\n<p><img src=\"./pr-passed.png\" alt=\"Github PR passed\"></p>\n<h4 id=\"kim-tra-trc-tip-trn-my\"><a href=\"#kim-tra-trc-tip-trn-my\" class=\"phenomic-HeadingAnchor\">#</a>Kiểm tra trực tiếp trên máy</h4>\n<ul>\n<li>\n<p>Tải và cài đặt Node.js runtime.\n<a href=\"https://nodejs.org/en/\">Tải về từ trang chủ</a></p>\n</li>\n<li>\n<p>Sau khi tải xong các bạn mở shell/cmd lên</p>\n</li>\n<li>\n<p>Tại thư mục gốc của repo này, gõ lệnh</p>\n<pre><code class=\"hljs language-console\">npm install</code></pre>\n<p>để cài đặt các package cần thiết</p>\n</li>\n<li>\n<p>Mỗi lần bạn cần kiểm tra thì gõ lệnh sau:</p>\n<pre><code class=\"hljs language-console\">npm -s test</code></pre>\n<p>Các bạn sẽ thấy các thông báo tương tự như trên giao diện của Travis</p>\n</li>\n</ul>\n<h3 id=\"cc-li-markdown-thng-gp\"><a href=\"#cc-li-markdown-thng-gp\" class=\"phenomic-HeadingAnchor\">#</a>Các lỗi Markdown thường gặp</h3>\n<p>(wip...)</p>\n<h2 id=\"chn-hnh-nh\"><a href=\"#chn-hnh-nh\" class=\"phenomic-HeadingAnchor\">#</a>Chèn hình ảnh</h2>\n<p>Nếu các bạn chưa biết thì đây là cấu trúc chung để chèn hình ảnh cho Markdown</p>\n<pre><code class=\"hljs language-md\">![<span class=\"hljs-string\">alt text</span>](<span class=\"hljs-link\">http://abc.com/link/to/image.jpg \"Title text\"</span>)</code></pre>\n<p>Mình sẽ lấy ví dụ chính bài viết này để hướng dẫn các bạn chèn ảnh.</p>\n<p>Mỗi bài viết sẽ được chứa trong một thư mục riêng lẻ với file Markdown có tên\nlà <code>index.md</code>.</p>\n<p>Hình ảnh cũng sẽ được chứa trong cùng thư mục.</p>\n<p>Bên dưới là cây thư mục của bài viết này:</p>\n<pre><code class=\"hljs language-raw\">|_meta\n  |__huong-dan-viet-bai\n    |__index.md\n    |__pr-failed.png\n    |__pr-passed.png\n    |__travis.png</code></pre>\n<p>Lưu ý: tất cả các tên file/ thư mục đều phải đặt tên dạng không dấu,\nchữ thường, viết liền, nối các từ với nhau bằng dấu <code>-</code>. Nói chung là url slug.</p>\n<p>Để chèn hình <code>pr-failed.png</code> thì chúng ta sẽ viết trong Markdown như thế này:</p>\n<pre><code class=\"hljs language-md\">![<span class=\"hljs-string\">chú thích ngắn</span>](<span class=\"hljs-link\">./pr-failed.png</span>)</code></pre>\n<h2 id=\"front-matter-metadata\"><a href=\"#front-matter-metadata\" class=\"phenomic-HeadingAnchor\">#</a>Front Matter (Metadata)</h2>\n<p>Để giúp website hiển thị chính xác các thông tin của bài viết, đầu mỗi file\nsẽ có một phần đặc biệt để viết các thông tin bài viết gọi là Front Matter.</p>\n<p>Cấu trúc sẽ như thế này:</p>\n<pre><code class=\"hljs language-md\">---\n<span class=\"hljs-section\">title: Tên bài viết\n---</span>\n\nNội dung bình thường của file Markdown</code></pre>\n<p>Phần giữa hai dấu <code>---</code> được viết bằng YAML.\nTạm thời chỉ có 1 trường <code>title</code>.\nMình sẽ cập nhật thêm các trường mới khi có thay đổi ở website.</p>\n<p>Lưu ý: Vì <code>title</code> sẽ dùng làm heading 1 trên website nên tất cả heading của\nbài viết phải bắt đầu từ heading 2 <code>##</code>. Các bạn sẽ nhận được thông báo lỗi\ntừ <code>remark-lint</code> nếu sử dụng heading 1.</p>\n","rawBody":"\n## Markdown\n\n### Tất cả các bài viết đều phải dùng markdown\n\n[Nếu bạn chưa biết cách sử dụng Markdown có thể tham khảo ở đây](https://guides.github.com/features/mastering-markdown/#examples)\n\n### Quy tắc viết Markdown\n\nCác bạn có thể sử dụng quy tắc của [GitHub Flavored Markdown (GFM)](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)\nhoặc là [Common Mark (CM)](http://commonmark.org/help/).\n\nThực chất thì GFM chỉ là chuẩn mở rộng của CM nên 2 chuẩn này\ntương thích với nhau.\n\n### Kiểm tra chất lượng Markdown\n\nTiêu chuẩn đề ra cho các file Markdown là:\n\n  - Xem tốt trên website (tất nhiên)\n  - Xem tốt trên Github\n  - Coi mã nguồn mà vẫn đọc được nội dung\n\nDNH dùng [remark-lint](https://github.com/wooorm/remark-lint) để tự động hóa\nviệc kiểm tra lỗi cho mỗi commit cũng như mỗi khi bạn gửi\nPull Request (PR) về cho DNH.\n\nNếu bạn gửi PR mà có lỗi, dưới đây là 2 cách bạn có thể kiểm tra lỗi:\n\n#### Trên giao diện Github với Travis\n\nMỗi khi bạn gửi PR thì Travis sẽ tự động kiểm lỗi Markdown.\nNếu các file Markdown bạn chỉnh sửa bị lỗi thì bên dưới PR của bạn sẽ\ncó dạng thế này:\n\n![Github PR failed](./pr-failed.png)\n\nBạn bấm vào <kbd>Details</kbd> để chuyển sang Travis và xem theo báo cáo cụ thể\n\n![Travis Errors](./travis.png)\n\nHãy sửa theo hướng dẫn rồi tiếp tục gửi các commit đã sửa lỗi về cho DNH.\n\nKhi giao diện của Github báo thế này là bài viết của bạn đã đạt yêu cầu\nmà DNH đặt ra\n\n![Github PR passed](./pr-passed.png)\n\n#### Kiểm tra trực tiếp trên máy\n\n  - Tải và cài đặt Node.js runtime.\n    [Tải về từ trang chủ](https://nodejs.org/en/)\n  - Sau khi tải xong các bạn mở shell/cmd lên\n  - Tại thư mục gốc của repo này, gõ lệnh\n\n    ```console\n    npm install\n    ```\n\n    để cài đặt các package cần thiết\n\n  - Mỗi lần bạn cần kiểm tra thì gõ lệnh sau:\n\n    ```console\n    npm -s test\n    ```\n\n    Các bạn sẽ thấy các thông báo tương tự như trên giao diện của Travis\n\n### Các lỗi Markdown thường gặp\n\n(wip...)\n\n## Chèn hình ảnh\n\nNếu các bạn chưa biết thì đây là cấu trúc chung để chèn hình ảnh cho Markdown\n\n```md\n![alt text](http://abc.com/link/to/image.jpg \"Title text\")\n```\n\nMình sẽ lấy ví dụ chính bài viết này để hướng dẫn các bạn chèn ảnh.\n\nMỗi bài viết sẽ được chứa trong một thư mục riêng lẻ với file Markdown có tên\nlà `index.md`.\n\nHình ảnh cũng sẽ được chứa trong cùng thư mục.\n\nBên dưới là cây thư mục của bài viết này:\n\n```raw\n|_meta\n  |__huong-dan-viet-bai\n    |__index.md\n    |__pr-failed.png\n    |__pr-passed.png\n    |__travis.png\n```\n\nLưu ý: tất cả các tên file/ thư mục đều phải đặt tên dạng không dấu,\nchữ thường, viết liền, nối các từ với nhau bằng dấu `-`. Nói chung là url slug.\n\nĐể chèn hình `pr-failed.png` thì chúng ta sẽ viết trong Markdown như thế này:\n\n```md\n![chú thích ngắn](./pr-failed.png)\n```\n\n## Front Matter (Metadata)\n\nĐể giúp website hiển thị chính xác các thông tin của bài viết, đầu mỗi file\nsẽ có một phần đặc biệt để viết các thông tin bài viết gọi là Front Matter.\n\nCấu trúc sẽ như thế này:\n\n```md\n---\ntitle: Tên bài viết\n---\n\nNội dung bình thường của file Markdown\n```\n\nPhần giữa hai dấu `---` được viết bằng YAML.\nTạm thời chỉ có 1 trường `title`.\nMình sẽ cập nhật thêm các trường mới khi có thay đổi ở website.\n\nLưu ý: Vì `title` sẽ dùng làm heading 1 trên website nên tất cả heading của\nbài viết phải bắt đầu từ heading 2 `##`. Các bạn sẽ nhận được thông báo lỗi\ntừ `remark-lint` nếu sử dụng heading 1.\n","raw":"---\ntitle: Hướng dẫn cách viết bài\n---\n\n## Markdown\n\n### Tất cả các bài viết đều phải dùng markdown\n\n[Nếu bạn chưa biết cách sử dụng Markdown có thể tham khảo ở đây](https://guides.github.com/features/mastering-markdown/#examples)\n\n### Quy tắc viết Markdown\n\nCác bạn có thể sử dụng quy tắc của [GitHub Flavored Markdown (GFM)](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)\nhoặc là [Common Mark (CM)](http://commonmark.org/help/).\n\nThực chất thì GFM chỉ là chuẩn mở rộng của CM nên 2 chuẩn này\ntương thích với nhau.\n\n### Kiểm tra chất lượng Markdown\n\nTiêu chuẩn đề ra cho các file Markdown là:\n\n  - Xem tốt trên website (tất nhiên)\n  - Xem tốt trên Github\n  - Coi mã nguồn mà vẫn đọc được nội dung\n\nDNH dùng [remark-lint](https://github.com/wooorm/remark-lint) để tự động hóa\nviệc kiểm tra lỗi cho mỗi commit cũng như mỗi khi bạn gửi\nPull Request (PR) về cho DNH.\n\nNếu bạn gửi PR mà có lỗi, dưới đây là 2 cách bạn có thể kiểm tra lỗi:\n\n#### Trên giao diện Github với Travis\n\nMỗi khi bạn gửi PR thì Travis sẽ tự động kiểm lỗi Markdown.\nNếu các file Markdown bạn chỉnh sửa bị lỗi thì bên dưới PR của bạn sẽ\ncó dạng thế này:\n\n![Github PR failed](./pr-failed.png)\n\nBạn bấm vào <kbd>Details</kbd> để chuyển sang Travis và xem theo báo cáo cụ thể\n\n![Travis Errors](./travis.png)\n\nHãy sửa theo hướng dẫn rồi tiếp tục gửi các commit đã sửa lỗi về cho DNH.\n\nKhi giao diện của Github báo thế này là bài viết của bạn đã đạt yêu cầu\nmà DNH đặt ra\n\n![Github PR passed](./pr-passed.png)\n\n#### Kiểm tra trực tiếp trên máy\n\n  - Tải và cài đặt Node.js runtime.\n    [Tải về từ trang chủ](https://nodejs.org/en/)\n  - Sau khi tải xong các bạn mở shell/cmd lên\n  - Tại thư mục gốc của repo này, gõ lệnh\n\n    ```console\n    npm install\n    ```\n\n    để cài đặt các package cần thiết\n\n  - Mỗi lần bạn cần kiểm tra thì gõ lệnh sau:\n\n    ```console\n    npm -s test\n    ```\n\n    Các bạn sẽ thấy các thông báo tương tự như trên giao diện của Travis\n\n### Các lỗi Markdown thường gặp\n\n(wip...)\n\n## Chèn hình ảnh\n\nNếu các bạn chưa biết thì đây là cấu trúc chung để chèn hình ảnh cho Markdown\n\n```md\n![alt text](http://abc.com/link/to/image.jpg \"Title text\")\n```\n\nMình sẽ lấy ví dụ chính bài viết này để hướng dẫn các bạn chèn ảnh.\n\nMỗi bài viết sẽ được chứa trong một thư mục riêng lẻ với file Markdown có tên\nlà `index.md`.\n\nHình ảnh cũng sẽ được chứa trong cùng thư mục.\n\nBên dưới là cây thư mục của bài viết này:\n\n```raw\n|_meta\n  |__huong-dan-viet-bai\n    |__index.md\n    |__pr-failed.png\n    |__pr-passed.png\n    |__travis.png\n```\n\nLưu ý: tất cả các tên file/ thư mục đều phải đặt tên dạng không dấu,\nchữ thường, viết liền, nối các từ với nhau bằng dấu `-`. Nói chung là url slug.\n\nĐể chèn hình `pr-failed.png` thì chúng ta sẽ viết trong Markdown như thế này:\n\n```md\n![chú thích ngắn](./pr-failed.png)\n```\n\n## Front Matter (Metadata)\n\nĐể giúp website hiển thị chính xác các thông tin của bài viết, đầu mỗi file\nsẽ có một phần đặc biệt để viết các thông tin bài viết gọi là Front Matter.\n\nCấu trúc sẽ như thế này:\n\n```md\n---\ntitle: Tên bài viết\n---\n\nNội dung bình thường của file Markdown\n```\n\nPhần giữa hai dấu `---` được viết bằng YAML.\nTạm thời chỉ có 1 trường `title`.\nMình sẽ cập nhật thêm các trường mới khi có thay đổi ở website.\n\nLưu ý: Vì `title` sẽ dùng làm heading 1 trên website nên tất cả heading của\nbài viết phải bắt đầu từ heading 2 `##`. Các bạn sẽ nhận được thông báo lỗi\ntừ `remark-lint` nếu sử dụng heading 1.\n","__filename":"cpp-co-ban/meta/huong-dan-viet-bai/index.md","__url":"/cpp-co-ban/meta/huong-dan-viet-bai/","__resourceUrl":"/cpp-co-ban/meta/huong-dan-viet-bai/index.html","__dataUrl":"/cpp-co-ban/meta/huong-dan-viet-bai/index.html.4899de45a6eba030075353d148fef690.json"}