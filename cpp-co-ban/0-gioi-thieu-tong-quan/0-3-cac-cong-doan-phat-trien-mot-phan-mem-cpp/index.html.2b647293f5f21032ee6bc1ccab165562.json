{"head":{"title":"Các công đoạn phát triển một phần mềm","description":"Ở bài trước, chúng ta đã cùng nhau tìm hiểu C++ là gì, nó được dùng cho mục đích\ngì... Các bạn xem đến bài này nghĩa là các bạn đã xác định…"},"body":"<p>Ở bài trước, chúng ta đã cùng nhau tìm hiểu C++ là gì, nó được dùng cho mục đích\ngì... Các bạn xem đến bài này nghĩa là các bạn đã xác định được phần nào hướng\nđi trong tương lai, hi vọng các bạn có thể theo đuổi đến cùng với\nlựa chọn của mình.</p>\n<p>Trong bài học này, chúng ta thảo luận về các bước để phát triển ra một chương\ntrình C++ trước khi các bạn bắt đầu với chương trình đầu tiên của mình.</p>\n<p>Một chương trình máy tính (phần mềm) được tạo ra nhằm được sử dụng trong một\nhoặc một vài mục đích cụ thể nào đó (Thống kê, dạy học, y tế, để giải trí,...\nhay thậm chí phần mềm được tạo ra để hổ trợ lập trình viên tạo\nra những phần mềm).</p>\n<p>Viết một chương trình là một công đoạn nhỏ trong quá trình sản xuất phần mềm\n(vì một phần mềm thường là tập hợp của nhiều chương trình nhỏ) nhưng nó\ncũng được thực hiện thông qua những công đoạn tương tự như phát triển\nmột phần mềm lớn.</p>\n<p><img src=\"http://www.learncpp.com/images/CppTutorial/Section0/Development.png\" alt=\"Hình 0.3.0\" title=\"hình vẽ miêu tả các công đoạn phát triển một chương trình\"></p>\n<p>Các bước phát triển một phần mềm</p>\n<ul>\n<li>Xác định vấn đề cần giải quyết.</li>\n<li>Thiết kế giải pháp (chọn nền tảng phát triển, chọn ngôn ngữ, chọn công cụ,\nxác định thuật toán cho chương trình...).</li>\n<li>Viết chương trình thực hiện theo giải pháp đã đề ra.</li>\n<li>Biên dịch chương trình (chuyển đổi mã lập trình về mã máy).</li>\n<li>Liên kết các file đã được biên dịch.</li>\n<li>Chạy chương trình, kiểm tra và sửa lỗi cho chương trình.</li>\n</ul>\n<p>Đối với một số lập trình viên chuyên nghiệp (hoặc do vấn đề cần giải quyết\nquá đơn giản), người ta có thể thực hiện nhanh bước 1, 2 và bắt tay vào viết\nchương trình ngay lập tức. Mục tiêu của khóa học này cũng bao gồm rèn luyện\ntư duy giúp bạn phát triển khả năng tự giải quyết vấn đề của riêng mình.</p>\n<p>Chúng ta bắt đầu làm rõ từng bước trong quá trình phát triển\nchương trình phần mềm (hay cụ thể là chương trình C++).</p>\n<h2 id=\"bc-1-xc-nh-vn--cn-gii-quyt\"><a href=\"#bc-1-xc-nh-vn--cn-gii-quyt\" class=\"phenomic-HeadingAnchor\">#</a>Bước 1: Xác định vấn đề cần giải quyết</h2>\n<p>Công đoạn này quyết định phần lớn đến việc chương trình của bạn được thực hiện\nmột cách khó khăn hay dễ dàng. Nhưng trên lý thuyết, nó khá đơn giản.\nTất cả những gì bạn cần là một ý tưởng có thể dễ dàng xác định.</p>\n<p>Để dễ hiểu hơn, chúng ta cùng đặt một câu hỏi: Bạn đang gặp phải vấn đề gì?</p>\n<p>Mình xin đưa ra một số tình huống cụ thể:</p>\n<ul>\n<li>Mình muốn có một chương trình cho phép nhập vào năm sinh,\nsau đó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)</li>\n<li>Mình muốn viết một chương trình tìm ra đường đi ngắn nhất\nđể đi từ nhà đến trường. (Hình 0.3.2)</li>\n<li>Mình cần một chương trình giúp mình hoàn tất đống sổ sách\nmột cách nhanh chóng hơn. (Hình 0.3.3)</li>\n</ul>\n<p>Trên đây là ba trường hợp ngẫu nhiên mình nghĩ đến vì mình cần dùng nó trong\ncuộc sống. Vì mình cần máy tính giúp mình giải quyết những thứ tương tự\nnhư trên, nên mình đã xác định vấn đề của riêng mình.\nCùng xem thử mình đã xác định được nó bằng cách nào.</p>\n<ul>\n<li>\n<p>Trường hợp 1: Mình muốn có một chương trình cho phép nhập vào năm sinh, sau\nđó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)</p>\n<p>Có lẽ đây là một vấn đề quá đơn giản so với một số người, nhưng trước khi\nlàm cho máy tính hiểu được vấn đề, bản thân chúng ta phải hiểu được vấn đề\ntrước.</p>\n<p>Mình đã tự đặt câu hỏi với bản thân là:\n&quot;Hiện tại, mình đang cần biết điều gì?&quot;.</p>\n<p>Sau đó mình tự trả lời với bản thân là:\n&quot;Mình muốn biết năm nay mình bao nhiêu tuổi&quot;.</p>\n</li>\n<li>\n<p>Trường hợp 2: Mình muốn viết một chương trình tìm ra đường đi ngắn nhất để\nđi từ nhà đến trường. (Hình 0.3.2)</p>\n<p>Câu hỏi mình tự đặt ra: &quot;Làm thế nào để tiết kiệm xăng bây giờ?&quot;</p>\n<p>Tự trả lời luôn: &quot;Để tìm coi đường nào ngắn nhất để đi tới trường mới được&quot;.</p>\n</li>\n<li>\n<p>Trường hợp 3: Mình cần một chương trình giúp mình hoàn tất đống sổ sách\nmột cách nhanh chóng hơn. (Hình 0.3.3)</p>\n<p>Câu hỏi: &quot;Với cái đống sổ sách này, làm sao mình có thể dành thời gian\nđi chơi với gấu được?&quot;</p>\n<p>Trả lời: &quot;Phải tìm cách để quản lý nó thôi, tiện thể đưa cho máy tính\nlàm luôn cho khỏe&quot;.</p>\n</li>\n</ul>\n<p>Có thể trong cuộc sống các bạn gặp phải những vấn đề không giống với mình đưa ra\nở trên. Có thể đó là một bài toán khó, một trường hợp khó giải quyết, và bạn cần\ncái máy tính của bạn giúp đỡ, đó là lúc mà bạn phải tự tìm ra\ncâu trả lời cho bản thân.</p>\n<h2 id=\"bc-2-thit-k-gii-php\"><a href=\"#bc-2-thit-k-gii-php\" class=\"phenomic-HeadingAnchor\">#</a>Bước 2: Thiết kế giải pháp</h2>\n<p>Đây là lúc mà bạn cần đặt ra câu hỏi: &quot;Làm thế nào&quot; để giải quyết những vấn đề\ntrên? (Hình 0.3.4). Vấn đề nan giải là một trường hợp ở trên đều có nhiều hơn 1\ncách giải quyết. Một trong số chúng tốt, số còn lại đa phần là không tốt.\nThường thì trong bước này, một số lập trình viên tồi sẽ thực hiện\nmột cách lôi thôi, cẩu thả nhất trong tất cả các công đoạn.</p>\n<p>Mình đã thấy nhiều người mới học lập trình, sau khi nhìn ra được vấn đề,\nhọ ngồi xuống và bắt đầu code những gì họ đang tưởng tượng.\nĐa phần, kết quả sinh ra không như mong đợi.</p>\n<p>Điển hình, một giải pháp tốt thường có những đặc điểm sau:</p>\n<ul>\n<li>Nó có tính minh bạch, rõ ràng.</li>\n<li>Nó có thể sử dụng lại và dễ thay đổi trong tương lai.</li>\n<li>Tính hiệu quả.</li>\n</ul>\n<p>Thực hiện tốt công đoạn này, bạn sẽ giảm được tối đa khả năng phát sinh lỗi\ntrong chương trình (sẽ tiết kiệm được khối thời gian cho việc sửa lỗi).</p>\n<p>Ở những bài sau, các bạn sẽ được học cách tự mình đưa ra giải pháp cho\ntừng tình huống cụ thể.</p>\n<h2 id=\"bc-3-vit-chng-trnh\"><a href=\"#bc-3-vit-chng-trnh\" class=\"phenomic-HeadingAnchor\">#</a>Bước 3: Viết chương trình</h2>\n<p>Để viết được chương trình, bạn cần biết:</p>\n<ul>\n<li>Ngôn ngữ lập trình bạn đang sử dụng. (Hình 0.3.5)</li>\n<li>IDE (môi trường phát triển ứng dụng). (Hình 0.3.6)</li>\n</ul>\n<p>Bạn hoàn toàn có thể viết chương trình trên một số công cụ soản thảo văn bản như\nNotepad, Notepad++, Sublime Text,... Nhưng trong khóa học này, mình khuyên\ncác bạn nên sử dụng IDE, vì nó hổ trợ khá nhiều cho các bạn trong việc\ncompile và liên kết các file đối tượng.</p>\n<p>Cụ thể, mình sử dụng công cụ Visual studio 2015 mà mình sẽ hướng dẫn cài đặt\ntrong bài học tiếp theo.</p>\n<p>File chứa mã nguồn C++ của bạn cần được đặt tên và lưu với phần mở rộng\nlà <code>.cpp</code> giúp cho hệ điều hành có thể hiểu được đó là file mã nguồn C++.</p>\n<p>Sau này bạn có thể gặp một số file C++ có định dạng phần mở rộng khác\nnhư <code>.h</code>, <code>.hpp</code> ... nhưng chúng ta sẽ nói về vấn đề này sau.</p>\n<h2 id=\"bc-4-bin-dch-chng-trnh\"><a href=\"#bc-4-bin-dch-chng-trnh\" class=\"phenomic-HeadingAnchor\">#</a>Bước 4: Biên dịch chương trình</h2>\n<p>Để biên dịch một chương trình C++, chúng ta cần một trình biên dịch (compiler).\n(Hình 0.3.7)</p>\n<p>Mục đích của compile chương trình là biến những file mã nguồn có đuôi\n<code>.cpp</code>, <code>.h</code>, ... thành những file object <code>.o</code></p>\n<p>(Hình 0.3.8)</p>\n<p>Chúng ta sử dụng luôn trình biên dịch tích hợp sẵn trong visual studio 2015\nnên khá tiện lợi.</p>\n<h2 id=\"bc-5-lin-kt-cc-file-object\"><a href=\"#bc-5-lin-kt-cc-file-object\" class=\"phenomic-HeadingAnchor\">#</a>Bước 5: Liên kết các file object</h2>\n<p>(Hình 0.3.9)</p>\n<p>Các files object sau khi được compiler biên dịch vẫn còn nằm tách biệt với nhau.\nNên quá trình này sẽ thực hiện liên kết chúng thành một file duy nhất,\ngọi là executable file (file .exe).</p>\n<h2 id=\"bc-6-chy-chng-trnh-v-kim-li\"><a href=\"#bc-6-chy-chng-trnh-v-kim-li\" class=\"phenomic-HeadingAnchor\">#</a>Bước 6: Chạy chương trình và kiểm lỗi</h2>\n<p>Trong công đoạn này, bạn hoặc ai đó chạy chương trình mà bạn đã tạo ra,\nvới nhiều giá trị khác nhau được đưa vào nhằm chắc chắn rằng chương trình\nhoạt động như ý muốn.</p>\n<hr>\n<p>Ở bài sau, chúng ta sẽ nói về IDE (môi trường tích hợp phát triển).</p>\n<p>Hẹn gặp lại các bạn.</p>\n","rawBody":"\nỞ bài trước, chúng ta đã cùng nhau tìm hiểu C++ là gì, nó được dùng cho mục đích\ngì... Các bạn xem đến bài này nghĩa là các bạn đã xác định được phần nào hướng\nđi trong tương lai, hi vọng các bạn có thể theo đuổi đến cùng với\nlựa chọn của mình.\n\nTrong bài học này, chúng ta thảo luận về các bước để phát triển ra một chương\ntrình C++ trước khi các bạn bắt đầu với chương trình đầu tiên của mình.\n\nMột chương trình máy tính (phần mềm) được tạo ra nhằm được sử dụng trong một\nhoặc một vài mục đích cụ thể nào đó (Thống kê, dạy học, y tế, để giải trí,...\nhay thậm chí phần mềm được tạo ra để hổ trợ lập trình viên tạo\nra những phần mềm).\n\nViết một chương trình là một công đoạn nhỏ trong quá trình sản xuất phần mềm\n(vì một phần mềm thường là tập hợp của nhiều chương trình nhỏ) nhưng nó\ncũng được thực hiện thông qua những công đoạn tương tự như phát triển\nmột phần mềm lớn.\n\n![Hình 0.3.0](http://www.learncpp.com/images/CppTutorial/Section0/Development.png \"hình vẽ miêu tả các công đoạn phát triển một chương trình\")\n\nCác bước phát triển một phần mềm\n\n  - Xác định vấn đề cần giải quyết.\n  - Thiết kế giải pháp (chọn nền tảng phát triển, chọn ngôn ngữ, chọn công cụ,\n    xác định thuật toán cho chương trình...).\n  - Viết chương trình thực hiện theo giải pháp đã đề ra.\n  - Biên dịch chương trình (chuyển đổi mã lập trình về mã máy).\n  - Liên kết các file đã được biên dịch.\n  - Chạy chương trình, kiểm tra và sửa lỗi cho chương trình.\n\nĐối với một số lập trình viên chuyên nghiệp (hoặc do vấn đề cần giải quyết\nquá đơn giản), người ta có thể thực hiện nhanh bước 1, 2 và bắt tay vào viết\nchương trình ngay lập tức. Mục tiêu của khóa học này cũng bao gồm rèn luyện\ntư duy giúp bạn phát triển khả năng tự giải quyết vấn đề của riêng mình.\n\nChúng ta bắt đầu làm rõ từng bước trong quá trình phát triển\nchương trình phần mềm (hay cụ thể là chương trình C++).\n\n## Bước 1: Xác định vấn đề cần giải quyết\n\nCông đoạn này quyết định phần lớn đến việc chương trình của bạn được thực hiện\n một cách khó khăn hay dễ dàng. Nhưng trên lý thuyết, nó khá đơn giản.\nTất cả những gì bạn cần là một ý tưởng có thể dễ dàng xác định.\n\nĐể dễ hiểu hơn, chúng ta cùng đặt một câu hỏi: Bạn đang gặp phải vấn đề gì?\n\nMình xin đưa ra một số tình huống cụ thể:\n\n  - Mình muốn có một chương trình cho phép nhập vào năm sinh,\n    sau đó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)\n  - Mình muốn viết một chương trình tìm ra đường đi ngắn nhất\n    để đi từ nhà đến trường. (Hình 0.3.2)\n  - Mình cần một chương trình giúp mình hoàn tất đống sổ sách\n    một cách nhanh chóng hơn. (Hình 0.3.3)\n\nTrên đây là ba trường hợp ngẫu nhiên mình nghĩ đến vì mình cần dùng nó trong\ncuộc sống. Vì mình cần máy tính giúp mình giải quyết những thứ tương tự\nnhư trên, nên mình đã xác định vấn đề của riêng mình.\nCùng xem thử mình đã xác định được nó bằng cách nào.\n\n  - Trường hợp 1: Mình muốn có một chương trình cho phép nhập vào năm sinh, sau\n    đó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)\n\n    Có lẽ đây là một vấn đề quá đơn giản so với một số người, nhưng trước khi\n    làm cho máy tính hiểu được vấn đề, bản thân chúng ta phải hiểu được vấn đề\n    trước.\n\n    Mình đã tự đặt câu hỏi với bản thân là:\n    \"Hiện tại, mình đang cần biết điều gì?\".\n\n    Sau đó mình tự trả lời với bản thân là:\n    \"Mình muốn biết năm nay mình bao nhiêu tuổi\".\n\n  - Trường hợp 2: Mình muốn viết một chương trình tìm ra đường đi ngắn nhất để\n    đi từ nhà đến trường. (Hình 0.3.2)\n\n    Câu hỏi mình tự đặt ra: \"Làm thế nào để tiết kiệm xăng bây giờ?\"\n\n    Tự trả lời luôn: \"Để tìm coi đường nào ngắn nhất để đi tới trường mới được\".\n\n  - Trường hợp 3: Mình cần một chương trình giúp mình hoàn tất đống sổ sách\n    một cách nhanh chóng hơn. (Hình 0.3.3)\n\n    Câu hỏi: \"Với cái đống sổ sách này, làm sao mình có thể dành thời gian\n    đi chơi với gấu được?\"\n\n    Trả lời: \"Phải tìm cách để quản lý nó thôi, tiện thể đưa cho máy tính\n    làm luôn cho khỏe\".\n\nCó thể trong cuộc sống các bạn gặp phải những vấn đề không giống với mình đưa ra\nở trên. Có thể đó là một bài toán khó, một trường hợp khó giải quyết, và bạn cần\ncái máy tính của bạn giúp đỡ, đó là lúc mà bạn phải tự tìm ra\ncâu trả lời cho bản thân.\n\n## Bước 2: Thiết kế giải pháp\n\nĐây là lúc mà bạn cần đặt ra câu hỏi: \"Làm thế nào\" để giải quyết những vấn đề\ntrên? (Hình 0.3.4). Vấn đề nan giải là một trường hợp ở trên đều có nhiều hơn 1\ncách giải quyết. Một trong số chúng tốt, số còn lại đa phần là không tốt.\nThường thì trong bước này, một số lập trình viên tồi sẽ thực hiện\nmột cách lôi thôi, cẩu thả nhất trong tất cả các công đoạn.\n\nMình đã thấy nhiều người mới học lập trình, sau khi nhìn ra được vấn đề,\nhọ ngồi xuống và bắt đầu code những gì họ đang tưởng tượng.\nĐa phần, kết quả sinh ra không như mong đợi.\n\nĐiển hình, một giải pháp tốt thường có những đặc điểm sau:\n\n  - Nó có tính minh bạch, rõ ràng.\n  - Nó có thể sử dụng lại và dễ thay đổi trong tương lai.\n  - Tính hiệu quả.\n\nThực hiện tốt công đoạn này, bạn sẽ giảm được tối đa khả năng phát sinh lỗi\ntrong chương trình (sẽ tiết kiệm được khối thời gian cho việc sửa lỗi).\n\nỞ những bài sau, các bạn sẽ được học cách tự mình đưa ra giải pháp cho\ntừng tình huống cụ thể.\n\n## Bước 3: Viết chương trình\n\nĐể viết được chương trình, bạn cần biết:\n\n  - Ngôn ngữ lập trình bạn đang sử dụng. (Hình 0.3.5)\n  - IDE (môi trường phát triển ứng dụng). (Hình 0.3.6)\n\nBạn hoàn toàn có thể viết chương trình trên một số công cụ soản thảo văn bản như\nNotepad, Notepad++, Sublime Text,... Nhưng trong khóa học này, mình khuyên\ncác bạn nên sử dụng IDE, vì nó hổ trợ khá nhiều cho các bạn trong việc\ncompile và liên kết các file đối tượng.\n\nCụ thể, mình sử dụng công cụ Visual studio 2015 mà mình sẽ hướng dẫn cài đặt\ntrong bài học tiếp theo.\n\nFile chứa mã nguồn C++ của bạn cần được đặt tên và lưu với phần mở rộng\nlà `.cpp` giúp cho hệ điều hành có thể hiểu được đó là file mã nguồn C++.\n\nSau này bạn có thể gặp một số file C++ có định dạng phần mở rộng khác\nnhư `.h`, `.hpp` ... nhưng chúng ta sẽ nói về vấn đề này sau.\n\n## Bước 4: Biên dịch chương trình\n\nĐể biên dịch một chương trình C++, chúng ta cần một trình biên dịch (compiler).\n(Hình 0.3.7)\n\nMục đích của compile chương trình là biến những file mã nguồn có đuôi\n`.cpp`, `.h`, ... thành những file object `.o`\n\n(Hình 0.3.8)\n\nChúng ta sử dụng luôn trình biên dịch tích hợp sẵn trong visual studio 2015\nnên khá tiện lợi.\n\n## Bước 5: Liên kết các file object\n\n(Hình 0.3.9)\n\nCác files object sau khi được compiler biên dịch vẫn còn nằm tách biệt với nhau.\nNên quá trình này sẽ thực hiện liên kết chúng thành một file duy nhất,\ngọi là executable file (file .exe).\n\n## Bước 6: Chạy chương trình và kiểm lỗi\n\nTrong công đoạn này, bạn hoặc ai đó chạy chương trình mà bạn đã tạo ra,\nvới nhiều giá trị khác nhau được đưa vào nhằm chắc chắn rằng chương trình\nhoạt động như ý muốn.\n\n---\n\nỞ bài sau, chúng ta sẽ nói về IDE (môi trường tích hợp phát triển).\n\nHẹn gặp lại các bạn.\n","raw":"---\ntitle: Các công đoạn phát triển một phần mềm\n---\n\nỞ bài trước, chúng ta đã cùng nhau tìm hiểu C++ là gì, nó được dùng cho mục đích\ngì... Các bạn xem đến bài này nghĩa là các bạn đã xác định được phần nào hướng\nđi trong tương lai, hi vọng các bạn có thể theo đuổi đến cùng với\nlựa chọn của mình.\n\nTrong bài học này, chúng ta thảo luận về các bước để phát triển ra một chương\ntrình C++ trước khi các bạn bắt đầu với chương trình đầu tiên của mình.\n\nMột chương trình máy tính (phần mềm) được tạo ra nhằm được sử dụng trong một\nhoặc một vài mục đích cụ thể nào đó (Thống kê, dạy học, y tế, để giải trí,...\nhay thậm chí phần mềm được tạo ra để hổ trợ lập trình viên tạo\nra những phần mềm).\n\nViết một chương trình là một công đoạn nhỏ trong quá trình sản xuất phần mềm\n(vì một phần mềm thường là tập hợp của nhiều chương trình nhỏ) nhưng nó\ncũng được thực hiện thông qua những công đoạn tương tự như phát triển\nmột phần mềm lớn.\n\n![Hình 0.3.0](http://www.learncpp.com/images/CppTutorial/Section0/Development.png \"hình vẽ miêu tả các công đoạn phát triển một chương trình\")\n\nCác bước phát triển một phần mềm\n\n  - Xác định vấn đề cần giải quyết.\n  - Thiết kế giải pháp (chọn nền tảng phát triển, chọn ngôn ngữ, chọn công cụ,\n    xác định thuật toán cho chương trình...).\n  - Viết chương trình thực hiện theo giải pháp đã đề ra.\n  - Biên dịch chương trình (chuyển đổi mã lập trình về mã máy).\n  - Liên kết các file đã được biên dịch.\n  - Chạy chương trình, kiểm tra và sửa lỗi cho chương trình.\n\nĐối với một số lập trình viên chuyên nghiệp (hoặc do vấn đề cần giải quyết\nquá đơn giản), người ta có thể thực hiện nhanh bước 1, 2 và bắt tay vào viết\nchương trình ngay lập tức. Mục tiêu của khóa học này cũng bao gồm rèn luyện\ntư duy giúp bạn phát triển khả năng tự giải quyết vấn đề của riêng mình.\n\nChúng ta bắt đầu làm rõ từng bước trong quá trình phát triển\nchương trình phần mềm (hay cụ thể là chương trình C++).\n\n## Bước 1: Xác định vấn đề cần giải quyết\n\nCông đoạn này quyết định phần lớn đến việc chương trình của bạn được thực hiện\n một cách khó khăn hay dễ dàng. Nhưng trên lý thuyết, nó khá đơn giản.\nTất cả những gì bạn cần là một ý tưởng có thể dễ dàng xác định.\n\nĐể dễ hiểu hơn, chúng ta cùng đặt một câu hỏi: Bạn đang gặp phải vấn đề gì?\n\nMình xin đưa ra một số tình huống cụ thể:\n\n  - Mình muốn có một chương trình cho phép nhập vào năm sinh,\n    sau đó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)\n  - Mình muốn viết một chương trình tìm ra đường đi ngắn nhất\n    để đi từ nhà đến trường. (Hình 0.3.2)\n  - Mình cần một chương trình giúp mình hoàn tất đống sổ sách\n    một cách nhanh chóng hơn. (Hình 0.3.3)\n\nTrên đây là ba trường hợp ngẫu nhiên mình nghĩ đến vì mình cần dùng nó trong\ncuộc sống. Vì mình cần máy tính giúp mình giải quyết những thứ tương tự\nnhư trên, nên mình đã xác định vấn đề của riêng mình.\nCùng xem thử mình đã xác định được nó bằng cách nào.\n\n  - Trường hợp 1: Mình muốn có một chương trình cho phép nhập vào năm sinh, sau\n    đó tính ra số tuổi hiện tại của bạn. (Hình 0.3.1)\n\n    Có lẽ đây là một vấn đề quá đơn giản so với một số người, nhưng trước khi\n    làm cho máy tính hiểu được vấn đề, bản thân chúng ta phải hiểu được vấn đề\n    trước.\n\n    Mình đã tự đặt câu hỏi với bản thân là:\n    \"Hiện tại, mình đang cần biết điều gì?\".\n\n    Sau đó mình tự trả lời với bản thân là:\n    \"Mình muốn biết năm nay mình bao nhiêu tuổi\".\n\n  - Trường hợp 2: Mình muốn viết một chương trình tìm ra đường đi ngắn nhất để\n    đi từ nhà đến trường. (Hình 0.3.2)\n\n    Câu hỏi mình tự đặt ra: \"Làm thế nào để tiết kiệm xăng bây giờ?\"\n\n    Tự trả lời luôn: \"Để tìm coi đường nào ngắn nhất để đi tới trường mới được\".\n\n  - Trường hợp 3: Mình cần một chương trình giúp mình hoàn tất đống sổ sách\n    một cách nhanh chóng hơn. (Hình 0.3.3)\n\n    Câu hỏi: \"Với cái đống sổ sách này, làm sao mình có thể dành thời gian\n    đi chơi với gấu được?\"\n\n    Trả lời: \"Phải tìm cách để quản lý nó thôi, tiện thể đưa cho máy tính\n    làm luôn cho khỏe\".\n\nCó thể trong cuộc sống các bạn gặp phải những vấn đề không giống với mình đưa ra\nở trên. Có thể đó là một bài toán khó, một trường hợp khó giải quyết, và bạn cần\ncái máy tính của bạn giúp đỡ, đó là lúc mà bạn phải tự tìm ra\ncâu trả lời cho bản thân.\n\n## Bước 2: Thiết kế giải pháp\n\nĐây là lúc mà bạn cần đặt ra câu hỏi: \"Làm thế nào\" để giải quyết những vấn đề\ntrên? (Hình 0.3.4). Vấn đề nan giải là một trường hợp ở trên đều có nhiều hơn 1\ncách giải quyết. Một trong số chúng tốt, số còn lại đa phần là không tốt.\nThường thì trong bước này, một số lập trình viên tồi sẽ thực hiện\nmột cách lôi thôi, cẩu thả nhất trong tất cả các công đoạn.\n\nMình đã thấy nhiều người mới học lập trình, sau khi nhìn ra được vấn đề,\nhọ ngồi xuống và bắt đầu code những gì họ đang tưởng tượng.\nĐa phần, kết quả sinh ra không như mong đợi.\n\nĐiển hình, một giải pháp tốt thường có những đặc điểm sau:\n\n  - Nó có tính minh bạch, rõ ràng.\n  - Nó có thể sử dụng lại và dễ thay đổi trong tương lai.\n  - Tính hiệu quả.\n\nThực hiện tốt công đoạn này, bạn sẽ giảm được tối đa khả năng phát sinh lỗi\ntrong chương trình (sẽ tiết kiệm được khối thời gian cho việc sửa lỗi).\n\nỞ những bài sau, các bạn sẽ được học cách tự mình đưa ra giải pháp cho\ntừng tình huống cụ thể.\n\n## Bước 3: Viết chương trình\n\nĐể viết được chương trình, bạn cần biết:\n\n  - Ngôn ngữ lập trình bạn đang sử dụng. (Hình 0.3.5)\n  - IDE (môi trường phát triển ứng dụng). (Hình 0.3.6)\n\nBạn hoàn toàn có thể viết chương trình trên một số công cụ soản thảo văn bản như\nNotepad, Notepad++, Sublime Text,... Nhưng trong khóa học này, mình khuyên\ncác bạn nên sử dụng IDE, vì nó hổ trợ khá nhiều cho các bạn trong việc\ncompile và liên kết các file đối tượng.\n\nCụ thể, mình sử dụng công cụ Visual studio 2015 mà mình sẽ hướng dẫn cài đặt\ntrong bài học tiếp theo.\n\nFile chứa mã nguồn C++ của bạn cần được đặt tên và lưu với phần mở rộng\nlà `.cpp` giúp cho hệ điều hành có thể hiểu được đó là file mã nguồn C++.\n\nSau này bạn có thể gặp một số file C++ có định dạng phần mở rộng khác\nnhư `.h`, `.hpp` ... nhưng chúng ta sẽ nói về vấn đề này sau.\n\n## Bước 4: Biên dịch chương trình\n\nĐể biên dịch một chương trình C++, chúng ta cần một trình biên dịch (compiler).\n(Hình 0.3.7)\n\nMục đích của compile chương trình là biến những file mã nguồn có đuôi\n`.cpp`, `.h`, ... thành những file object `.o`\n\n(Hình 0.3.8)\n\nChúng ta sử dụng luôn trình biên dịch tích hợp sẵn trong visual studio 2015\nnên khá tiện lợi.\n\n## Bước 5: Liên kết các file object\n\n(Hình 0.3.9)\n\nCác files object sau khi được compiler biên dịch vẫn còn nằm tách biệt với nhau.\nNên quá trình này sẽ thực hiện liên kết chúng thành một file duy nhất,\ngọi là executable file (file .exe).\n\n## Bước 6: Chạy chương trình và kiểm lỗi\n\nTrong công đoạn này, bạn hoặc ai đó chạy chương trình mà bạn đã tạo ra,\nvới nhiều giá trị khác nhau được đưa vào nhằm chắc chắn rằng chương trình\nhoạt động như ý muốn.\n\n---\n\nỞ bài sau, chúng ta sẽ nói về IDE (môi trường tích hợp phát triển).\n\nHẹn gặp lại các bạn.\n","__filename":"cpp-co-ban/0-gioi-thieu-tong-quan/0-3-cac-cong-doan-phat-trien-mot-phan-mem-cpp.md","__url":"/cpp-co-ban/0-gioi-thieu-tong-quan/0-3-cac-cong-doan-phat-trien-mot-phan-mem-cpp/","__resourceUrl":"/cpp-co-ban/0-gioi-thieu-tong-quan/0-3-cac-cong-doan-phat-trien-mot-phan-mem-cpp/index.html","__dataUrl":"/cpp-co-ban/0-gioi-thieu-tong-quan/0-3-cac-cong-doan-phat-trien-mot-phan-mem-cpp/index.html.2b647293f5f21032ee6bc1ccab165562.json"}