{"head":{"title":"8.5 Con trỏ và hằng","route":"8/5-con-tr-va-hang","id":31355,"description":"int value1 = 5; ptr = &value1; int value2 = 10; ptr = &value2; &ptr = 10; //compile error int otherValue = 10; ptr = &otherValue; //compile…"},"body":"<html><head></head><body><h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Trong các bài học có liên quan đến con trỏ trước đây, chúng ta đã biết con trỏ cũng là một biến thông thường mà giá trị nó có thể chứa là địa chỉ của vùng nhớ khác. Như vậy, từ khóa const cũng có thể được sử dụng cho con trỏ như các biến có kiểu dữ liệu khác. Tuy nhiên, tùy vào vị trí đặt từ khóa const khi khai báo con trỏ mà nó lại có những ý nghĩa khác nhau.</p>\n\n<h5>Pointer to const</h5>\n\n<p>Thử xem xét ví dụ sau:</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">int</span> *ptr = &#x26;<span class=\"hljs-keyword\">value</span>;\n*ptr = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">//change value to 10</span></code></pre>\n\n<p>Với đoạn code này, chương trình của chúng ta hoạt động bình thường. Nó đơn thuần chỉ là dùng một con trỏ có tên <code>ptr</code> trỏ đến địa chỉ của biến value. Bây giờ chúng ta có một chút thay đổi như sau:</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">int</span> *ptr = &#x26;<span class=\"hljs-keyword\">value</span>; <span class=\"hljs-comment\">//compile error</span></code></pre>\n\n<p>Trong đoạn code trên, mình đã đặt vùng nhớ tại địa chỉ của biến value là vùng nhớ hằng, điều đó có nghĩa giá trị bên trong vùng nhớ đó không thể bị thay đổi. Mặc dù chúng ta chỉ mới cho con trỏ ptr trỏ đến vùng nhớ hằng đó chứ chưa thực hiện câu lệnh nào liên quan đến việc thay đổi giá trị bên trong vùng nhớ của biến value, nhưng compiler ngăn chặn điều này để đảm bảo an toàn dữ liệu cho vùng nhớ của biến value.</p>\n\n<p>Như vậy, công cụ con trỏ thông thường không được phép sử dụng để trỏ đến vùng nhớ hằng, chúng ta cần sử dụng công cụ khác, có thể gọi là <strong>Pointer to const</strong> (Con trỏ dùng để trỏ đến hằng). Để có một Pointer to const, chúng ta chỉ cần thêm từ khóa const đứng trước kiểu dữ liệu của con trỏ.</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> *ptr = &#x26;<span class=\"hljs-keyword\">value</span>; <span class=\"hljs-comment\">//it's ok, ptr point to a \"const int\"</span>\n*ptr = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">//compile error</span></code></pre>\n\n<p>Lúc này, con trỏ ptr trở thành Pointer to const nên nó đã có thể trỏ đến vùng nhớ hằng. Tuy nhiên, con trỏ này cũng không thể thay đổi giá trị bên trong vùng nhớ hằng. Do đó, compiler thông báo lỗi \"cannot assign to a variable that is const\".</p>\n\n<p>Một Pointer to const dùng để trỏ đến một vùng nhớ hằng, nó cũng có thể trỏ đến một vùng nhớ không phải hằng. Ví dụ:</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> *ptr = &#x26;<span class=\"hljs-keyword\">value</span>;\n*ptr = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">//compile error</span></code></pre>\n\n<p>Mặc dù Pointer to const có thể trỏ đến vùng nhớ không phải hằng, nhưng nó lại không thể thay đổi giá trị bên trong vùng nhớ đó. Nếu biên dịch đoạn code trên, compiler sẽ thông báo lỗi \"assignment of read-only location '* ptr'\". Điều này có nghĩa Pointer to const là loại con trỏ chỉ có chức năng đọc nội dung của vùng nhớ (bất kể vùng nhớ đó có phải hằng hay không) chứ không có chức năng ghi giá trị vào vùng nhớ.</p>\n\n<p><strong>Do đó, sử dụng Pointer to const sẽ đảm bảo toàn vẹn dữ liệu cho vùng nhớ mà nó trỏ đến.</strong></p>\n\n<p>Điểm đáng chú ý ở Pointer to const là một Pointer to const không phải là một biến hằng, nó chỉ là một loại công cụ có chức năng read-only. Do đó, chúng ta vẫn có thể cho Pointer to const trỏ đến vùng nhớ khác sau khi khởi tạo.</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> *<span class=\"hljs-built_in\">ptr</span> = <span class=\"hljs-literal\">NULL</span><span class=\"hljs-comment\">;</span>\n\n<span class=\"hljs-built_in\">int</span> value1 = <span class=\"hljs-number\">5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">ptr</span> = &#x26;value1<span class=\"hljs-comment\">;</span>\n\n<span class=\"hljs-built_in\">int</span> value2 = <span class=\"hljs-number\">10</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">ptr</span> = &#x26;value2<span class=\"hljs-comment\">;</span></code></pre>\n\n<p></p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-5-con-tro-va-hang/0.png?raw=true\" class=\"lightbox\" title=\"0.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-5-con-tro-va-hang/0.png?raw=true\" width=\"690\" height=\"363\"><div class=\"meta\">\n<span class=\"filename\">0.png?raw=true</span><span class=\"informations\">939x494</span><span class=\"expand\"></span>\n</div></a></div><p></p>\n\n<p>Chúng ta có thể khai báo Pointer to const bằng cách đặt từ khóa const như sau:</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">const</span> *<span class=\"hljs-built_in\">ptr</span> = <span class=\"hljs-literal\">NULL</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<p>Nhưng đây là cách khai báo dễ nhầm lẫn nên mình vẫn thích dùng cách cũ hơn:</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> *<span class=\"hljs-built_in\">ptr</span> = <span class=\"hljs-literal\">NULL</span><span class=\"hljs-comment\">;</span></code></pre>\n\n<h5>Const pointer</h5>\n\n<p>Const pointer là loại con trỏ chỉ gán được địa chỉ một lần khi khởi tạo, điều này có nghĩa sau khi trỏ đến vùng nhớ nào đó thì nó không thể trỏ đi nơi khác được. Để khai báo const pointer, chúng ta cần đặt từ khóa con giữa dấu * và tên con trỏ.</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">int</span> *<span class=\"hljs-keyword\">const</span> ptr = &#x26;<span class=\"hljs-keyword\">value</span>;</code></pre>\n\n<p>Cũng giống như const variable, const pointer cần được khởi tạo ngay sau khi khai báo, và địa chỉ được gán cho const pointer sẽ không thể thay đổi về sau.</p>\n\n<p></p><pre><code class=\"hljs language-autoit\"><span class=\"hljs-built_in\">int</span> value1 = <span class=\"hljs-number\">5</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">int</span> value2 = <span class=\"hljs-number\">10</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">int</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">ptr</span> = &#x26;value1<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-built_in\">ptr</span> = &#x26;value2<span class=\"hljs-comment\">; //compile error</span></code></pre>\n\n<p>Xét lại đoạn chương trình này:</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">int</span> *<span class=\"hljs-keyword\">const</span> ptr = &#x26;<span class=\"hljs-keyword\">value</span>;</code></pre>\n\n<p>Lúc này, con trỏ ptr chính nó là hằng, nhưng vùng nhớ mà nó trỏ đến (biến value) lại không phải hằng, nên con trỏ ptr hoàn toàn có thể thay đổi giá trị của biến value.</p>\n\n<p></p><pre><code class=\"hljs language-nimrod\"><span class=\"hljs-built_in\">int</span> value = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-built_in\">int</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">ptr</span> = &#x26;value;\n*<span class=\"hljs-keyword\">ptr</span> = <span class=\"hljs-number\">10</span>; //it's ok, change value <span class=\"hljs-keyword\">of</span> non-<span class=\"hljs-keyword\">const</span> memory area</code></pre>\n\n<p></p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-5-con-tro-va-hang/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-5-con-tro-va-hang/1.png?raw=true\" width=\"690\" height=\"363\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">939x494</span><span class=\"expand\"></span>\n</div></a></div><p></p>\n\n<p>Như vậy, const pointer có đầy đủ chức năng đọc và ghi giá trị lên vùng nhớ.</p>\n\n<h5>Const pointer to const</h5>\n\n<p>Chúng ta hoàn toàn có thể kết hợp cả 2 loại con trỏ trên lại với nhau để tạo thành loại con trỏ mới gọi là <strong>const pointer to const</strong>. Loại con trỏ này sẽ có chức năng read-only, và nó cũng không thể trỏ đến vùng nhớ khác sau khi đã khởi tạo.</p>\n\n<p></p><pre><code class=\"hljs language-cs\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> *<span class=\"hljs-keyword\">const</span> ptr = &#x26;<span class=\"hljs-keyword\">value</span>;\n\n&#x26;ptr = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">//compile error</span>\n\n<span class=\"hljs-keyword\">int</span> otherValue = <span class=\"hljs-number\">10</span>;\nptr = &#x26;otherValue; <span class=\"hljs-comment\">//compile error</span></code></pre>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã được biết thêm một số khái niệm về con trỏ có liên quan đến hằng. Khi sử dụng từ khóa const, chúng ta có thể tạo ra 2 loại con trỏ tùy vào vị trí đặt từ khóa const. Pointer to const là loại con trỏ chỉ có chức năng đọc nội dung vùng nhớ mà nó trỏ đến. Const pointer cũng tương tự như một biến hằng thông thường, vì giá trị mà nó nắm giữ là địa chỉ và nó là hằng, nên địa chỉ của con trỏ này sẽ không bị thay đổi (không thể trỏ đến vùng nhớ khác sau khi khởi tạo).</p>\n\n<h3>Bài tập cơ bản</h3>\n\n<p>Trong số các đoạn code dưới đây, đoạn code nào có thể biên dịch được?</p>\n\n<p>Code 1:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstring></span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n\t<span class=\"hljs-keyword\">char</span> str[] = <span class=\"hljs-string\">\"Le Tran Dat\"</span>;\n\t<span class=\"hljs-keyword\">char</span> *<span class=\"hljs-keyword\">const</span> p_str = str;\n\t\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-built_in\">strlen</span>(str); p_str++)\n\t{\n\t\t*p_str = <span class=\"hljs-string\">' '</span>;\n\t}\n\t\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; p_str &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Code 2:</p>\n\n<p></p><pre><code class=\"hljs language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;iostream></span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&#x3C;cstring></span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n\t<span class=\"hljs-keyword\">char</span> str[] = <span class=\"hljs-string\">\"Le Tran Dat\"</span>;\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> *p_str = str;\n\t\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-built_in\">strlen</span>(str); i++)\n\t{\n\t\t*(p_str + i) = <span class=\"hljs-string\">' '</span>;\n\t}\n\t\n\t<span class=\"hljs-built_in\">cout</span> &#x3C;&#x3C; p_str &#x3C;&#x3C; <span class=\"hljs-built_in\">endl</span>;\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n\n<hr>\n\n<h3>Link Videos khóa học</h3>\n\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\" rel=\"nofollow\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n</body></html>","__filename":"generated/31355.md","__url":"/8/5-con-tr-va-hang/","__resourceUrl":"/8/5-con-tr-va-hang/index.html","__dataUrl":"/8/5-con-tr-va-hang/index.html.9717e378d7312e77dd0af404f3ce878a.json"}