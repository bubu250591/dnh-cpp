{"head":{"title":"8.2 Con trỏ và mảng một chiều","route":"8/2-con-tr-va-mang-mot-chieu","id":30788,"description":"//show address of the first element of arr cout &lt;&lt; &arr[0] &lt;&lt; endl; //show address of the first element of arr cout &lt;&lt…"},"body":"\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Qua một số bài học tìm hiểu về khái niệm và cách sử dụng của con trỏ trong ngôn ngữ C/C++, chúng ta biết rằng chức năng của con trỏ là để lưu trữ một địa chỉ của một vùng nhớ trên bộ nhớ ảo (<strong>virtual memory</strong>), tận dụng sức mạnh của con trỏ chúng ta có thể dùng nó để quản lý vùng nhớ tại địa chỉ mà con trỏ đang giữ, kích thước vùng nhớ đó là bao nhiêu còn tùy thuộc vào kiểu dữ liệu chúng ta khai báo cho con trỏ.</p>\n\n<p>Trước khi vào phần trọng tâm bài học, chúng ta cùng xem lại một chút về khái niệm <strong>virtual memory</strong>. <strong>Virtual memory</strong> là một kĩ thuật quản lý bộ nhớ được thực hiện bởi cả phần cứng lẫn phần mềm trên máy tính chúng ta đang sử dụng. Mục đích của việc sử dụng kỹ thuật này là tổ chức các vùng bộ nhớ có thể sử dụng được trên các thiết bị lưu trữ (RAM, Hard disk drive, ...) thành một dãy địa chỉ ảo liên tiếp nhau <strong>từ 0x00000000 (0) đến 0xFFFFFFFF (4294967295)</strong> (giả sử mình đang xét trên hệ điều hành nền tảng 32 bits). </p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/0.png?raw=true\" width=\"451\" height=\"331\"></p>\n\n<p>Khi thao tác với <strong>virtual memory</strong> chúng ta sẽ có cảm giác như đang làm việc với những vùng nhớ có dãy địa chỉ liên tục nhau. Và với con trỏ trong ngôn ngữ C/C++, chúng ta có thể làm việc trực tiếp với các vùng nhớ trên bộ nhớ ảo.</p>\n\n<p>Các bạn có thấy cấu trúc tổ chức lưu trữ của <strong>virtual memory</strong> giống với cấu trúc dữ liệu nào mà chúng ta đã cùng tìm hiểu không? Đó chính là <strong>mảng một chiều</strong>.</p>\n\n<blockquote><p>Mảng một chiều là tập hợp các phần tử có cùng kiểu dữ liệu được lưu trữ liên tiếp nhau trên bộ nhớ ảo, nếu mảng một chiều có một hoặc nhiều hơn một phần tử, địa chỉ của phần tử đầu tiên cũng chính là địa chỉ của mảng một chiều.</p></blockquote>\n\n<p>Như mình đã nói ở trên, con trỏ trong ngôn ngữ C/C++ có thể thao tác trực tiếp với bộ nhớ ảo, vậy thì chúng ta cũng có thể sử dụng con trỏ để thao tác trực tiếp với mảng một chiều.</p>\n\n<h5>Địa chỉ của mảng một chiều và các phần tử trong mảng một chiều</h5>\n\n<p>Mình lấy một ví dụ về mảng một chiều được khai báo với 5 phần tử:</p>\n\n<pre><code>int arr[] = { 32, 13, 66, 11, 22 };</code></pre>\n\n<p>Như chúng ta đã biết, địa chỉ của mảng một chiều cũng là địa chỉ của phần tử đầu tiên, vì thế, đoạn chương trình bên dưới sẽ in ra 2 giá trị giống nhau:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;</code></pre>\n\n<p>Có một điểm đặc biệt của mảng một chiều trong C/C++, đoạn chương trình sau sẽ cho thấy điều đó:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;\n\ncout &lt;&lt; \"==============================\" &lt;&lt; endl;\ncout &lt;&lt; arr &lt;&lt; endl;</code></pre>\n\n<p>Kết quả ghi nhận được trên máy tính của mình:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/1.png?raw=true\" width=\"677\" height=\"343\"></p>\n\n<p>Điều này chứng tỏ rằng việc sử dụng tên mảng một chiều cũng đồng nghĩa đang sử dụng địa chỉ của mảng một chiều (<code>&amp;arr</code> tương đương với <code>arr</code>). Vì thế, chúng ta có thể in ra địa chỉ của cả 5 phần tử của mảng <code>arr</code> bằng cách sau:</p>\n\n<pre><code>cout &lt;&lt; arr &lt;&lt; enld;\ncout &lt;&lt; arr + 1 &lt;&lt; endl;\ncout &lt;&lt; arr + 2 &lt;&lt; endl;\ncout &lt;&lt; arr + 3 &lt;&lt; endl;\ncout &lt;&lt; arr + 4 &lt;&lt; endl;</code></pre>\n\n<p>Mảng <code>arr</code> là một tập hợp các phần tử số nguyên được cấp phát địa chỉ liên tiếp nhau trên bộ nhớ ảo. Các bạn cũng đã biết, sử dụng toán tử <strong>address-of</strong> sẽ trả về giá trị kiểu con trỏ, mình sử dụng toán tử <strong>(+)</strong> cho con mảng <code>arr</code> sẽ lấy được địa chỉ của các phần tử đứng sau phần tử đầu tiên của mảng <code>arr</code>.</p>\n\n<p>Với những địa chỉ này, chúng ta cũng có thể sử dụng toán tử <strong>dereference</strong> để truy xuất giá trị của chúng:</p>\n\n<pre><code>cout &lt;&lt; *(arr) &lt;&lt; enld;\ncout &lt;&lt; *(arr + 1) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 2) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 3) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 4) &lt;&lt; endl;</code></pre>\n\n<h5>Con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Mình lấy lại ví dụ mảng một chiều có 5 phần tử kiểu <strong>int</strong> giống như trên:</p>\n\n<pre><code>int arr[] = { 3, 5, 65, 23, 11 };</code></pre>\n\n<p>Vì mỗi phần tử bên trong mảng đều có kiểu <strong>int</strong>, do đó, chúng ta có thể sử dụng 1 con trỏ có kiểu dữ liệu tương ứng (int *) để trỏ đến từng phần tử của mảng <strong>arr</strong>.</p>\n\n<pre><code>int *ptr = &amp;arr[2]; //ptr point to the 3rd element</code></pre>\n\n<p>Mình cho con trỏ <strong>ptr</strong> trỏ đến phần tử có chỉ số là 2 trong mảng <strong>arr</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" class=\"lightbox\" title=\"2.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" width=\"690\" height=\"264\"><div class=\"meta\">\n<span class=\"filename\">2.png?raw=true</span><span class=\"informations\">938x360</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, chúng ta sử dụng <strong>dereference operator</strong> để truy xuất giá trị của <strong>ptr</strong> sẽ được giá trị <strong>65</strong>.</p>\n\n<pre><code>cout &lt;&lt; *ptr &lt;&lt; endl;</code></pre>\n\n<p>Từ địa chỉ của arr[2] mà con trỏ ptr đang nắm giữ, chúng ta cũng có thể sử dụng toán tử <strong>(+)</strong> hoặc <strong>(-)</strong> để truy xuất đến tất cả các phần tử còn lại trong mảng <strong>arr</strong> vì các phần tử của mảng có địa chỉ nối tiếp nhau trên bộ nhớ ảo.</p>\n\n<pre><code>cout &lt;&lt; *(ptr - 1) &lt;&lt; endl; //access the second element of arr\ncout &lt;&lt; *(ptr + 2) &lt;&lt; endl; //access the last element of arr</code></pre>\n\n<p>Chúng ta cũng có thể sử dụng toán tử <strong>(++)</strong> hoặc <strong>(--)</strong> để cho con trỏ ptr trỏ đến phần tử tiếp theo hoặc phần tử đứng trước đó:</p>\n\n<pre><code>ptr++;\ncout &lt;&lt; *ptr &lt;&lt; endl; //ptr is now point to &amp;arr[3]</code></pre>\n\n<p>Như các bạn thấy, chỉ với một con trỏ có kiểu dữ liệu tương ứng với kiểu của mảng một chiều, chúng ta có thể quản lý được toàn bộ phần tử trong mảng:</p>\n\n<pre><code>for (ptr = &amp;arr[0]; ptr &lt;= &amp;arr[4]; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Vòng lặp <strong>for</strong> ở ví dụ trên ban đầu khởi tạo bằng cách gán địa chỉ phần tử đầu tiên của mảng <strong>arr</strong> cho con trỏ <strong>ptr</strong>, khi nào địa chỉ mà <strong>ptr</strong> nắm giữ vẫn còn nhỏ hơn hoặc bằng địa chỉ của phần tử cuối cùng thì tiếp tục in giá trị mà <strong>ptr</strong> trỏ đến, cuối vòng lặp là cho <strong>ptr</strong> trỏ đến phần tử tiếp theo trong mảng.</p>\n\n<p>Chúng ta có thể thay phép gán <code>ptr = &amp;arr[0];</code> bằng phép gán <code>ptr = &amp;arr;</code> hoặc ngắn gọn hơn là <code>ptr = arr;</code> vì <strong>&amp;arr[0], &amp;arr hoặc arr</strong> đều cho chúng ta địa chỉ của phần tử đầu tiên trong mảng <strong>arr</strong>.</p>\n\n<p>Vì thế, chúng ta có thể viết lại như sau:</p>\n\n<pre><code>for (ptr = arr; ptr &lt;= arr + 4; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Cũng là in ra toàn bộ giá trị của các phần tử trong mảng <strong>arr</strong>, nhưng sử dụng con trỏ chúng ta có rất nhiều cách viết khác nhau:</p>\n\n<pre><code>int *ptr = arr; //ptr point to &amp;arr[0]\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(ptr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Chúng ta có thể sử dụng <strong>dereference operator</strong> để truy xuất giá trị của từng phần tử thông qua tên của mảng:</p>\n\n<pre><code>for (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(arr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Sau khi cho con trỏ trỏ đến mảng một chiều, chúng ta còn có thể sử dụng toán tử <strong>[]</strong> cho con trỏ để truy xuất đến các phần tử thay vì dùng tên mảng:</p>\n\n<pre><code>int *ptr = arr;\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; ptr[i] &lt;&lt; \" \";\n}</code></pre>\n\n<p>Giả sử chúng ta có 2 mảng một chiều kiểu <strong>int</strong> có cùng kích thước như sau:</p>\n\n<pre><code>int src[5] = { 3, 1, 5, 7, 4 };\nint des[5];</code></pre>\n\n<p>Việc copy dữ liệu từ mảng src sang mảng des có thể thực hiện được bằng 2 con trỏ:</p>\n\n<pre><code>int *p_src = src;\nint *p_des = des;\n\nfor (int i = 0; i &lt; 5; i++)\n{\n\t*(p_des + i) = *(p_src + i);\n}</code></pre>\n\n<p>Đối với mảng kí tự (<strong>C-style string</strong>), chúng ta có thể trực tiếp in nội dung của chuỗi kí tự sử dụng đối tượng <strong>cout</strong>. Ví dụ:</p>\n\n<pre><code>char my_name[50];\ncout &lt;&lt; \"Enter your name: \";\ngets_s(my_name);\n\ncout &lt;&lt; \"Hello \" &lt;&lt; my_name &lt;&lt; endl;</code></pre>\n\n<p>Như vậy chúng ta chỉ cần cung cấp cho đối tượng <strong>cout</strong> địa chỉ của mảng kí tự <code>my_name</code>, toàn bộ nội dung của mảng kí tự <code>my_name</code> sẽ được in ra màn hình. Và nếu chúng ta sử dụng một con trỏ kiểu <code>(char *)</code> để trỏ đến mảng <code>my_name</code>, chúng ta có thể dùng tên con trỏ để in mảng đó ra màn hình:</p>\n\n<pre><code>char *p_name = my_name;\ncout &lt;&lt; \"Hello \" &lt;&lt; p_name &lt;&lt; endl;</code></pre>\n\n<p>Bên cạnh đó, chúng ta có thể cho con trỏ kiểu <code>(char *)</code> trỏ đến một chuỗi kí tự cố định nào đó, và vẫn có thể sử dụng đối tượng cout để in nội dung mà con trỏ đó đang trỏ đến. Ví dụ:</p>\n\n<pre><code>char *p_str = \"This is an example string\";\ncout &lt;&lt; p_str &lt;&lt; endl;</code></pre>\n\n<p>Nhưng vùng nhớ của chuỗi kí tự này được xem là hằng số (const) nên chúng ta chỉ có thể xem nội dung mà <code>p_str</code> trỏ đến chứ không thể thay đổi kí tự bên trong chuỗi. Chúng ta sẽ tìm hiểu về vấn đề này trong các bài học tiếp theo.</p>\n\n<h5>Sự khác nhau khi sử dụng mảng một chiều và con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Sau khi con trỏ trỏ đến mảng một chiều, chúng ta có thể sử dụng tên con trỏ thay vì sử dụng tên mảng. Tuy vậy, giữa chúng vẫn có một số điểm khác biệt. Dễ nhận thấy nhất là khi sử dụng toán tử <code>sizeof()</code>. Ví dụ:</p>\n\n<pre><code>int arr[5];\nint *ptr = arr;\n\ncout &lt;&lt; \"Size of arr: \" &lt;&lt; sizeof(arr) &lt;&lt; endl;\ncout &lt;&lt; \"Size of ptr: \" &lt;&lt; sizeof(ptr) &lt;&lt; endl;</code></pre>\n\n<p>Debug đoạn chương trình này trên nền tảng 32 bits chúng ta thu được kết quả:</p>\n\n<pre><code>Size of arr: 20\nSize of ptr: 4</code></pre>\n\n<p>Khi sử dụng mảng một chiều, toán tử sizeof trả về kích thước của toàn bộ phần tử bên trong mảng. Trong khi đó, con trỏ sau khi trỏ đến mảng một chiều vẫn có kích thước 4 bytes (trên hệ điều hành 32 bits) như cũ.</p>\n\n<p>Như vậy, sử dụng mảng một chiều chúng ta có thể biết được chính xác số lượng phần tử chúng ta cần quản lý trong khi con trỏ không làm được điều này.</p>\n\n<p>Ngoài ra, mảng một chiều sau khi khai báo có địa chỉ cố định trên bộ nhớ ảo, con trỏ sau khi trỏ đến mảng một chiều vẫn có thể được trỏ đi nơi khác.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã cùng tìm hiểu một số đặc điểm giống và khác giữa mảng một chiều và con trỏ trong ngôn ngữ C/C++. Việc sử dụng con trỏ để quản lý mảng một chiều thường được dùng khi viết các hàm thao tác với mảng. Mình sẽ đề cập vấn đề này trong một số bài học tiếp theo.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n\n<hr>\n\n<h3>Link Videos khóa học</h3>\n\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\" rel=\"nofollow\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n","rawBody":"\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Qua một số bài học tìm hiểu về khái niệm và cách sử dụng của con trỏ trong ngôn ngữ C/C++, chúng ta biết rằng chức năng của con trỏ là để lưu trữ một địa chỉ của một vùng nhớ trên bộ nhớ ảo (<strong>virtual memory</strong>), tận dụng sức mạnh của con trỏ chúng ta có thể dùng nó để quản lý vùng nhớ tại địa chỉ mà con trỏ đang giữ, kích thước vùng nhớ đó là bao nhiêu còn tùy thuộc vào kiểu dữ liệu chúng ta khai báo cho con trỏ.</p>\n\n<p>Trước khi vào phần trọng tâm bài học, chúng ta cùng xem lại một chút về khái niệm <strong>virtual memory</strong>. <strong>Virtual memory</strong> là một kĩ thuật quản lý bộ nhớ được thực hiện bởi cả phần cứng lẫn phần mềm trên máy tính chúng ta đang sử dụng. Mục đích của việc sử dụng kỹ thuật này là tổ chức các vùng bộ nhớ có thể sử dụng được trên các thiết bị lưu trữ (RAM, Hard disk drive, ...) thành một dãy địa chỉ ảo liên tiếp nhau <strong>từ 0x00000000 (0) đến 0xFFFFFFFF (4294967295)</strong> (giả sử mình đang xét trên hệ điều hành nền tảng 32 bits). </p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/0.png?raw=true\" width=\"451\" height=\"331\"></p>\n\n<p>Khi thao tác với <strong>virtual memory</strong> chúng ta sẽ có cảm giác như đang làm việc với những vùng nhớ có dãy địa chỉ liên tục nhau. Và với con trỏ trong ngôn ngữ C/C++, chúng ta có thể làm việc trực tiếp với các vùng nhớ trên bộ nhớ ảo.</p>\n\n<p>Các bạn có thấy cấu trúc tổ chức lưu trữ của <strong>virtual memory</strong> giống với cấu trúc dữ liệu nào mà chúng ta đã cùng tìm hiểu không? Đó chính là <strong>mảng một chiều</strong>.</p>\n\n<blockquote><p>Mảng một chiều là tập hợp các phần tử có cùng kiểu dữ liệu được lưu trữ liên tiếp nhau trên bộ nhớ ảo, nếu mảng một chiều có một hoặc nhiều hơn một phần tử, địa chỉ của phần tử đầu tiên cũng chính là địa chỉ của mảng một chiều.</p></blockquote>\n\n<p>Như mình đã nói ở trên, con trỏ trong ngôn ngữ C/C++ có thể thao tác trực tiếp với bộ nhớ ảo, vậy thì chúng ta cũng có thể sử dụng con trỏ để thao tác trực tiếp với mảng một chiều.</p>\n\n<h5>Địa chỉ của mảng một chiều và các phần tử trong mảng một chiều</h5>\n\n<p>Mình lấy một ví dụ về mảng một chiều được khai báo với 5 phần tử:</p>\n\n<pre><code>int arr[] = { 32, 13, 66, 11, 22 };</code></pre>\n\n<p>Như chúng ta đã biết, địa chỉ của mảng một chiều cũng là địa chỉ của phần tử đầu tiên, vì thế, đoạn chương trình bên dưới sẽ in ra 2 giá trị giống nhau:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;</code></pre>\n\n<p>Có một điểm đặc biệt của mảng một chiều trong C/C++, đoạn chương trình sau sẽ cho thấy điều đó:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;\n\ncout &lt;&lt; \"==============================\" &lt;&lt; endl;\ncout &lt;&lt; arr &lt;&lt; endl;</code></pre>\n\n<p>Kết quả ghi nhận được trên máy tính của mình:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/1.png?raw=true\" width=\"677\" height=\"343\"></p>\n\n<p>Điều này chứng tỏ rằng việc sử dụng tên mảng một chiều cũng đồng nghĩa đang sử dụng địa chỉ của mảng một chiều (<code>&amp;arr</code> tương đương với <code>arr</code>). Vì thế, chúng ta có thể in ra địa chỉ của cả 5 phần tử của mảng <code>arr</code> bằng cách sau:</p>\n\n<pre><code>cout &lt;&lt; arr &lt;&lt; enld;\ncout &lt;&lt; arr + 1 &lt;&lt; endl;\ncout &lt;&lt; arr + 2 &lt;&lt; endl;\ncout &lt;&lt; arr + 3 &lt;&lt; endl;\ncout &lt;&lt; arr + 4 &lt;&lt; endl;</code></pre>\n\n<p>Mảng <code>arr</code> là một tập hợp các phần tử số nguyên được cấp phát địa chỉ liên tiếp nhau trên bộ nhớ ảo. Các bạn cũng đã biết, sử dụng toán tử <strong>address-of</strong> sẽ trả về giá trị kiểu con trỏ, mình sử dụng toán tử <strong>(+)</strong> cho con mảng <code>arr</code> sẽ lấy được địa chỉ của các phần tử đứng sau phần tử đầu tiên của mảng <code>arr</code>.</p>\n\n<p>Với những địa chỉ này, chúng ta cũng có thể sử dụng toán tử <strong>dereference</strong> để truy xuất giá trị của chúng:</p>\n\n<pre><code>cout &lt;&lt; *(arr) &lt;&lt; enld;\ncout &lt;&lt; *(arr + 1) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 2) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 3) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 4) &lt;&lt; endl;</code></pre>\n\n<h5>Con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Mình lấy lại ví dụ mảng một chiều có 5 phần tử kiểu <strong>int</strong> giống như trên:</p>\n\n<pre><code>int arr[] = { 3, 5, 65, 23, 11 };</code></pre>\n\n<p>Vì mỗi phần tử bên trong mảng đều có kiểu <strong>int</strong>, do đó, chúng ta có thể sử dụng 1 con trỏ có kiểu dữ liệu tương ứng (int *) để trỏ đến từng phần tử của mảng <strong>arr</strong>.</p>\n\n<pre><code>int *ptr = &amp;arr[2]; //ptr point to the 3rd element</code></pre>\n\n<p>Mình cho con trỏ <strong>ptr</strong> trỏ đến phần tử có chỉ số là 2 trong mảng <strong>arr</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" class=\"lightbox\" title=\"2.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" width=\"690\" height=\"264\"><div class=\"meta\">\n<span class=\"filename\">2.png?raw=true</span><span class=\"informations\">938x360</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, chúng ta sử dụng <strong>dereference operator</strong> để truy xuất giá trị của <strong>ptr</strong> sẽ được giá trị <strong>65</strong>.</p>\n\n<pre><code>cout &lt;&lt; *ptr &lt;&lt; endl;</code></pre>\n\n<p>Từ địa chỉ của arr[2] mà con trỏ ptr đang nắm giữ, chúng ta cũng có thể sử dụng toán tử <strong>(+)</strong> hoặc <strong>(-)</strong> để truy xuất đến tất cả các phần tử còn lại trong mảng <strong>arr</strong> vì các phần tử của mảng có địa chỉ nối tiếp nhau trên bộ nhớ ảo.</p>\n\n<pre><code>cout &lt;&lt; *(ptr - 1) &lt;&lt; endl; //access the second element of arr\ncout &lt;&lt; *(ptr + 2) &lt;&lt; endl; //access the last element of arr</code></pre>\n\n<p>Chúng ta cũng có thể sử dụng toán tử <strong>(++)</strong> hoặc <strong>(--)</strong> để cho con trỏ ptr trỏ đến phần tử tiếp theo hoặc phần tử đứng trước đó:</p>\n\n<pre><code>ptr++;\ncout &lt;&lt; *ptr &lt;&lt; endl; //ptr is now point to &amp;arr[3]</code></pre>\n\n<p>Như các bạn thấy, chỉ với một con trỏ có kiểu dữ liệu tương ứng với kiểu của mảng một chiều, chúng ta có thể quản lý được toàn bộ phần tử trong mảng:</p>\n\n<pre><code>for (ptr = &amp;arr[0]; ptr &lt;= &amp;arr[4]; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Vòng lặp <strong>for</strong> ở ví dụ trên ban đầu khởi tạo bằng cách gán địa chỉ phần tử đầu tiên của mảng <strong>arr</strong> cho con trỏ <strong>ptr</strong>, khi nào địa chỉ mà <strong>ptr</strong> nắm giữ vẫn còn nhỏ hơn hoặc bằng địa chỉ của phần tử cuối cùng thì tiếp tục in giá trị mà <strong>ptr</strong> trỏ đến, cuối vòng lặp là cho <strong>ptr</strong> trỏ đến phần tử tiếp theo trong mảng.</p>\n\n<p>Chúng ta có thể thay phép gán <code>ptr = &amp;arr[0];</code> bằng phép gán <code>ptr = &amp;arr;</code> hoặc ngắn gọn hơn là <code>ptr = arr;</code> vì <strong>&amp;arr[0], &amp;arr hoặc arr</strong> đều cho chúng ta địa chỉ của phần tử đầu tiên trong mảng <strong>arr</strong>.</p>\n\n<p>Vì thế, chúng ta có thể viết lại như sau:</p>\n\n<pre><code>for (ptr = arr; ptr &lt;= arr + 4; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Cũng là in ra toàn bộ giá trị của các phần tử trong mảng <strong>arr</strong>, nhưng sử dụng con trỏ chúng ta có rất nhiều cách viết khác nhau:</p>\n\n<pre><code>int *ptr = arr; //ptr point to &amp;arr[0]\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(ptr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Chúng ta có thể sử dụng <strong>dereference operator</strong> để truy xuất giá trị của từng phần tử thông qua tên của mảng:</p>\n\n<pre><code>for (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(arr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Sau khi cho con trỏ trỏ đến mảng một chiều, chúng ta còn có thể sử dụng toán tử <strong>[]</strong> cho con trỏ để truy xuất đến các phần tử thay vì dùng tên mảng:</p>\n\n<pre><code>int *ptr = arr;\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; ptr[i] &lt;&lt; \" \";\n}</code></pre>\n\n<p>Giả sử chúng ta có 2 mảng một chiều kiểu <strong>int</strong> có cùng kích thước như sau:</p>\n\n<pre><code>int src[5] = { 3, 1, 5, 7, 4 };\nint des[5];</code></pre>\n\n<p>Việc copy dữ liệu từ mảng src sang mảng des có thể thực hiện được bằng 2 con trỏ:</p>\n\n<pre><code>int *p_src = src;\nint *p_des = des;\n\nfor (int i = 0; i &lt; 5; i++)\n{\n\t*(p_des + i) = *(p_src + i);\n}</code></pre>\n\n<p>Đối với mảng kí tự (<strong>C-style string</strong>), chúng ta có thể trực tiếp in nội dung của chuỗi kí tự sử dụng đối tượng <strong>cout</strong>. Ví dụ:</p>\n\n<pre><code>char my_name[50];\ncout &lt;&lt; \"Enter your name: \";\ngets_s(my_name);\n\ncout &lt;&lt; \"Hello \" &lt;&lt; my_name &lt;&lt; endl;</code></pre>\n\n<p>Như vậy chúng ta chỉ cần cung cấp cho đối tượng <strong>cout</strong> địa chỉ của mảng kí tự <code>my_name</code>, toàn bộ nội dung của mảng kí tự <code>my_name</code> sẽ được in ra màn hình. Và nếu chúng ta sử dụng một con trỏ kiểu <code>(char *)</code> để trỏ đến mảng <code>my_name</code>, chúng ta có thể dùng tên con trỏ để in mảng đó ra màn hình:</p>\n\n<pre><code>char *p_name = my_name;\ncout &lt;&lt; \"Hello \" &lt;&lt; p_name &lt;&lt; endl;</code></pre>\n\n<p>Bên cạnh đó, chúng ta có thể cho con trỏ kiểu <code>(char *)</code> trỏ đến một chuỗi kí tự cố định nào đó, và vẫn có thể sử dụng đối tượng cout để in nội dung mà con trỏ đó đang trỏ đến. Ví dụ:</p>\n\n<pre><code>char *p_str = \"This is an example string\";\ncout &lt;&lt; p_str &lt;&lt; endl;</code></pre>\n\n<p>Nhưng vùng nhớ của chuỗi kí tự này được xem là hằng số (const) nên chúng ta chỉ có thể xem nội dung mà <code>p_str</code> trỏ đến chứ không thể thay đổi kí tự bên trong chuỗi. Chúng ta sẽ tìm hiểu về vấn đề này trong các bài học tiếp theo.</p>\n\n<h5>Sự khác nhau khi sử dụng mảng một chiều và con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Sau khi con trỏ trỏ đến mảng một chiều, chúng ta có thể sử dụng tên con trỏ thay vì sử dụng tên mảng. Tuy vậy, giữa chúng vẫn có một số điểm khác biệt. Dễ nhận thấy nhất là khi sử dụng toán tử <code>sizeof()</code>. Ví dụ:</p>\n\n<pre><code>int arr[5];\nint *ptr = arr;\n\ncout &lt;&lt; \"Size of arr: \" &lt;&lt; sizeof(arr) &lt;&lt; endl;\ncout &lt;&lt; \"Size of ptr: \" &lt;&lt; sizeof(ptr) &lt;&lt; endl;</code></pre>\n\n<p>Debug đoạn chương trình này trên nền tảng 32 bits chúng ta thu được kết quả:</p>\n\n<pre><code>Size of arr: 20\nSize of ptr: 4</code></pre>\n\n<p>Khi sử dụng mảng một chiều, toán tử sizeof trả về kích thước của toàn bộ phần tử bên trong mảng. Trong khi đó, con trỏ sau khi trỏ đến mảng một chiều vẫn có kích thước 4 bytes (trên hệ điều hành 32 bits) như cũ.</p>\n\n<p>Như vậy, sử dụng mảng một chiều chúng ta có thể biết được chính xác số lượng phần tử chúng ta cần quản lý trong khi con trỏ không làm được điều này.</p>\n\n<p>Ngoài ra, mảng một chiều sau khi khai báo có địa chỉ cố định trên bộ nhớ ảo, con trỏ sau khi trỏ đến mảng một chiều vẫn có thể được trỏ đi nơi khác.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã cùng tìm hiểu một số đặc điểm giống và khác giữa mảng một chiều và con trỏ trong ngôn ngữ C/C++. Việc sử dụng con trỏ để quản lý mảng một chiều thường được dùng khi viết các hàm thao tác với mảng. Mình sẽ đề cập vấn đề này trong một số bài học tiếp theo.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n\n<hr>\n\n<h3>Link Videos khóa học</h3>\n\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\" rel=\"nofollow\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n","raw":"---json\n{\"title\":\"8.2 Con trỏ và mảng một chiều\",\"route\":\"8/2-con-tr-va-mang-mot-chieu\",\"id\":30788}\n---\n\n<h4>Chào các bạn đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n\n<p>Qua một số bài học tìm hiểu về khái niệm và cách sử dụng của con trỏ trong ngôn ngữ C/C++, chúng ta biết rằng chức năng của con trỏ là để lưu trữ một địa chỉ của một vùng nhớ trên bộ nhớ ảo (<strong>virtual memory</strong>), tận dụng sức mạnh của con trỏ chúng ta có thể dùng nó để quản lý vùng nhớ tại địa chỉ mà con trỏ đang giữ, kích thước vùng nhớ đó là bao nhiêu còn tùy thuộc vào kiểu dữ liệu chúng ta khai báo cho con trỏ.</p>\n\n<p>Trước khi vào phần trọng tâm bài học, chúng ta cùng xem lại một chút về khái niệm <strong>virtual memory</strong>. <strong>Virtual memory</strong> là một kĩ thuật quản lý bộ nhớ được thực hiện bởi cả phần cứng lẫn phần mềm trên máy tính chúng ta đang sử dụng. Mục đích của việc sử dụng kỹ thuật này là tổ chức các vùng bộ nhớ có thể sử dụng được trên các thiết bị lưu trữ (RAM, Hard disk drive, ...) thành một dãy địa chỉ ảo liên tiếp nhau <strong>từ 0x00000000 (0) đến 0xFFFFFFFF (4294967295)</strong> (giả sử mình đang xét trên hệ điều hành nền tảng 32 bits). </p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/0.png?raw=true\" width=\"451\" height=\"331\"></p>\n\n<p>Khi thao tác với <strong>virtual memory</strong> chúng ta sẽ có cảm giác như đang làm việc với những vùng nhớ có dãy địa chỉ liên tục nhau. Và với con trỏ trong ngôn ngữ C/C++, chúng ta có thể làm việc trực tiếp với các vùng nhớ trên bộ nhớ ảo.</p>\n\n<p>Các bạn có thấy cấu trúc tổ chức lưu trữ của <strong>virtual memory</strong> giống với cấu trúc dữ liệu nào mà chúng ta đã cùng tìm hiểu không? Đó chính là <strong>mảng một chiều</strong>.</p>\n\n<blockquote><p>Mảng một chiều là tập hợp các phần tử có cùng kiểu dữ liệu được lưu trữ liên tiếp nhau trên bộ nhớ ảo, nếu mảng một chiều có một hoặc nhiều hơn một phần tử, địa chỉ của phần tử đầu tiên cũng chính là địa chỉ của mảng một chiều.</p></blockquote>\n\n<p>Như mình đã nói ở trên, con trỏ trong ngôn ngữ C/C++ có thể thao tác trực tiếp với bộ nhớ ảo, vậy thì chúng ta cũng có thể sử dụng con trỏ để thao tác trực tiếp với mảng một chiều.</p>\n\n<h5>Địa chỉ của mảng một chiều và các phần tử trong mảng một chiều</h5>\n\n<p>Mình lấy một ví dụ về mảng một chiều được khai báo với 5 phần tử:</p>\n\n<pre><code>int arr[] = { 32, 13, 66, 11, 22 };</code></pre>\n\n<p>Như chúng ta đã biết, địa chỉ của mảng một chiều cũng là địa chỉ của phần tử đầu tiên, vì thế, đoạn chương trình bên dưới sẽ in ra 2 giá trị giống nhau:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;</code></pre>\n\n<p>Có một điểm đặc biệt của mảng một chiều trong C/C++, đoạn chương trình sau sẽ cho thấy điều đó:</p>\n\n<pre><code>//show address of arr in virtual memory\ncout &lt;&lt; &amp;arr &lt;&lt; endl;\n\n//show address of the first element of arr\ncout &lt;&lt; &amp;arr[0] &lt;&lt; endl;\n\ncout &lt;&lt; \"==============================\" &lt;&lt; endl;\ncout &lt;&lt; arr &lt;&lt; endl;</code></pre>\n\n<p>Kết quả ghi nhận được trên máy tính của mình:</p>\n\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/1.png?raw=true\" width=\"677\" height=\"343\"></p>\n\n<p>Điều này chứng tỏ rằng việc sử dụng tên mảng một chiều cũng đồng nghĩa đang sử dụng địa chỉ của mảng một chiều (<code>&amp;arr</code> tương đương với <code>arr</code>). Vì thế, chúng ta có thể in ra địa chỉ của cả 5 phần tử của mảng <code>arr</code> bằng cách sau:</p>\n\n<pre><code>cout &lt;&lt; arr &lt;&lt; enld;\ncout &lt;&lt; arr + 1 &lt;&lt; endl;\ncout &lt;&lt; arr + 2 &lt;&lt; endl;\ncout &lt;&lt; arr + 3 &lt;&lt; endl;\ncout &lt;&lt; arr + 4 &lt;&lt; endl;</code></pre>\n\n<p>Mảng <code>arr</code> là một tập hợp các phần tử số nguyên được cấp phát địa chỉ liên tiếp nhau trên bộ nhớ ảo. Các bạn cũng đã biết, sử dụng toán tử <strong>address-of</strong> sẽ trả về giá trị kiểu con trỏ, mình sử dụng toán tử <strong>(+)</strong> cho con mảng <code>arr</code> sẽ lấy được địa chỉ của các phần tử đứng sau phần tử đầu tiên của mảng <code>arr</code>.</p>\n\n<p>Với những địa chỉ này, chúng ta cũng có thể sử dụng toán tử <strong>dereference</strong> để truy xuất giá trị của chúng:</p>\n\n<pre><code>cout &lt;&lt; *(arr) &lt;&lt; enld;\ncout &lt;&lt; *(arr + 1) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 2) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 3) &lt;&lt; endl;\ncout &lt;&lt; *(arr + 4) &lt;&lt; endl;</code></pre>\n\n<h5>Con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Mình lấy lại ví dụ mảng một chiều có 5 phần tử kiểu <strong>int</strong> giống như trên:</p>\n\n<pre><code>int arr[] = { 3, 5, 65, 23, 11 };</code></pre>\n\n<p>Vì mỗi phần tử bên trong mảng đều có kiểu <strong>int</strong>, do đó, chúng ta có thể sử dụng 1 con trỏ có kiểu dữ liệu tương ứng (int *) để trỏ đến từng phần tử của mảng <strong>arr</strong>.</p>\n\n<pre><code>int *ptr = &amp;arr[2]; //ptr point to the 3rd element</code></pre>\n\n<p>Mình cho con trỏ <strong>ptr</strong> trỏ đến phần tử có chỉ số là 2 trong mảng <strong>arr</strong>.</p>\n\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" class=\"lightbox\" title=\"2.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-2-con-tro-va-mang-mot-chieu/2.png?raw=true\" width=\"690\" height=\"264\"><div class=\"meta\">\n<span class=\"filename\">2.png?raw=true</span><span class=\"informations\">938x360</span><span class=\"expand\"></span>\n</div></a></div></p>\n\n<p>Lúc này, chúng ta sử dụng <strong>dereference operator</strong> để truy xuất giá trị của <strong>ptr</strong> sẽ được giá trị <strong>65</strong>.</p>\n\n<pre><code>cout &lt;&lt; *ptr &lt;&lt; endl;</code></pre>\n\n<p>Từ địa chỉ của arr[2] mà con trỏ ptr đang nắm giữ, chúng ta cũng có thể sử dụng toán tử <strong>(+)</strong> hoặc <strong>(-)</strong> để truy xuất đến tất cả các phần tử còn lại trong mảng <strong>arr</strong> vì các phần tử của mảng có địa chỉ nối tiếp nhau trên bộ nhớ ảo.</p>\n\n<pre><code>cout &lt;&lt; *(ptr - 1) &lt;&lt; endl; //access the second element of arr\ncout &lt;&lt; *(ptr + 2) &lt;&lt; endl; //access the last element of arr</code></pre>\n\n<p>Chúng ta cũng có thể sử dụng toán tử <strong>(++)</strong> hoặc <strong>(--)</strong> để cho con trỏ ptr trỏ đến phần tử tiếp theo hoặc phần tử đứng trước đó:</p>\n\n<pre><code>ptr++;\ncout &lt;&lt; *ptr &lt;&lt; endl; //ptr is now point to &amp;arr[3]</code></pre>\n\n<p>Như các bạn thấy, chỉ với một con trỏ có kiểu dữ liệu tương ứng với kiểu của mảng một chiều, chúng ta có thể quản lý được toàn bộ phần tử trong mảng:</p>\n\n<pre><code>for (ptr = &amp;arr[0]; ptr &lt;= &amp;arr[4]; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Vòng lặp <strong>for</strong> ở ví dụ trên ban đầu khởi tạo bằng cách gán địa chỉ phần tử đầu tiên của mảng <strong>arr</strong> cho con trỏ <strong>ptr</strong>, khi nào địa chỉ mà <strong>ptr</strong> nắm giữ vẫn còn nhỏ hơn hoặc bằng địa chỉ của phần tử cuối cùng thì tiếp tục in giá trị mà <strong>ptr</strong> trỏ đến, cuối vòng lặp là cho <strong>ptr</strong> trỏ đến phần tử tiếp theo trong mảng.</p>\n\n<p>Chúng ta có thể thay phép gán <code>ptr = &amp;arr[0];</code> bằng phép gán <code>ptr = &amp;arr;</code> hoặc ngắn gọn hơn là <code>ptr = arr;</code> vì <strong>&amp;arr[0], &amp;arr hoặc arr</strong> đều cho chúng ta địa chỉ của phần tử đầu tiên trong mảng <strong>arr</strong>.</p>\n\n<p>Vì thế, chúng ta có thể viết lại như sau:</p>\n\n<pre><code>for (ptr = arr; ptr &lt;= arr + 4; ptr++)\n{\n\tcout &lt;&lt; *ptr &lt;&lt; \" \";\n}</code></pre>\n\n<p>Cũng là in ra toàn bộ giá trị của các phần tử trong mảng <strong>arr</strong>, nhưng sử dụng con trỏ chúng ta có rất nhiều cách viết khác nhau:</p>\n\n<pre><code>int *ptr = arr; //ptr point to &amp;arr[0]\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(ptr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Chúng ta có thể sử dụng <strong>dereference operator</strong> để truy xuất giá trị của từng phần tử thông qua tên của mảng:</p>\n\n<pre><code>for (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; *(arr + i) &lt;&lt; \" \";\n}</code></pre>\n\n<p>Sau khi cho con trỏ trỏ đến mảng một chiều, chúng ta còn có thể sử dụng toán tử <strong>[]</strong> cho con trỏ để truy xuất đến các phần tử thay vì dùng tên mảng:</p>\n\n<pre><code>int *ptr = arr;\nfor (int i = 0; i &lt; 5; i++)\n{\n\tcout &lt;&lt; ptr[i] &lt;&lt; \" \";\n}</code></pre>\n\n<p>Giả sử chúng ta có 2 mảng một chiều kiểu <strong>int</strong> có cùng kích thước như sau:</p>\n\n<pre><code>int src[5] = { 3, 1, 5, 7, 4 };\nint des[5];</code></pre>\n\n<p>Việc copy dữ liệu từ mảng src sang mảng des có thể thực hiện được bằng 2 con trỏ:</p>\n\n<pre><code>int *p_src = src;\nint *p_des = des;\n\nfor (int i = 0; i &lt; 5; i++)\n{\n\t*(p_des + i) = *(p_src + i);\n}</code></pre>\n\n<p>Đối với mảng kí tự (<strong>C-style string</strong>), chúng ta có thể trực tiếp in nội dung của chuỗi kí tự sử dụng đối tượng <strong>cout</strong>. Ví dụ:</p>\n\n<pre><code>char my_name[50];\ncout &lt;&lt; \"Enter your name: \";\ngets_s(my_name);\n\ncout &lt;&lt; \"Hello \" &lt;&lt; my_name &lt;&lt; endl;</code></pre>\n\n<p>Như vậy chúng ta chỉ cần cung cấp cho đối tượng <strong>cout</strong> địa chỉ của mảng kí tự <code>my_name</code>, toàn bộ nội dung của mảng kí tự <code>my_name</code> sẽ được in ra màn hình. Và nếu chúng ta sử dụng một con trỏ kiểu <code>(char *)</code> để trỏ đến mảng <code>my_name</code>, chúng ta có thể dùng tên con trỏ để in mảng đó ra màn hình:</p>\n\n<pre><code>char *p_name = my_name;\ncout &lt;&lt; \"Hello \" &lt;&lt; p_name &lt;&lt; endl;</code></pre>\n\n<p>Bên cạnh đó, chúng ta có thể cho con trỏ kiểu <code>(char *)</code> trỏ đến một chuỗi kí tự cố định nào đó, và vẫn có thể sử dụng đối tượng cout để in nội dung mà con trỏ đó đang trỏ đến. Ví dụ:</p>\n\n<pre><code>char *p_str = \"This is an example string\";\ncout &lt;&lt; p_str &lt;&lt; endl;</code></pre>\n\n<p>Nhưng vùng nhớ của chuỗi kí tự này được xem là hằng số (const) nên chúng ta chỉ có thể xem nội dung mà <code>p_str</code> trỏ đến chứ không thể thay đổi kí tự bên trong chuỗi. Chúng ta sẽ tìm hiểu về vấn đề này trong các bài học tiếp theo.</p>\n\n<h5>Sự khác nhau khi sử dụng mảng một chiều và con trỏ trỏ đến mảng một chiều</h5>\n\n<p>Sau khi con trỏ trỏ đến mảng một chiều, chúng ta có thể sử dụng tên con trỏ thay vì sử dụng tên mảng. Tuy vậy, giữa chúng vẫn có một số điểm khác biệt. Dễ nhận thấy nhất là khi sử dụng toán tử <code>sizeof()</code>. Ví dụ:</p>\n\n<pre><code>int arr[5];\nint *ptr = arr;\n\ncout &lt;&lt; \"Size of arr: \" &lt;&lt; sizeof(arr) &lt;&lt; endl;\ncout &lt;&lt; \"Size of ptr: \" &lt;&lt; sizeof(ptr) &lt;&lt; endl;</code></pre>\n\n<p>Debug đoạn chương trình này trên nền tảng 32 bits chúng ta thu được kết quả:</p>\n\n<pre><code>Size of arr: 20\nSize of ptr: 4</code></pre>\n\n<p>Khi sử dụng mảng một chiều, toán tử sizeof trả về kích thước của toàn bộ phần tử bên trong mảng. Trong khi đó, con trỏ sau khi trỏ đến mảng một chiều vẫn có kích thước 4 bytes (trên hệ điều hành 32 bits) như cũ.</p>\n\n<p>Như vậy, sử dụng mảng một chiều chúng ta có thể biết được chính xác số lượng phần tử chúng ta cần quản lý trong khi con trỏ không làm được điều này.</p>\n\n<p>Ngoài ra, mảng một chiều sau khi khai báo có địa chỉ cố định trên bộ nhớ ảo, con trỏ sau khi trỏ đến mảng một chiều vẫn có thể được trỏ đi nơi khác.</p>\n\n<hr>\n\n<h3>Tổng kết</h3>\n\n<p>Trong bài học này, chúng ta đã cùng tìm hiểu một số đặc điểm giống và khác giữa mảng một chiều và con trỏ trong ngôn ngữ C/C++. Việc sử dụng con trỏ để quản lý mảng một chiều thường được dùng khi viết các hàm thao tác với mảng. Mình sẽ đề cập vấn đề này trong một số bài học tiếp theo.</p>\n\n<hr>\n\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n\n<hr>\n\n<h3>Link Videos khóa học</h3>\n\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\" rel=\"nofollow\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n","__filename":"generated/30788.md","__url":"/8/2-con-tr-va-mang-mot-chieu/","__resourceUrl":"/8/2-con-tr-va-mang-mot-chieu/index.html","__dataUrl":"/8/2-con-tr-va-mang-mot-chieu/index.html.3c8778e4780dd872224eef1cc8f11097.json"}