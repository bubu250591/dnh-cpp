{"head":{"title":"8.1 Toán tử tăng, giảm dùng cho con trỏ","route":"8/1-toan-tu-tang-giam-dung-cho-con-tr","id":30699,"description":"cout &lt;&lt; \"Before decreased: \" &lt;&lt; ptr &lt;&lt; endl; ptr--; cout &lt;&lt; \" After decreased: \" &lt;&lt; ptr &lt;&lt; endl; cout…"},"body":"<h4>Chào các bạn học viên đang theo dõi khóa học lập trình trực tuyến ngôn ngữ C++.</h4>\n<p>Trong bài học trước, chúng ta tạm dừng sau khi tìm hiểu những khái niệm cơ bản nhất khi sử dụng con trỏ trong C/C++, vẫn còn rất nhiều thứ cần phải nói khi nhắc đến con trỏ.</p>\n<p><strong>Một câu hỏi đặt ra là các phép toán khi sử dụng cho con trỏ có gì khác so với sử dụng các phép toán với các biến thông thường hay không?</strong></p>\n<p>Về mặt bản chất, giá trị lưu trữ bên trong vùng nhớ của con trỏ là địa chỉ, địa chỉ của một biến (hoặc vùng nhớ) có kiểu unsigned int (số nguyên không dấu), do đó, chúng ta có thể thực hiện các phép toán trên con trỏ. Nhưng kết quả của các phép toán thực hiện trên con trỏ sẽ khác các phép toán số học thông thường về giá trị và cả ý nghĩa.</p>\n<p>Ngôn ngữ C/C++ định nghĩa cho chúng ta 4 toán tử toán học có thể sử dụng cho con trỏ: <strong>++, --, +, và -</strong>. </p>\n<p>Trước khi tìm hiểu về các toán tử toán học dùng cho con trỏ, chúng ta khai báo trước một biến thông thường và một biến con trỏ (có kiểu dữ liệu phù hợp để trỏ tới biến thông thường vừa được khai báo):</p>\n<pre><code>int value = 0;\nint *ptr = &amp;value;</code></pre>\n<h5>Increment operator (++)</h5>\n<p>Như các bạn đã được học, <strong>increment operator (++)</strong> được dùng để tăng giá trị bên trong vùng nhớ của biến lên 1 đơn vị. <strong>Increment operator (++)</strong> là toán tử một ngôi, có thể đặt trước tên biến, hoặc đặt sau tên biến. </p>\n<p>Bây giờ, chúng ta sử dụng toán tử <strong>(++)</strong> cho con trỏ ptr để xem kết quả:</p>\n<pre><code>cout &lt;&lt; \"Before increased: \" &lt;&lt; ptr &lt;&lt; endl;\nptr++;\ncout &lt;&lt; \" After increased: \" &lt;&lt; ptr &lt;&lt; endl;</code></pre>\n<p>Kết quả:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/0.png?raw=true\" width=\"677\" height=\"343\"></p>\n<ul>\n<li><p>Before increased: <strong>0x00F9FEFC</strong> (heximal) tương đương <strong>16383740</strong> (decimal)</p></li>\n<li><p>After increased: <strong>0x00F9FF00</strong> (heximal) tương đương <strong>16383744</strong> (decimal)</p></li>\n</ul>\n<p>Địa chỉ mới của ptr lúc này là <strong>16383744</strong>, giá trị này lớn hơn giá trị cũ <strong>4</strong> đơn vị. Đúng bằng kích thước của kiểu dữ liệu <strong>int</strong> mà mình dùng để khai báo cho biến <strong>value</strong>.</p>\n<p>Như vậy, <strong>increment operator (++)</strong> sẽ làm con trỏ trỏ đến địa chỉ tiếp theo trên bộ nhớ ảo. Khoảng cách của 2 địa chỉ này đúng bằng kích thước của kiểu dữ liệu được khai báo cho con trỏ.</p>\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/1.png?raw=true\" class=\"lightbox\" title=\"1.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/1.png?raw=true\" width=\"690\" height=\"369\"><div class=\"meta\">\n<span class=\"filename\">1.png?raw=true</span><span class=\"informations\">837x448</span><span class=\"expand\"></span>\n</div></a></div></p>\n<p>Giả sử cũng với địa chỉ ban đầu là <strong>16383740</strong>, nếu con trỏ được khai báo là <code>char *ptr;</code> thì khi sử dụng toán tử (++), địa chỉ mới của con trỏ lúc này sẽ là <strong>16383741</strong>.</p>\n<h5>Decrement operator (--)</h5>\n<p>Ngược lại so với <strong>increment operator (++), decrement operator (--)</strong> sẽ giảm giá trị bên trong vùng nhớ của biến thông thường đi 1 đơn vị. Đối với biến con trỏ, khi sử dụng <strong>decrement operator (--)</strong>, nó sẽ làm thay đổi địa chỉ của con trỏ đang trỏ đến, giá trị địa chỉ mới sẽ bằng giá trị địa chỉ cũ trừ đi kích thước của kiểu dữ liệu mà con trỏ đang trỏ đến.</p>\n<p>Để dễ hình dung, mình lấy lại ví dụ trên:</p>\n<pre><code>int value = 0;\nint *ptr = &amp;value;\n<p>cout &#x3C;&#x3C; \"Before decreased: \" &#x3C;&#x3C; ptr &#x3C;&#x3C; endl;</p>\n<p>ptr--;\ncout &#x3C;&#x3C; \" After decreased: \" &#x3C;&#x3C; ptr &#x3C;&#x3C; endl;</code></pre></p>\n<p>Kết quả:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/2.png?raw=true\" width=\"677\" height=\"343\"></p>\n<ul>\n<li><p>Before increased: <strong>0x0051FC24</strong> (heximal) tương đương <strong>5372964</strong> (decimal)</p></li>\n<li><p>After increased: <strong>0x0051FC20</strong> (heximal) tương đương <strong>5372960</strong> (decimal)</p></li>\n</ul>\n<p>Như chúng ta thấy, địa chỉ mới nhỏ hơn 4 (bytes) so với địa chỉ ban đầu, 4 bytes này chính là kích thước kiểu dữ liệu <strong>int</strong> mà con trỏ được khai báo.</p>\n<p><div class=\"lightbox-wrapper\"><a href=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/3.png?raw=true\" class=\"lightbox\" title=\"3.png?raw=true\" rel=\"nofollow\"><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/3.png?raw=true\" width=\"690\" height=\"369\"><div class=\"meta\">\n<span class=\"filename\">3.png?raw=true</span><span class=\"informations\">837x448</span><span class=\"expand\"></span>\n</div></a></div></p>\n<p>Giả sử cũng với địa chỉ ban đầu là <strong>5372964</strong>, nếu con trỏ được khai báo <code>double *ptr;</code> thì sau khi sử dụng toán tử <strong>(--)</strong>, địa chỉ mới của con trỏ sẽ là <strong>5372956</strong>.</p>\n<h5>Addition operator (+)</h5>\n<p>Sử dụng <strong>increment operator (++)</strong> cho con trỏ chỉ có thể làm con trỏ trỏ đến địa chỉ tiếp theo trên bộ nhớ ảo bắt đầu từ địa chỉ ban đầu mà con trỏ đang nắm giữ. Trong khi đó, toán tử <strong>addition (+)</strong> cho phép chúng ta trỏ đến vùng nhớ bất kỳ phía sau địa chỉ mà con trỏ đang nắm giữ.</p>\n<p>Xét đoạn chương trình sau:</p>\n<pre><code>int value = 0;\nint *ptr = &amp;value;\n<p>cout &#x3C;&#x3C; ptr &#x3C;&#x3C; endl;</p>\n<p>ptr = ptr + 5;\ncout &#x3C;&#x3C; ptr &#x3C;&#x3C; endl;</code></pre></p>\n<p>Kết quả:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/4.png?raw=true\" width=\"677\" height=\"343\"></p>\n<ul>\n<li><p>Before added 5: <strong>0x0087FE48</strong> (heximal) tương đương <strong>8912456</strong>.</p></li>\n<li><p>After added 5: <strong>0x0087FE5C</strong> (heximal) tương đương <strong>8912476</strong>.</p></li>\n</ul>\n<p><code>8912476 - 8912456 = 20 (bytes)</code></p>\n<p>Như vậy, con trỏ <strong>ptr</strong> đã trỏ đến địa chỉ mới đứng sau địa chỉ ban đầu <strong>20 bytes</strong> (tương đương với <strong>5 lần</strong> kích thước kiểu <strong>int</strong>)</p>\n<p>Chúng ta có thể sử dụng <strong>dereference operator</strong> để truy xuất trực tiếp giá trị bên trong các vùng nhớ ảo bất kỳ khi sử dụng toán tử <strong>(+)</strong>.</p>\n<pre><code>int value = 0;\nint *ptr = &amp;value;\n<p>cout &#x3C;&#x3C; ptr &#x3C;&#x3C; \" => \"  &#x3C;&#x3C; <em>ptr &#x3C;&#x3C; endl;\ncout &#x3C;&#x3C; ptr + 10 &#x3C;&#x3C; \" => \" &#x3C;&#x3C; </em>(ptr + 10) &#x3C;&#x3C; endl;\ncout &#x3C;&#x3C; ptr + 50 &#x3C;&#x3C; \" => \" &#x3C;&#x3C; *(ptr + 50) &#x3C;&#x3C; endl;</code></pre></p>\n<p>Kết quả của đoạn chương trình này là:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/5.png?raw=true\" width=\"677\" height=\"343\"></p>\n<p>Giá trị 0 ban đầu là của biến value đang nắm giữ, những giá trị rác phía sau là của các vùng nhớ khác nắm giữ, chúng ta không cần thông qua tên biến nhưng vẫn có thể truy xuất giá trị của chúng thông qua <strong>dereference operator</strong>.</p>\n<p>Những giá trị này có thể do chương trình khác đang sử dụng, nhưng những vùng nhớ này chưa được truy xuất bởi các chương trình khác hoặc không phải vùng nhớ hệ thống quan trọng, nên chương trình của chúng ta vẫn có thể truy xuất đến giá trị bên trong những địa chỉ này. <strong>Nếu có 2 chương trình cùng truy cập đến một vùng nhớ, hệ thống sẽ xảy ra xung đột.</strong></p>\n<p><strong><em>Lưu ý: Toán tử (+) chỉ cho phép thực hiện với số nguyên.</em></strong></p>\n<h5>Subtraction operator (-)</h5>\n<p>Ngược lại so với toán tử <strong>(+)</strong>.</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/6.png?raw=true\" width=\"677\" height=\"343\"></p>\n<ul>\n<li><p>Before subtracted 5: <strong>0x002CF7E0</strong> (heximal) tương đương <strong>2947040</strong></p></li>\n<li><p>After subtracted 5: <strong>0x002CF7CC</strong> (heximal) tương đương <strong>2947020</strong></p></li>\n</ul>\n<p><code>2947040 - 2947020 = 20 (bytes)</code></p>\n<p>Như vậy, con trỏ <strong>ptr</strong> đã trỏ đến địa chỉ mới đứng trước địa chỉ ban đầu <strong>20 bytes</strong> (tương đương với <strong>5 lần</strong> kích thước kiểu <strong>int</strong>).</p>\n<p>Chúng ta có thể sử dụng <strong>dereference operator</strong> để truy xuất trực tiếp giá trị bên trong các vùng nhớ ảo bất kỳ khi sử dụng toán tử <strong>(-)</strong>.</p>\n<pre><code>int value = 0;\nint *ptr = &amp;value;\n<p>cout &#x3C;&#x3C; ptr &#x3C;&#x3C; \" => \"  &#x3C;&#x3C; <em>ptr &#x3C;&#x3C; endl;\ncout &#x3C;&#x3C; ptr - 5 &#x3C;&#x3C; \" => \" &#x3C;&#x3C; </em>(ptr - 5) &#x3C;&#x3C; endl;\ncout &#x3C;&#x3C; ptr - 10 &#x3C;&#x3C; \" => \" &#x3C;&#x3C; *(ptr - 10) &#x3C;&#x3C; endl;</code></pre></p>\n<p>Kết quả của đoạn chương trình này là:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/7.png?raw=true\" width=\"677\" height=\"343\"></p>\n<p>Giải thích tương tự khi sử dụng toán tử <strong>(+)</strong>.</p>\n<p><strong><em>Lưu ý: Toán tử (-) chỉ cho phép thực hiện với số nguyên.</em></strong></p>\n<h5>So sánh hai con trỏ</h5>\n<p>Ngoài các toán tử toán học, chúng ta còn có thể áp dụng các toán tử quan hệ khi sử dụng con trỏ. Giả sử chúng ta khai báo 2 con trỏ p1 và p2 như sau:</p>\n<pre><code>int value1, value2;\n<p>int <em>p1;\nint </em>p2;</p>\n<p>p1 = &#x26;value1;\np2 = &#x26;value2;</code></pre></p>\n<p>Con trỏ <strong>p1</strong> trỏ đến value1 và con trỏ <strong>p2</strong> trỏ đến value2. Chúng ta thực hiện lần lượt 6 phép so sánh:</p>\n<pre><code>cout &lt;&lt; \"Is p1 less than p2?             \" &lt;&lt; (p1 &lt; p2) &lt;&lt; endl;\ncout &lt;&lt; \"Is p1 greater than p2?          \" &lt;&lt; (p1 &gt; p2) &lt;&lt; endl;\ncout &lt;&lt; \"Is p1 less than or equal p2?    \" &lt;&lt; (p1 &lt;= p2) &lt;&lt; endl;\ncout &lt;&lt; \"Is p1 greater than or equal p2? \" &lt;&lt; (p1 &gt;= p2) &lt;&lt; endl;\ncout &lt;&lt; \"Is p1 equal p2?                 \" &lt;&lt; (p1 == p2) &lt;&lt; endl;\ncout &lt;&lt; \"Is p1 not equal p2?             \" &lt;&lt; (p1 != p2) &lt;&lt; endl;</code></pre>\n<p>Kết quả chúng ta được như sau:</p>\n<p><img src=\"https://github.com/nguyenchiemminhvu/CPP-Tutorial/blob/master/8-con-tro/8-1-cac-toan-tu-su-dung-cho-con-tro/comparison.png?raw=true\" width=\"677\" height=\"343\"></p>\n<p>Trong đó, phép so sánh bằng <strong>(==)</strong> sẽ kiểm tra xem 2 con trỏ này có trỏ đến cùng một địa chỉ hay không.</p>\n<h5>Một số lưu ý khi sử dụng các toán tử dùng cho con trỏ</h5>\n<p>Vì các toán tử dùng cho con trỏ có ý nghĩa hoàn toàn khác so với việc áp dụng các toán tử lên giá trị hoặc biến thông thường. Chúng ta cần có cách sử dụng hợp lý để tránh gây nhầm lẫn hoặc gây rối mắt.</p>\n<p>Lấy đoạn chương trình sau để làm ví dụ:</p>\n<pre><code>int n = 5;\nint *p = &amp;n; //p point to n\n<p>*p++;\np++;</p>\n<p>int n2 = <em>p</em>n;</code></pre></p>\n<p>Đây là một số cách sử dụng các toán tử toán học cho con trỏ gây khó hiểu cho người đọc.</p>\n<ul>\n<li><p>Lệnh <code>*p++;</code> sẽ thực hiện hai bước, đầu tiên là sử dụng toán tử <strong>dereference</strong> để truy xuất đến vùng nhớ tại địa chỉ mà con trỏ p đang nắm giữ, bước thứ hai là trỏ đến địa chỉ tiếp theo (đứng sau n).</p></li>\n<li><p>Sau đó, chúng ta bắt gặp lệnh <code>p++;</code> có nghĩa là cho con trỏ p trỏ đến địa chỉ tiếp theo lớn hơn địa chỉ ban đầu <strong>4 bytes</strong> (kích thước của kiểu <strong>int</strong>).</p></li>\n<li><p>Dòng cuối cùng, chúng ta có phép gán giá trị của phép nhân *p và n cho biến n2.</p></li>\n</ul>\n<p>Để chương trình rõ ràng hơn, chúng ta nên thêm các cặp dấu ngoặc vào chương trình tương tự như thế này:</p>\n<pre><code>int n = 5;\nint *p = &amp;n; //p point to n\n<p>(*p)++;\np++;</p>\n<p>int n2 = (<em>p) </em> n;</code></pre></p>\n<p>Những cặp dấu ngoặc sẽ giúp phân biệt lúc nào chúng ta sử dụng giá trị là địa chỉ lưu trong con trỏ, lúc nào chúng ta sử dụng giá trị trong vùng nhớ mà con trỏ đang trỏ đến.</p>\n<hr>\n<h3>Tổng kết</h3>\n<p>Việc sử dụng toán các toán tử toán học cho biến con trỏ mà không có mục đích rõ ràng có thể gây xung đột vùng nhớ, có thể dẫn đến crash chương trình. Chúng ta thường sử dụng các toán tử toán học khi con trỏ trỏ đến mảng một chiều, vì mảng một chiều lưu trữ trên bộ nhớ ảo là một vùng nhớ mà những phần tử có địa chỉ liên tiếp nhau. Chúng ta sẽ tìm hiểu vấn đề này trong các bài học sau.</p>\n<hr>\n<p><strong>Hẹn gặp lại các bạn trong bài học tiếp theo trong khóa học lập trình C++ hướng thực hành.</strong></p>\n<p>Mọi ý kiến đóng góp hoặc thắc mắc có thể đặt câu hỏi trực tiếp tại diễn đàn.</p>\n<p><a title=\"DayNhauHoc\" class=\"onebox\" target=\"_blank\">www.daynhauhoc.com</a></p>\n<hr>\n<h3>Link Videos khóa học</h3>\n<p><a href=\"https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview\" class=\"onebox\" target=\"_blank\" rel=\"nofollow\">https://www.udemy.com/c-co-ban-danh-cho-nguoi-moi-hoc-lap-trinh/learn/v4/overview</a></p>\n","__filename":"generated/30699.md","__url":"/8/1-toan-tu-tang-giam-dung-cho-con-tr/","__resourceUrl":"/8/1-toan-tu-tang-giam-dung-cho-con-tr/index.html","__dataUrl":"/8/1-toan-tu-tang-giam-dung-cho-con-tr/index.html.cce9500249671524aec88406806baa9e.json"}